{"version":3,"names":["ldModalCss","LdModal","this","handleClose","open","handleCancel","ev","cancelable","preventDefault","handleClick","target","tagName","close","handleTransitionEnd","ldmodalopened","emit","ldmodalclosed","async","handleKeyDown","key","onOpenChange","dialogRef","showModal","ldmodalopening","ldmodalclosing","componentDidLoad","addEventListener","disconnectedCallback","removeEventListener","render","cl","getClassNames","blurryBackdrop","h","Host","class","onClick","onClose","onTransitionEnd","part","ref","el","name","bind","ldToggleCss","LdToggle","handleChange","event","dispatchEvent","InputEvent","ldchange","checked","ariaDisabled","isTrusted","bubbles","composed","handleInput","ldinput","input","undefined","focus","updateHiddenInput","outerForm","closest","hiddenInput","form","createHiddenInput","remove","value","removeAttribute","setAttribute","getAttribute","document","createElement","type","style","visibility","position","pointerEvents","appendChild","componentWillLoad","attributesObserver","cloneAttributes","call","hasIcons","querySelector","registerAutofocus","autofocus","_a","disconnect","size","Object","assign","clonedAttributes","disabled","onChange","onInput","required","tabIndex","ldTabindex"],"sources":["../src/liquid/components/ld-modal/ld-modal.css?tag=ld-modal&encapsulation=shadow","../src/liquid/components/ld-modal/ld-modal.tsx","../src/liquid/components/ld-toggle/ld-toggle.css?tag=ld-toggle&encapsulation=shadow","../src/liquid/components/ld-toggle/ld-toggle.tsx"],"sourcesContent":[":host {\n  display: contents;\n}\n\n@keyframes ld-modal-in {\n  from {\n    transform: translateY(2rem);\n  }\n\n  to {\n    transform: translateY(0);\n  }\n}\n\n@keyframes ld-modal-out {\n  from {\n    transform: scale(1);\n  }\n\n  to {\n    transform: scale(0.9);\n  }\n}\n\n@keyframes ld-modal-out-mobile {\n  from {\n    transform: translateY(0);\n  }\n\n  to {\n    transform: translateY(2rem);\n  }\n}\n\ndialog.ld-modal,\n:host {\n  --ld-modal-bg-col: var(--ld-col-wht);\n  --ld-modal-fixed-padding-x: var(--ld-sp-16);\n  --ld-modal-fixed-padding-y: var(--ld-sp-16);\n  --ld-modal-padding-x: var(--ld-sp-16);\n  --ld-modal-padding-y: var(--ld-sp-24);\n  --ld-modal-fixed-bg-col: var(--ld-col-neutral-010);\n  --ld-modal-transition-duration: 0.001s;\n  --ld-modal-max-inline-size: 30rem;\n  --ld-modal-max-block-size: 70rem;\n  --ld-modal-min-inline-size: 18rem;\n\n  @media (prefers-reduced-motion: no-preference) {\n    --ld-modal-transition-duration: 0.2s;\n  }\n}\n\ndialog.ld-modal,\n:host dialog {\n  /* overwrites */\n  border: 0;\n  color: var(--ld-col-neutral-900);\n  color-scheme: var(--ld-modal-color-scheme, none);\n  display: flex; /* allows for transitions */\n  flex-direction: column;\n  inset: 0; /* keeps the dialog positioned correctly during closing transition */\n  margin: auto;\n  overflow: visible; /* required due to scalehack */\n  padding: 0;\n  position: fixed; /* makes sure it stays fixed during closing transition */\n  z-index: 2147483647; /* makes sure it is not overlapped during closing transition */\n\n  animation: ld-modal-in var(--ld-modal-transition-duration) ease-out forwards;\n  border-radius: var(--ld-br-l);\n  box-shadow: var(--ld-shadow-active);\n\n  /* dimensions */\n  max-block-size: min(\n    /* account for additional margin bottom on mobile */\n      calc(100% - var(--ld-sp-24) - var(--ld-sp-40)),\n    var(--ld-modal-max-block-size)\n  );\n  max-inline-size: min(\n    calc(100% - var(--ld-sp-32)),\n    var(--ld-modal-max-inline-size)\n  );\n  min-inline-size: var(--ld-modal-min-inline-size);\n\n  transition: opacity var(--ld-modal-transition-duration) linear,\n    transform var(--ld-modal-transition-duration) ease;\n\n  @media (max-width: 32rem) {\n    /*\n    On mobile we place the dialog at the bottom of the screen\n    so that it is easier for the user to interact with it. */\n    margin-bottom: var(--ld-sp-40);\n  }\n\n  &:not([open]) {\n    animation: ld-modal-out var(--ld-modal-transition-duration) ease-in forwards;\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity var(--ld-modal-transition-duration) linear,\n      visibility 0s var(--ld-modal-transition-duration) linear,\n      transform var(--ld-modal-transition-duration) ease;\n    visibility: hidden;\n\n    @media (max-width: 32rem) {\n      /*\n      On mobile, since the dialog is placed at the bottom of the screen,\n      we transition it out slightly differently than on wide view ports. */\n      animation-name: ld-modal-out-mobile;\n    }\n  }\n\n  &::after {\n    background-color: var(--ld-modal-bg-col);\n    border-radius: inherit;\n    content: '';\n    inset: 0;\n    position: absolute;\n    z-index: -1;\n  }\n\n  &::before {\n    background-color: var(--ld-thm-primary-active);\n    content: '';\n    inset: 0;\n    opacity: 0.3;\n    position: fixed;\n    transform: scale(99); /* scalehack required due to animation */\n    z-index: -2;\n  }\n}\n\ndialog.ld-modal--blurry-backdrop,\n:host(.ld-modal--blurry-backdrop) dialog {\n  &::backdrop {\n    backdrop-filter: blur(5px);\n  }\n}\n\n/* custom icon cross */\n.ld-modal__x {\n  align-self: flex-start;\n  appearance: none;\n  background-color: transparent;\n  border: solid transparent var(--ld-sp-8);\n  box-sizing: border-box;\n  cursor: pointer;\n  display: inline-flex;\n  height: 3rem;\n  justify-self: flex-end;\n  margin: auto calc(var(--ld-sp-16) * -1) auto auto;\n  overflow: hidden;\n  position: relative;\n  width: 3rem;\n\n  &::before,\n  &::after {\n    border-radius: 1rem;\n    background-color: var(--ld-col-neutral-900);\n    content: '';\n    display: block;\n    height: 1.25rem;\n    left: 50%;\n    position: absolute;\n    top: 50%;\n    width: 0.15rem;\n  }\n\n  &::before {\n    transform: translateX(-50%) translateY(-50%) rotate(45deg);\n  }\n\n  &::after {\n    transform: translateX(-50%) translateY(-50%) rotate(-45deg);\n  }\n}\n\n.ld-modal__content {\n  flex-grow: 1;\n  overflow: hidden auto;\n  overscroll-behavior: none;\n  padding: var(--ld-modal-padding-y) var(--ld-modal-padding-x);\n}\n\n.ld-modal__header,\n.ld-modal__footer {\n  align-items: center;\n  background-color: var(--ld-modal-fixed-bg-col);\n  display: grid;\n  grid-auto-flow: column;\n  gap: var(--ld-modal-fixed-padding-x);\n  padding: 0 var(--ld-modal-fixed-padding-x);\n}\n\n.ld-modal__header {\n  border-radius: var(--ld-br-l) var(--ld-br-l) 0 0;\n\n  > *:not(.ld-modal__x),\n  > ::slotted(*:not(.ld-modal__x)) {\n    padding: var(--ld-sp-12) 0;\n  }\n}\n\n.ld-modal__footer {\n  border-radius: 0 0 var(--ld-br-l) var(--ld-br-l);\n  justify-content: flex-end;\n\n  > *,\n  > ::slotted(*) {\n    margin: var(--ld-modal-fixed-padding-y) 0;\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part dialog - Actual `dialog` element\n * @part content - `div` element wrapping the default slot\n * @part footer - `footer` element\n * @part header - `header` element\n */\n@Component({\n  tag: 'ld-modal',\n  styleUrl: 'ld-modal.css',\n  shadow: true,\n})\nexport class LdModal {\n  @Element() el: HTMLElement\n  private dialogRef: HTMLDialogElement\n\n  /** The modal is cancelable by default. However, you can change this using this prop. */\n  @Prop() cancelable = true\n\n  /** Indicates that the modal dialog is active and can be interacted with. */\n  @Prop({ mutable: true, reflect: true }) open?: boolean\n\n  /** Use a blurry backdrop. */\n  @Prop() blurryBackdrop = false\n\n  /** Emitted when modal is opening (before transition). */\n  @Event() ldmodalopening: EventEmitter\n\n  /** Emitted when modal has opened (after transition). */\n  @Event() ldmodalopened: EventEmitter\n\n  /** Emitted when modal is closing (before transition). */\n  @Event() ldmodalclosing: EventEmitter\n\n  /** Emitted when modal has closed (after transition). */\n  @Event() ldmodalclosed: EventEmitter\n\n  /** Opens the modal dialog. */\n  @Method()\n  async showModal() {\n    this.open = true\n  }\n\n  /** Closes the modal dialog. */\n  @Method()\n  async close() {\n    this.open = false\n  }\n\n  @Listen('keydown', { passive: true, target: 'window' })\n  handleKeyDown(ev: KeyboardEvent) {\n    if (ev.key === 'Escape' && this.cancelable) {\n      this.open = false\n    }\n  }\n\n  @Watch('open')\n  onOpenChange(open: boolean) {\n    // Calling the showModal and close methods on the dialog element here\n    // is super important, because these make the native focus trap and\n    // the backdrop feature work.\n    // TODO: Remove @ts-ignore comments as soon as TS types get updated.\n    if (open) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.dialogRef.showModal()\n      this.ldmodalopening.emit()\n    } else {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.dialogRef.close()\n      this.ldmodalclosing.emit()\n    }\n  }\n\n  private handleClose = () => {\n    // When the dialog is closed with the Esc key we need to\n    // update the open prop explicitly.\n    this.open = false\n  }\n\n  private handleCancel = (ev: Event) => {\n    if (!this.cancelable) {\n      ev.preventDefault()\n    }\n  }\n\n  private handleClick = (ev: MouseEvent) => {\n    if (this.cancelable && (ev.target as HTMLElement).tagName === 'DIALOG') {\n      this.close()\n    }\n  }\n\n  private handleTransitionEnd = () => {\n    if (this.open) {\n      this.ldmodalopened.emit()\n    } else {\n      this.ldmodalclosed.emit()\n    }\n  }\n\n  componentDidLoad() {\n    this.dialogRef.addEventListener('cancel', this.handleCancel)\n  }\n\n  disconnectedCallback() {\n    this.dialogRef.removeEventListener('cancel', this.handleCancel)\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-modal',\n      this.blurryBackdrop && 'ld-modal--blurry-backdrop',\n    ])\n\n    return (\n      <Host class={cl}>\n        <dialog\n          onClick={this.handleClick}\n          onClose={this.handleClose}\n          onTransitionEnd={this.handleTransitionEnd}\n          open={this.open}\n          part=\"dialog\"\n          ref={(el) => (this.dialogRef = el as HTMLDialogElement)}\n        >\n          <header class=\"ld-modal__header\" part=\"header\">\n            <slot name=\"header\"></slot>\n            {this.cancelable && (\n              <button\n                class=\"ld-modal__x\"\n                aria-label=\"Dismiss\"\n                onClick={this.close.bind(this)}\n              ></button>\n            )}\n          </header>\n          <div class=\"ld-modal__content\" part=\"content\">\n            <slot></slot>\n          </div>\n          <footer class=\"ld-modal__footer\" part=\"footer\">\n            <slot name=\"footer\"></slot>\n          </footer>\n        </dialog>\n      </Host>\n    )\n  }\n}\n",":host,\n.ld-toggle {\n  /* layout */\n  --ld-toggle-height: 2rem;\n  --ld-toggle-width: 3.375rem;\n  --ld-toggle-inner-space: 0.125rem;\n  --ld-toggle-with-icons-width: 4.5rem;\n  --ld-toggle-lg-height: 2.5rem;\n  --ld-toggle-lg-width: 4.1875rem;\n  --ld-toggle-lg-inner-space: 0.1875rem;\n  --ld-toggle-lg-with-icons-width: 6rem;\n  --ld-toggle-border-radius: var(--ld-br-full);\n  --ld-toggle-knob-border-radius: var(--ld-br-full);\n\n  /* colors */\n  --ld-toggle-input-bg-col: var(--ld-col-neutral-600);\n  --ld-toggle-icon-start-col: var(--ld-col-wht);\n  --ld-toggle-icon-end-col: var(--ld-col-neutral-900);\n  --ld-toggle-knob-bg-col: var(--ld-col-wht);\n  --ld-toggle-checked-icon-start-col: var(--ld-col-neutral-900);\n  --ld-toggle-checked-icon-end-col: var(--ld-col-wht);\n  --ld-toggle-disabled-input-bg-col: var(--ld-col-neutral-050);\n  --ld-toggle-disabled-icon-col: var(--ld-col-neutral-200);\n  --ld-toggle-disabled-knob-bg-col: var(--ld-col-wht);\n  --ld-toggle-with-icons-input-bg-col: var(--ld-col-neutral-100);\n  --ld-toggle-with-icons-disabled-input-bg-col: var(--ld-col-neutral-050);\n\n  /* themable colors */\n  --ld-toggle-checked-bg-col: var(--ld-thm-primary);\n  --ld-toggle-invalid-input-bg-col: var(--ld-thm-error);\n  --ld-toggle-invalid-knob-bg-col: var(--ld-thm-error);\n  --ld-toggle-with-icons-knob-col: var(--ld-thm-primary);\n\n  align-items: center;\n  display: flex;\n  height: var(--ld-toggle-height);\n  min-width: auto !important;\n  position: relative;\n  width: var(--ld-toggle-width);\n\n  input {\n    appearance: none;\n    background-color: var(--ld-toggle-input-bg-col);\n    border-radius: var(--ld-toggle-border-radius);\n    height: 100%;\n    margin: 0;\n    position: absolute;\n    /* animations triggered by user interactions on single component instances are probably not a performance issue */\n    /* stylelint-disable-next-line plugin/no-low-performance-animation-properties */\n    transition: background-color 200ms ease-in-out;\n    width: 100%;\n    z-index: 0;\n\n    &:not(:disabled, [aria-disabled='true']) {\n      cursor: pointer;\n    }\n\n    &:checked {\n      background-color: var(--ld-toggle-checked-bg-col);\n\n      &:disabled,\n      &[aria-disabled='true'] {\n        background-color: var(--ld-toggle-disabled-input-bg-col);\n      }\n\n      ~ .ld-toggle__knob {\n        transform: translateX(\n          calc(var(--ld-toggle-width) - var(--ld-toggle-height))\n        );\n      }\n\n      ~ .ld-toggle__icon-start {\n        color: var(--ld-toggle-checked-icon-start-col);\n      }\n\n      ~ .ld-toggle__icon-end {\n        color: var(--ld-toggle-checked-icon-end-col);\n      }\n    }\n\n    &:disabled,\n    &[aria-disabled='true'] {\n      background-color: var(--ld-toggle-disabled-input-bg-col);\n\n      &:checked ~ .ld-toggle__icon-start,\n      &:checked ~ .ld-toggle__icon-end {\n        color: var(--ld-toggle-disabled-icon-col);\n      }\n\n      &:not(:checked) ~ .ld-toggle__icon-start,\n      &:not(:checked) ~ .ld-toggle__icon-end {\n        color: var(--ld-toggle-disabled-icon-col);\n      }\n    }\n  }\n\n  .ld-toggle__knob {\n    background-color: var(--ld-toggle-knob-bg-col);\n    border-radius: var(--ld-toggle-knob-border-radius);\n    display: block;\n    height: calc(var(--ld-toggle-height) - var(--ld-toggle-inner-space) * 2);\n    margin: var(--ld-toggle-inner-space);\n    pointer-events: none;\n    transition: transform 200ms ease-in-out;\n    width: calc(var(--ld-toggle-height) - var(--ld-toggle-inner-space) * 2);\n    z-index: 1;\n  }\n\n  input:where(:not(:disabled, [aria-disabled='true'])):invalid {\n    background-color: var(--ld-toggle-invalid-input-bg-col);\n  }\n}\n\n.ld-toggle--lg {\n  &,\n  :host(&) {\n    --ld-toggle-height: var(--ld-toggle-lg-height);\n    --ld-toggle-width: var(--ld-toggle-lg-width);\n    --ld-toggle-inner-space: var(--ld-toggle-lg-inner-space);\n  }\n\n  &.ld-toggle--with-icons {\n    &,\n    :host(&) {\n      --ld-toggle-width: var(--ld-toggle-lg-with-icons-width);\n\n      .ld-toggle__icon-start,\n      .ld-toggle__icon-end {\n        margin: auto 0.75rem;\n      }\n    }\n  }\n}\n\n:host(.ld-toggle--with-icons),\n.ld-toggle--with-icons {\n  --ld-toggle-width: var(--ld-toggle-with-icons-width);\n\n  input {\n    &:not(:disabled) {\n      background-color: var(--ld-toggle-with-icons-input-bg-col);\n    }\n\n    &:invalid ~ .ld-toggle__knob {\n      background-color: var(--ld-toggle-invalid-knob-bg-col);\n    }\n\n    &:disabled,\n    &[aria-disabled='true'] {\n      background-color: var(--ld-toggle-with-icons-disabled-input-bg-col);\n\n      ~ .ld-toggle__knob {\n        background-color: var(--ld-toggle-disabled-knob-bg-col);\n      }\n    }\n  }\n\n  .ld-toggle__knob {\n    background-color: var(--ld-toggle-with-icons-knob-col);\n  }\n\n  .ld-toggle__icon-start,\n  .ld-toggle__icon-end {\n    margin: auto 0.5rem;\n  }\n}\n\n.ld-toggle__icon-start,\n.ld-toggle__icon-end {\n  display: flex;\n  align-items: center;\n  pointer-events: none;\n  position: absolute;\n  /* animations triggered by user interactions on single component instances are probably not a performance issue */\n  /* stylelint-disable-next-line plugin/no-low-performance-animation-properties */\n  transition: color 200ms ease-in-out;\n  z-index: 1;\n\n  &:empty {\n    display: none;\n  }\n}\n\n.ld-toggle__icon-start {\n  color: var(--ld-toggle-icon-start-col);\n  left: 0;\n}\n\n.ld-toggle__icon-end {\n  color: var(--ld-toggle-icon-end-col);\n  right: 0;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { cloneAttributes } from '../../utils/cloneAttributes'\nimport { registerAutofocus } from '../../utils/focus'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part input - Actual input element\n * @part knob - Toggle knob\n * @part icon-wrapper - Both wrappers of icons\n * @part icon-wrapper-start - Wrapper of the start icon\n * @part icon-wrapper-end - Wrapper of the end icon\n */\n@Component({\n  tag: 'ld-toggle',\n  styleUrl: 'ld-toggle.css',\n  shadow: true,\n})\nexport class LdToggle implements InnerFocusable, ClonesAttributes {\n  @Element() el: HTMLElement\n\n  private attributesObserver: MutationObserver\n\n  private input: HTMLInputElement\n  private hiddenInput: HTMLInputElement\n  private hasIcons: boolean\n\n  /** Alternative disabled state that keeps element focusable */\n  @Prop() ariaDisabled: string\n\n  /** Automatically focus the form control when the page is loaded. */\n  @Prop({ reflect: true }) autofocus: boolean\n\n  /** Indicates whether the toggle is \"on\". */\n  @Prop({ mutable: true }) checked = false\n\n  /** Disabled state of the checkbox. */\n  @Prop() disabled: boolean\n\n  /** Associates the control with a form element. */\n  @Prop() form?: string\n\n  /** Set this property to `true` in order to mark the checkbox visually as invalid. */\n  @Prop() invalid: boolean\n\n  /** Tab index of the input. */\n  @Prop() ldTabindex: number | undefined\n\n  /** Used to specify the name of the control. */\n  @Prop() name: string\n\n  /** The value is not editable. */\n  @Prop() readonly?: boolean\n\n  /** Set this property to `true` in order to mark the checkbox as required. */\n  @Prop() required: boolean\n\n  /** Size of the toggle. */\n  @Prop() size?: 'sm' | 'lg'\n\n  /** The input value. */\n  @Prop() value: string\n\n  @State() clonedAttributes\n\n  /** Emitted when the input value changed and the element loses focus. */\n  @Event() ldchange: EventEmitter<boolean>\n\n  /** Emitted when the input value changed. */\n  @Event() ldinput: EventEmitter<boolean>\n\n  /** Sets focus on the toggle. */\n  @Method()\n  async focusInner() {\n    if (this.input !== undefined) {\n      this.input.focus()\n    }\n  }\n\n  @Watch('checked')\n  @Watch('name')\n  @Watch('value')\n  updateHiddenInput() {\n    const outerForm = this.el.closest('form')\n    if (!this.hiddenInput && this.name && (outerForm || this.form)) {\n      this.createHiddenInput()\n    }\n\n    if (this.hiddenInput) {\n      if (!this.name) {\n        this.hiddenInput.remove()\n        this.hiddenInput = undefined\n        return\n      }\n\n      this.hiddenInput.name = this.name\n      this.hiddenInput.checked = this.checked\n\n      if (this.value) {\n        this.hiddenInput.value = this.value\n      } else {\n        this.hiddenInput.removeAttribute('value')\n      }\n\n      if (this.form) {\n        this.hiddenInput.setAttribute('form', this.form)\n      } else if (this.hiddenInput.getAttribute('form')) {\n        if (outerForm) {\n          this.hiddenInput.removeAttribute('form')\n        } else {\n          this.hiddenInput.remove()\n          this.hiddenInput = undefined\n        }\n      }\n    }\n  }\n\n  private createHiddenInput() {\n    this.hiddenInput = document.createElement('input')\n    this.hiddenInput.type = 'checkbox'\n    this.hiddenInput.style.visibility = 'hidden'\n    this.hiddenInput.style.position = 'absolute'\n    this.hiddenInput.style.pointerEvents = 'none'\n    this.el.appendChild(this.hiddenInput)\n  }\n\n  private handleChange = (event: InputEvent) => {\n    this.el.dispatchEvent(new InputEvent('change', event))\n    this.ldchange.emit(this.checked)\n  }\n\n  private handleClick = (event: MouseEvent) => {\n    if (this.ariaDisabled) {\n      event.preventDefault()\n      return\n    }\n\n    this.checked = !this.checked\n\n    if (!event.isTrusted) {\n      // This happens, when a click event is dispatched on the host element\n      // from the outside i.e. on click on a parent ld-label element.\n      this.el.dispatchEvent(\n        new InputEvent('input', { bubbles: true, composed: true })\n      )\n      this.handleInput()\n      this.el.dispatchEvent(new InputEvent('change', { bubbles: true }))\n      this.ldchange.emit(this.checked)\n    }\n  }\n\n  private handleInput = () => {\n    this.ldinput.emit(this.checked)\n  }\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, ['size'])\n\n    this.hasIcons =\n      !!this.el.querySelector('[slot=\"icon-start\"]') ||\n      !!this.el.querySelector('[slot=\"icon-end\"]')\n\n    const outerForm = this.el.closest('form')\n\n    if (this.name && (outerForm || this.form)) {\n      this.createHiddenInput()\n      this.hiddenInput.checked = this.checked\n      this.hiddenInput.name = this.name\n\n      if (this.form) {\n        this.hiddenInput.setAttribute('form', this.form)\n      }\n\n      if (this.value) {\n        this.hiddenInput.value = this.value\n      }\n    }\n\n    registerAutofocus(this.autofocus)\n  }\n\n  disconnectedCallback() {\n    this.attributesObserver?.disconnect()\n  }\n\n  render() {\n    return (\n      <Host\n        class={getClassNames([\n          'ld-toggle',\n          this.size === 'lg' && 'ld-toggle--lg',\n          this.hasIcons && 'ld-toggle--with-icons',\n        ])}\n        onClick={this.handleClick}\n      >\n        <input\n          {...this.clonedAttributes}\n          aria-disabled={this.ariaDisabled}\n          checked={this.checked}\n          disabled={this.disabled}\n          onChange={this.handleChange}\n          onInput={this.handleInput}\n          part=\"input focusable\"\n          ref={(ref) => (this.input = ref)}\n          required={this.required}\n          tabIndex={this.ldTabindex}\n          type=\"checkbox\"\n          value={this.value}\n        />\n        <span class=\"ld-toggle__knob\" part=\"knob\" />\n        {this.hasIcons && (\n          <div\n            class=\"ld-toggle__icon-start\"\n            part=\"icon-wrapper icon-wrapper-start\"\n          >\n            <slot name=\"icon-start\" />\n          </div>\n        )}\n        {this.hasIcons && (\n          <div class=\"ld-toggle__icon-end\" part=\"icon-wrapper icon-wrapper-end\">\n            <slot name=\"icon-end\" />\n          </div>\n        )}\n      </Host>\n    )\n  }\n}\n"],"mappings":"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"}