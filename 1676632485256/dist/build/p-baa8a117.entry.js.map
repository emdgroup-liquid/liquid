{"version":3,"names":["ldIconCss","LdIcon","async","this","name","div","document","createElement","iconString","fetchIcon","innerHTML","replace","Array","from","el","shadowRoot","children","forEach","child","tagName","removeChild","appendChild","firstChild","componentWillLoad","loadIconPathData","render","h","Host","class","getClassNames","size","role"],"sources":["../src/liquid/components/ld-icon/ld-icon.css?tag=ld-icon&encapsulation=shadow","../src/liquid/components/ld-icon/ld-icon.tsx"],"sourcesContent":[":host,\n:where(.ld-icon) {\n  --ld-icon-secondary-col: var(--ld-col-wht);\n  --ld-icon-size-sm: 1rem;\n  --ld-icon-size-md: 1.25rem;\n  --ld-icon-size-lg: 1.5rem;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: var(--ld-icon-size-md);\n  height: var(--ld-icon-size-md);\n\n  ::slotted(svg),\n  :where(svg) {\n    width: var(--ld-icon-size-md);\n    height: var(--ld-icon-size-md);\n    flex-shrink: 0;\n  }\n}\n\n:host(.ld-icon--sm),\n:where(.ld-icon--sm) {\n  &,\n  ::slotted(svg),\n  :where(svg) {\n    width: var(--ld-icon-size-sm);\n    height: var(--ld-icon-size-sm);\n  }\n}\n:host(.ld-icon--lg),\n:where(.ld-icon--lg) {\n  &,\n  ::slotted(svg),\n  :where(svg) {\n    width: var(--ld-icon-size-lg);\n    height: var(--ld-icon-size-lg);\n  }\n}\n","import { Build, Component, Host, h, Prop, Watch, Element } from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { fetchIcon } from '../../utils/fetchAsset'\n\n/**\n * @slot - (optional) Custom SVG icon (only valid without name prop).\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part icon - Actual SVG element\n */\n@Component({\n  assetsDirs: ['assets'],\n  tag: 'ld-icon',\n  styleUrl: 'ld-icon.css',\n  shadow: true,\n})\nexport class LdIcon {\n  @Element() el: HTMLElement\n\n  /** The icon name. */\n  @Prop() name: string = null\n\n  /** Size of the icon. */\n  @Prop() size?: 'sm' | 'lg'\n\n  @Watch('name')\n  private async loadIconPathData(): Promise<void> {\n    if ((!Build.isBrowser && !Build.isTesting) || !this.name) {\n      return\n    }\n\n    const div = document.createElement('div')\n    const iconString = await fetchIcon(this.name)\n\n    div.innerHTML = iconString.replace(\n      '<svg',\n      '<svg class=\"ld-icon__svg\" part=\"icon\"'\n    )\n    Array.from(this.el.shadowRoot.children).forEach((child) => {\n      if (child.tagName !== 'STYLE') {\n        this.el.shadowRoot.removeChild(child)\n      }\n    })\n    this.el.shadowRoot.appendChild(div.firstChild)\n  }\n\n  componentWillLoad() {\n    this.loadIconPathData()\n  }\n\n  render() {\n    return (\n      <Host\n        class={getClassNames(['ld-icon', this.size && `ld-icon--${this.size}`])}\n        role=\"presentation\"\n      >\n        {!this.name && <slot></slot>}\n      </Host>\n    )\n  }\n}\n"],"mappings":"iIAAA,MAAMA,EAAY,y6B,MCgBLC,EAAM,M,mCAIM,K,oBAMfC,yBACN,IAA+CC,KAAKC,KAAM,CACxD,M,CAGF,MAAMC,EAAMC,SAASC,cAAc,OACnC,MAAMC,QAAmBC,EAAUN,KAAKC,MAExCC,EAAIK,UAAYF,EAAWG,QACzB,OACA,yCAEFC,MAAMC,KAAKV,KAAKW,GAAGC,WAAWC,UAAUC,SAASC,IAC/C,GAAIA,EAAMC,UAAY,QAAS,CAC7BhB,KAAKW,GAAGC,WAAWK,YAAYF,E,KAGnCf,KAAKW,GAAGC,WAAWM,YAAYhB,EAAIiB,W,CAGrCC,oBACEpB,KAAKqB,kB,CAGPC,SACE,OACEC,EAACC,EAAI,CACHC,MAAOC,EAAc,CAAC,UAAW1B,KAAK2B,MAAQ,YAAY3B,KAAK2B,SAC/DC,KAAK,iBAEH5B,KAAKC,MAAQsB,EAAA,a"}