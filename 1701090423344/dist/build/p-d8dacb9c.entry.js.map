{"version":3,"names":["ldBadgeCss","LdBadge","this","updateState","hasCustomIcon","el","querySelector","hasText","textContent","trim","componentWillLoad","observer","MutationObserver","observe","subtree","childList","attributes","disconnectedCallback","disconnect","render","cl","getClassNames","size","brandColor","h","Host","class","icon","part","name"],"sources":["../src/liquid/components/ld-badge/ld-badge.css?tag=ld-badge&encapsulation=shadow","../src/liquid/components/ld-badge/ld-badge.tsx"],"sourcesContent":[":host,\n.ld-badge {\n  --ld-badge-size-md: 1.0625rem;\n  --ld-badge-size-lg: 1rem;\n  --ld-badge-icon-size-md: 0.5625rem;\n  --ld-badge-icon-size-lg: 0.75rem;\n  --ld-badge-bg-col: var(--ld-thm-primary);\n  --ld-badge-gap-md: var(--ld-sp-6);\n  --ld-badge-gap-lg: var(--ld-sp-8);\n  --ld-badge-padding-block-md: 0.2125rem;\n  --ld-badge-padding-block-lg: 0.25rem;\n  --ld-badge-padding-inline-md: 0.5rem;\n  --ld-badge-padding-inline-lg: 0.625rem;\n\n  align-items: center;\n  background-color: var(--ld-badge-bg-col);\n  border-radius: var(--ld-br-full);\n  box-sizing: border-box;\n  color: var(--ld-col-wht);\n  display: inline-flex;\n  font: var(--ld-typo-body-xs);\n  font-weight: 700;\n  gap: var(--ld-badge-gap-md);\n  justify-content: center;\n  line-height: 1.1;\n  padding-block: var(--ld-badge-padding-block-md);\n  padding-inline: var(--ld-badge-padding-inline-md);\n  position: relative;\n\n  ::slotted(ld-icon),\n  ::slotted(.ld-icon),\n  > ld-icon,\n  > .ld-icon {\n    --ld-icon-size-md: var(--ld-badge-icon-size-md);\n    flex-shrink: 0;\n    margin: 0 calc(-1 * var(--ld-sp-8));\n  }\n\n  &.ld-badge--with-text {\n    &,\n    :host(&) {\n      ::slotted(ld-icon),\n      ::slotted(.ld-icon),\n      > ld-icon,\n      > .ld-icon {\n        margin: 0 auto;\n      }\n    }\n  }\n}\n\n.ld-badge--lg,\n:host(.ld-badge--lg) {\n  font: var(--ld-typo-body-s);\n  font-weight: 700;\n  gap: var(--ld-badge-gap-lg);\n  /* height: var(--ld-badge-size-lg); */\n  line-height: 1.1;\n  padding-block: var(--ld-badge-padding-block-lg);\n  padding-inline: var(--ld-badge-padding-inline-lg);\n\n  ::slotted(ld-icon),\n  ::slotted(.ld-icon),\n  > ld-icon,\n  > .ld-icon {\n    --ld-icon-size-md: var(--ld-badge-icon-size-lg);\n    transform: none;\n  }\n}\n\n.ld-badge--brand-color,\n:host(.ld-badge--brand-color) {\n  background-color: var(--ld-col-wht);\n  color: var(--ld-thm-primary);\n}\n","import { Component, Element, h, Host, Prop, State } from '@stencil/core'\nimport { HTMLStencilElement } from '@stencil/core/internal'\nimport { getClassNames } from '../../utils/getClassNames'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  assetsDirs: ['assets'],\n  tag: 'ld-badge',\n  styleUrl: 'ld-badge.css',\n  shadow: true,\n})\nexport class LdBadge {\n  @Element() el: HTMLStencilElement\n\n  private observer: MutationObserver\n\n  /** Defines badge custom color */\n  @Prop() brandColor?: boolean\n\n  /** Icon name. */\n  @Prop() icon?: string\n\n  /** The size of the badge, translated in rem */\n  @Prop() size?: 'lg'\n\n  @State() hasCustomIcon = false\n  @State() hasText = false\n\n  private updateState = () => {\n    this.hasCustomIcon = !!this.el.querySelector('[slot=\"icon\"]')\n    this.hasText = !!this.el.textContent.trim()\n  }\n\n  componentWillLoad() {\n    this.observer = new MutationObserver(this.updateState)\n    this.observer.observe(this.el, {\n      subtree: true,\n      childList: true,\n      attributes: false,\n    })\n\n    this.updateState()\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.observer) this.observer.disconnect()\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-badge',\n      this.size && `ld-badge--${this.size}`,\n      this.hasText && 'ld-badge--with-text',\n      this.brandColor && `ld-badge--brand-color`,\n    ])\n\n    return (\n      <Host class={cl}>\n        {(this.icon || this.hasCustomIcon) && (\n          <ld-icon class=\"ld-badge__icon\" part=\"icon\" name={this.icon}>\n            <slot name=\"icon\"></slot>\n          </ld-icon>\n        )}\n        <slot></slot>\n      </Host>\n    )\n  }\n}\n"],"mappings":"6FAAA,MAAMA,EAAa,y6E,MCcNC,EAAO,M,yBAiBVC,KAAAC,YAAc,KACpBD,KAAKE,gBAAkBF,KAAKG,GAAGC,cAAc,iBAC7CJ,KAAKK,UAAYL,KAAKG,GAAGG,YAAYC,MAAM,E,qFALpB,M,aACN,K,CAOnB,iBAAAC,GACER,KAAKS,SAAW,IAAIC,iBAAiBV,KAAKC,aAC1CD,KAAKS,SAASE,QAAQX,KAAKG,GAAI,CAC7BS,QAAS,KACTC,UAAW,KACXC,WAAY,QAGdd,KAAKC,a,CAGP,oBAAAc,GAEE,GAAIf,KAAKS,SAAUT,KAAKS,SAASO,Y,CAGnC,MAAAC,GACE,MAAMC,EAAKC,EAAc,CACvB,WACAnB,KAAKoB,MAAQ,aAAapB,KAAKoB,OAC/BpB,KAAKK,SAAW,sBAChBL,KAAKqB,YAAc,0BAGrB,OACEC,EAACC,EAAI,CAACC,MAAON,IACTlB,KAAKyB,MAAQzB,KAAKE,gBAClBoB,EAAA,WAASE,MAAM,iBAAiBE,KAAK,OAAOC,KAAM3B,KAAKyB,MACrDH,EAAA,QAAMK,KAAK,UAGfL,EAAA,a"}