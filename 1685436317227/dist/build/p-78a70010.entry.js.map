{"version":3,"names":["ldTooltipShadowCss","tooltipCount","mapPositionToAttachment","position","mapPositionToTargetAttachment","_a","copySlottedNodes","node","isElement","querySelectorAll","forEach","slot","assignedNodes","childNode","parentElement","insertBefore","remove","LdTooltip","this","idDescriber","syncContent","tooltipContent","contentRef","querySelector","tooltipRef","appendChild","initTooltip","async","attachment","targetAttachment","customTetherOptions","tetherOptions","JSON","parse","Object","assign","classPrefix","constraints","to","element","target","triggerRef","popper","Tether","enable","showTooltip","toggleTooltip","undefined","visible","hideTooltip","handleHideTrigger","triggerType","disabled","clearTimeout","delayTimeout","setTimeout","hideDelay","handleShowTrigger","showDelay","bind","handleToggleTrigger","handleSlotChange","childNodes","classList","contains","initObserver","observer","MutationObserver","observe","el","subtree","childList","attributes","findFirstSlottedTrigger","triggerInSlot","isSlot","assignedElements","updatePopper","newDisabled","disable","ldtooltipclose","emit","ldtooltipopen","handleClickOutside","ev","isTrusted","composedPath","includes","handleTouchOutside","handleCloseTooltip","componentWillLoad","hasDefaultTrigger","matches","focusableSelector","isInnerFocusable","triggerTabIndex","addEventListener","componentDidLoad","disconnectedCallback","disconnect","destroy","render","TriggerTag","tag","h","Host","preventScreenreader","class","getClassNames","onClick","onMouseEnter","onMouseLeave","part","ref","tabIndex","type","name","fill","viewBox","d","arrow","id","unstyled","size","ldTooltipPopperShadowCss","LdTooltipPopper","initialized","role"],"sources":["../src/liquid/components/ld-tooltip/ld-tooltip.shadow.css?tag=ld-tooltip&encapsulation=shadow","../src/liquid/components/ld-tooltip/ld-tooltip.tsx","../src/liquid/components/ld-tooltip/ld-tooltip-popper/ld-tooltip-popper.shadow.css?tag=ld-tooltip-popper&encapsulation=shadow","../src/liquid/components/ld-tooltip/ld-tooltip-popper/ld-tooltip-popper.tsx"],"sourcesContent":[".ld-tooltip__trigger {\n  /* themable colors */\n  --ld-tooltip-trigger-icon-col: var(--ld-thm-primary);\n  --ld-tooltip-trigger-icon-col-hover: var(--ld-thm-primary-hover);\n  --ld-tooltip-trigger-icon-col-focus: var(--ld-thm-primary-focus);\n\n  background: none;\n  border: 0;\n  display: inline-block;\n  font-family: inherit;\n  font-size: inherit;\n  padding: 0;\n  color: inherit;\n\n  &--clickable {\n    cursor: pointer;\n  }\n\n  &:focus:focus-visible .ld-tooltip__icon {\n    color: var(--ld-tooltip-trigger-icon-col-focus);\n  }\n\n  &:hover .ld-tooltip__icon {\n    color: var(--ld-tooltip-trigger-icon-col-hover);\n  }\n\n  ~ .ld-tooltip {\n    opacity: 0;\n    position: absolute;\n    display: none;\n  }\n}\n\n.ld-tooltip__icon {\n  color: var(--ld-tooltip-trigger-icon-col);\n  display: flex;\n  height: var(--ld-sp-16);\n  width: var(--ld-sp-16);\n}\n\n.ld-tooltip__content {\n  display: none;\n}\n","import Tether from 'tether'\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { focusableSelector, isInnerFocusable } from '../../utils/focus'\nimport { isElement, isSlot } from '../../utils/type-checking'\n\nexport type Position =\n  | 'bottom center'\n  | 'bottom left'\n  | 'bottom right'\n  | 'left bottom'\n  | 'left middle'\n  | 'left top'\n  | 'right bottom'\n  | 'right middle'\n  | 'right top'\n  | 'top center'\n  | 'top left'\n  | 'top right'\n\nlet tooltipCount = 0\n\nconst mapPositionToAttachment = (position: Position) => {\n  return {\n    'bottom center': 'top center',\n    'bottom left': 'top left',\n    'bottom right': 'top right',\n    'left bottom': 'bottom right',\n    'left middle': 'middle right',\n    'left top': 'top right',\n    'right bottom': 'bottom left',\n    'right middle': 'middle left',\n    'right top': 'top left',\n    'top center': 'bottom center',\n    'top left': 'bottom left',\n    'top right': 'bottom right',\n  }[position]\n}\n\nconst mapPositionToTargetAttachment = (position: Position) => {\n  return (\n    {\n      'left bottom': 'bottom left',\n      'left middle': 'middle left',\n      'left top': 'top left',\n      'right bottom': 'bottom right',\n      'right middle': 'middle right',\n      'right top': 'top right',\n    }[position] ?? position\n  )\n}\n\nconst copySlottedNodes = (node: Node) => {\n  // text node\n  if (!isElement(node)) {\n    return\n  }\n\n  node.querySelectorAll('slot').forEach((slot) => {\n    slot.assignedNodes().forEach((childNode) => {\n      copySlottedNodes(childNode)\n      slot.parentElement.insertBefore(childNode, slot)\n    })\n    slot.remove()\n  })\n}\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part content - `span` element wrapping the default slot\n * @part icon - Default icon when no trigger is supplied\n * @part trigger - Trigger button\n * @part popper - Popper element (can only be styled as long as tooltip is not initialized)\n */\n@Component({\n  tag: 'ld-tooltip',\n  styleUrl: 'ld-tooltip.shadow.css',\n  shadow: true,\n})\nexport class LdTooltip {\n  @Element() el: HTMLElement\n\n  private contentRef!: HTMLSpanElement\n  private delayTimeout?: NodeJS.Timeout\n  private idDescriber = `ld-tooltip-${++tooltipCount}`\n  private observer: MutationObserver\n  private popper?: Tether\n  private tooltipRef!: HTMLElement\n  private triggerRef!: HTMLSpanElement\n\n  /** Show arrow */\n  @Prop() arrow?: boolean\n\n  /** Disable tooltip trigger */\n  @Prop() disabled?: boolean\n\n  /** Delay in ms until tooltip hides (only when trigger type is 'hover') */\n  @Prop() hideDelay? = 0\n\n  /** Position of the tooltip relative to the trigger element (also affects the arrow position) */\n  @Prop() position?: Position = 'top center'\n\n  /**\n   * Do not apply code that triggers screenreaders when tooltip opens.\n   * @internal\n   */\n  @Prop() preventScreenreader? = false\n\n  /** Delay in ms until tooltip shows (only when trigger type is 'hover') */\n  @Prop() showDelay? = 0\n\n  /** The tooltip size (effects tooltip padding only) */\n  @Prop() size?: 'sm'\n\n  /**\n   * Render the tooltip without visual styling.\n   * @internal\n   */\n  @Prop() unstyled?: HTMLLdTooltipPopperElement['unstyled']\n\n  /** The rendered HTML tag for the tooltip trigger. */\n  @Prop() tag? = 'button'\n\n  /** Tether options object to be merged with the default options (optionally stringified). */\n  @Prop() tetherOptions?: Partial<Tether.ITetherOptions> | string\n\n  /** Event type that triggers the tooltip */\n  @Prop() triggerType?: 'click' | 'hover' = 'hover'\n\n  /** Emitted when the tooltip is opened. */\n  @Event() ldtooltipopen: EventEmitter\n\n  /** Emitted when the tooltip is opened. */\n  @Event() ldtooltipclose: EventEmitter\n\n  @State() hasDefaultTrigger = true\n  @State() triggerTabIndex?: number\n  @State() visible = false\n\n  @Watch('disabled')\n  updatePopper(newDisabled: boolean) {\n    if (newDisabled) {\n      this.hideTooltip()\n    }\n  }\n\n  private syncContent = () => {\n    const tooltipContent = this.contentRef.querySelector('slot').assignedNodes()\n\n    tooltipContent.forEach((node) => {\n      copySlottedNodes(node)\n      // We put original node will be put in the tooltipRef, because we cannot\n      // clone event listeners. The original event listeners must be\n      // present on the node that is located in the tooltipRef element.\n      this.tooltipRef.appendChild(node)\n    })\n  }\n\n  private initTooltip = async () => {\n    const attachment = mapPositionToAttachment(this.position)\n    const targetAttachment = mapPositionToTargetAttachment(this.position)\n\n    const customTetherOptions: Partial<Tether.ITetherOptions> =\n      typeof this.tetherOptions === 'string'\n        ? JSON.parse(this.tetherOptions)\n        : this.tetherOptions\n    const tetherOptions: Tether.ITetherOptions = {\n      attachment,\n      classPrefix: 'ld-tether',\n      constraints: [\n        {\n          attachment: 'together',\n          to: 'window',\n        },\n      ],\n      element: this.tooltipRef,\n      target: this.triggerRef,\n      targetAttachment,\n      ...customTetherOptions,\n    }\n\n    this.popper = new Tether(tetherOptions)\n    // Fixes a tether positioning bug\n    this.popper.enable()\n    this.popper.enable()\n    this.popper.enable()\n    await this.showTooltip()\n  }\n\n  /** Get the `ld-tooltip-popper` element. */\n  @Method()\n  async getTooltip() {\n    return this.tooltipRef\n  }\n\n  /** Hide tooltip */\n  @Method()\n  async hideTooltip() {\n    clearTimeout(this.delayTimeout)\n    this.popper?.disable()\n    this.visible = false\n    this.ldtooltipclose.emit()\n  }\n\n  /** Show tooltip */\n  @Method()\n  async showTooltip() {\n    if (this.disabled) return\n\n    if (!this.popper) {\n      await this.initTooltip()\n      return\n    }\n\n    clearTimeout(this.delayTimeout)\n    this.popper.enable()\n    this.visible = true\n    this.ldtooltipopen.emit()\n  }\n\n  private toggleTooltip = () => {\n    if (this.popper == undefined) {\n      return\n    }\n\n    if (this.visible) {\n      this.hideTooltip()\n    } else {\n      this.showTooltip()\n    }\n  }\n\n  private handleHideTrigger = () => {\n    if (this.triggerType === 'click' || this.disabled) {\n      return\n    }\n\n    clearTimeout(this.delayTimeout)\n\n    if (this.popper) {\n      this.delayTimeout = setTimeout(() => {\n        this.hideTooltip()\n      }, this.hideDelay)\n    }\n  }\n\n  private handleShowTrigger = () => {\n    if (this.triggerType === 'click' || this.disabled) {\n      return\n    }\n\n    clearTimeout(this.delayTimeout)\n\n    if (this.popper === undefined) {\n      this.delayTimeout = setTimeout(this.initTooltip, this.showDelay)\n    } else {\n      this.delayTimeout = setTimeout(\n        this.showTooltip.bind(this),\n        this.showDelay\n      )\n    }\n  }\n\n  private handleToggleTrigger = () => {\n    if (this.triggerType === 'hover' || this.disabled) {\n      return\n    }\n\n    if (this.popper === undefined) {\n      this.initTooltip()\n    } else {\n      this.toggleTooltip()\n    }\n  }\n\n  // TODO: maybe this should listen only, if the tooltip was opened by click.\n  @Listen('click', {\n    target: 'window',\n  })\n  handleClickOutside(ev: MouseEvent) {\n    if (\n      this.visible &&\n      this.triggerType === 'click' &&\n      ev.isTrusted &&\n      !ev.composedPath().includes(this.el) &&\n      !ev.composedPath().includes(this.tooltipRef)\n    ) {\n      this.hideTooltip()\n    }\n  }\n\n  // Mobile Safari in some cases does not react to click events on elements\n  // which are not interactive. But it does to touch events.\n  // TODO: maybe this should listen only, if the tooltip was opened by click.\n  @Listen('touchend', {\n    target: 'window',\n    passive: true,\n  })\n  handleTouchOutside(ev) {\n    this.handleClickOutside(ev)\n  }\n\n  @Listen('ldclosetooltip', {\n    target: 'window',\n    passive: true,\n  })\n  handleCloseTooltip(ev) {\n    if (ev.composedPath().includes(this.tooltipRef)) {\n      this.hideTooltip()\n    }\n  }\n\n  private handleSlotChange = () => {\n    this.tooltipRef.childNodes.forEach((node) => {\n      if (\n        isElement(node) &&\n        node.classList.contains('ld-tether-element-marker')\n      ) {\n        return\n      }\n\n      node.remove()\n    })\n    this.syncContent()\n  }\n\n  private initObserver = () => {\n    this.observer = new MutationObserver(this.handleSlotChange)\n    this.observer.observe(this.el, {\n      subtree: true,\n      childList: true,\n      attributes: true,\n    })\n  }\n\n  private findFirstSlottedTrigger = () => {\n    let triggerInSlot = this.el.querySelector('[slot=\"trigger\"]')\n\n    while (triggerInSlot && isSlot(triggerInSlot)) {\n      triggerInSlot = triggerInSlot.assignedElements()[0]\n    }\n\n    return triggerInSlot as HTMLElement\n  }\n\n  componentWillLoad() {\n    const triggerInSlot = this.findFirstSlottedTrigger()\n    this.hasDefaultTrigger = !triggerInSlot\n\n    if (\n      triggerInSlot &&\n      (triggerInSlot.matches(focusableSelector) ||\n        isInnerFocusable(triggerInSlot))\n    ) {\n      this.triggerTabIndex = -1\n    }\n\n    this.el.addEventListener('focus', this.handleShowTrigger, true)\n    this.el.addEventListener('blur', this.handleHideTrigger, true)\n  }\n\n  componentDidLoad() {\n    setTimeout(() => {\n      this.syncContent()\n      this.initObserver()\n    })\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.observer) this.observer.disconnect()\n    /* istanbul ignore if */\n    if (this.popper) this.popper.destroy()\n    /* istanbul ignore if */\n    if (this.tooltipRef) this.tooltipRef.remove()\n  }\n\n  render() {\n    const TriggerTag = this.tag\n\n    return (\n      <Host>\n        <TriggerTag\n          aria-describedby={\n            this.preventScreenreader ? undefined : this.idDescriber\n          }\n          class={getClassNames([\n            'ld-tooltip__trigger',\n            this.triggerType === 'click' && 'ld-tooltip__trigger--clickable',\n          ])}\n          onClick={this.handleToggleTrigger}\n          onMouseEnter={this.handleShowTrigger}\n          onMouseLeave={this.handleHideTrigger}\n          part=\"trigger focusable\"\n          ref={(element) => {\n            this.triggerRef = element\n          }}\n          tabIndex={this.triggerTabIndex}\n          type=\"button\"\n        >\n          <ld-sr-only>Info</ld-sr-only>\n          <slot name=\"trigger\">\n            <svg\n              class=\"ld-tooltip__icon\"\n              fill=\"none\"\n              part=\"icon\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                clip-rule=\"evenodd\"\n                d=\"M12 23C18.0751 23 23 18.0751 23 12C23 5.9249 18.0751 1 12 1C5.9249 1 1 5.9249 1 12C1 18.0751 5.9249 23 12 23Z\"\n                fill-rule=\"evenodd\"\n                fill=\"currentColor\"\n              />\n              <path\n                clip-rule=\"evenodd\"\n                d=\"M11.9996 8.6477C12.9254 8.6477 13.6758 7.8973 13.6758 6.9715C13.6758 6.0458 12.9254 5.2953 11.9996 5.2953C11.0739 5.2953 10.3235 6.0458 10.3235 6.9715C10.3235 7.8973 11.0739 8.6477 11.9996 8.6477ZM10.8453 17.8038C11.1932 18.1517 11.6736 18.3256 12.2865 18.3256H13.4545C13.6864 18.3256 13.8023 18.2263 13.8023 18.0275V12.2873C13.8023 11.6744 13.6284 11.1939 13.2805 10.8461C12.9326 10.4982 12.4522 10.3242 11.8393 10.3242H10.6713C10.4394 10.3242 10.3235 10.4236 10.3235 10.6224V16.3626C10.3235 16.9755 10.4974 17.456 10.8453 17.8038Z\"\n                fill-rule=\"evenodd\"\n                // TODO: replace color with icon-specific custom property and use ld-icon\n                fill=\"var(--ld-col-wht)\"\n              />\n            </svg>\n          </slot>\n        </TriggerTag>\n        <span\n          class=\"ld-tooltip__content\"\n          part=\"content\"\n          ref={(element: HTMLSpanElement) => (this.contentRef = element)}\n        >\n          <slot />\n        </span>\n        <ld-tooltip-popper\n          aria-hidden={this.visible ? undefined : 'true'}\n          arrow={this.arrow}\n          hasDefaultTrigger={this.hasDefaultTrigger}\n          id={this.preventScreenreader ? undefined : this.idDescriber}\n          unstyled={this.unstyled}\n          part=\"popper\"\n          ref={(element: HTMLElement) => {\n            this.tooltipRef = element\n          }}\n          size={this.size}\n          triggerType={this.triggerType}\n        />\n      </Host>\n    )\n  }\n}\n","@keyframes ld-tooltip-show {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes ld-tooltip-hide {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ld-tooltip {\n  :host(&) {\n    /* TODO: move to global vars? */\n    --ld-zi-max: 2147483647; /* max z-index */\n\n    --ld-tooltip-animation-duration: 0s;\n    --ld-tooltip-distance-from-trigger: var(--ld-sp-8);\n    --ld-tooltip-max-width: 20rem;\n    /* calculation does not work, if 0 is used instead of 0px */\n    --ld-tooltip-offset-x: 0px;\n    --ld-tooltip-offset-y: 0px;\n\n    --ld-tooltip-padding: var(--ld-sp-16);\n    --ld-tooltip-sm-padding: var(--ld-sp-6) var(--ld-sp-8);\n\n    /* colors */\n    --tooltip-col: var(--ld-col-neutral-900);\n    --tooltip-bg-col: var(--ld-col-wht);\n\n    animation: ld-tooltip-hide 0s ease var(--ld-tooltip-animation-duration);\n    animation-fill-mode: forwards;\n    margin-left: var(--ld-tooltip-offset-x);\n    margin-top: var(--ld-tooltip-offset-y);\n    max-width: var(--ld-tooltip-max-width);\n    opacity: 0;\n    pointer-events: none;\n    position: relative;\n    transition: opacity var(--ld-tooltip-animation-duration) ease-in;\n    z-index: var(--ld-zi-max);\n  }\n\n  &:not(.ld-tooltip--unstyled) {\n    :host(&) {\n      background-color: var(--tooltip-bg-col);\n      border-radius: var(--ld-br-m);\n      color: var(--tooltip-col);\n      filter: var(--ld-drop-shadow-hover);\n      padding: var(--ld-tooltip-padding);\n    }\n  }\n\n  &--initialized {\n    :host(&) {\n      @media (prefers-reduced-motion: no-preference) {\n        --ld-tooltip-animation-duration: var(--ld-transition-duration-normal);\n      }\n    }\n  }\n\n  &--sm {\n    :host(&) {\n      --ld-tooltip-padding: var(--ld-tooltip-sm-padding);\n    }\n  }\n\n  &--with-arrow {\n    :host(&) {\n      --ld-tooltip-arrow-size: 0.5rem;\n      --ld-tooltip-arrow-offset: var(--ld-sp-16);\n      --ld-tooltip-distance-from-trigger: calc(\n        var(--ld-tooltip-arrow-size) + var(--ld-sp-8)\n      );\n    }\n  }\n\n  &--interactive {\n    :host(&) {\n      pointer-events: auto;\n    }\n  }\n\n  &.ld-tether-enabled {\n    :host(&) {\n      animation: ld-tooltip-show var(--ld-tooltip-animation-duration) ease-out;\n      opacity: 1;\n    }\n  }\n\n  &.ld-tether-element-attached-bottom {\n    :host(&) {\n      .ld-tooltip__arrow {\n        bottom: var(--ld-tooltip-arrow-offset);\n      }\n    }\n\n    &.ld-tether-target-attached-top {\n      :host(&) {\n        margin-top: calc(\n          var(--ld-tooltip-distance-from-trigger) * -1 -\n            var(--ld-tooltip-offset-y)\n        );\n\n        .ld-tooltip__arrow {\n          border-top-color: var(--tooltip-bg-col);\n          top: 100%;\n        }\n      }\n    }\n  }\n\n  &.ld-tether-element-attached-center {\n    :host(&) {\n      .ld-tooltip__arrow {\n        left: calc(50% - var(--ld-tooltip-arrow-size));\n      }\n    }\n  }\n\n  &.ld-tether-element-attached-left.ld-tether-target-attached-right {\n    :host(&) {\n      margin-left: calc(\n        var(--ld-tooltip-offset-x) + var(--ld-tooltip-distance-from-trigger)\n      );\n\n      .ld-tooltip__arrow {\n        border-right-color: var(--tooltip-bg-col);\n        right: 100%;\n      }\n    }\n  }\n\n  &.ld-tether-element-attached-middle {\n    :host(&) {\n      .ld-tooltip__arrow {\n        top: calc(50% - var(--ld-tooltip-arrow-size));\n      }\n    }\n  }\n\n  &.ld-tether-element-attached-right {\n    :host(&) {\n      .ld-tooltip__arrow {\n        right: var(--ld-tooltip-arrow-offset);\n      }\n    }\n\n    &.ld-tether-target-attached-left {\n      :host(&) {\n        margin-left: calc(\n          var(--ld-tooltip-distance-from-trigger) * -1 -\n            var(--ld-tooltip-offset-x)\n        );\n\n        .ld-tooltip__arrow {\n          border-left-color: var(--tooltip-bg-col);\n          left: 100%;\n        }\n      }\n    }\n  }\n\n  &.ld-tether-element-attached-top.ld-tether-target-attached-bottom {\n    :host(&) {\n      margin-top: calc(\n        var(--ld-tooltip-distance-from-trigger) + var(--ld-tooltip-offset-y)\n      );\n      .ld-tooltip__arrow {\n        border-bottom-color: var(--tooltip-bg-col);\n        bottom: 100%;\n      }\n    }\n  }\n}\n\n.ld-tooltip--with-default-trigger:where(.ld-tooltip--with-arrow) {\n  &:where(.ld-tether-element-attached-top.ld-tether-target-attached-bottom),\n  &:where(.ld-tether-element-attached-bottom.ld-tether-target-attached-top) {\n    &:where(.ld-tether-element-attached-right) {\n      :host(&) {\n        --ld-tooltip-offset-x: 1rem;\n      }\n    }\n\n    &:where(.ld-tether-element-attached-left) {\n      :host(&) {\n        --ld-tooltip-offset-x: -1rem;\n      }\n    }\n  }\n\n  &:where(.ld-tether-element-attached-right.ld-tether-target-attached-left),\n  &:where(.ld-tether-element-attached-left.ld-tether-target-attached-right) {\n    &:where(.ld-tether-element-attached-bottom) {\n      :host(&) {\n        --ld-tooltip-offset-y: 1rem;\n      }\n    }\n\n    &:where(.ld-tether-element-attached-top) {\n      :host(&) {\n        --ld-tooltip-offset-y: -1rem;\n      }\n    }\n  }\n}\n\n.ld-tooltip__arrow {\n  border: var(--ld-tooltip-arrow-size) solid transparent;\n  position: absolute;\n}\n","import { Component, Element, h, Host, Prop, State } from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\n\n/** @internal **/\n@Component({\n  tag: 'ld-tooltip-popper',\n  styleUrl: 'ld-tooltip-popper.shadow.css',\n  shadow: true,\n})\nexport class LdTooltipPopper {\n  @Element() element: HTMLElement\n\n  @State() initialized = false\n\n  /** Show arrow */\n  @Prop() arrow?: boolean\n\n  /** The tooltip size (effects tooltip padding only) */\n  @Prop() size?: 'sm'\n\n  /** Event type that triggers the tooltip */\n  @Prop() triggerType?: 'click' | 'hover' = 'hover'\n\n  /** Render the tooltip without visual styling. */\n  @Prop() unstyled? = false\n\n  /** Whether the tooltip has a custom trigger or not */\n  @Prop() hasDefaultTrigger?: boolean\n\n  componentDidLoad() {\n    setTimeout(() => {\n      this.initialized = true\n    })\n  }\n\n  render() {\n    return (\n      <Host\n        class={getClassNames([\n          'ld-tooltip',\n          this.arrow && 'ld-tooltip--with-arrow',\n          this.hasDefaultTrigger && 'ld-tooltip--with-default-trigger',\n          this.initialized && 'ld-tooltip--initialized',\n          this.size && `ld-tooltip--${this.size}`,\n          this.triggerType === 'click' && 'ld-tooltip--interactive',\n          this.unstyled && 'ld-tooltip--unstyled',\n        ])}\n        role=\"tooltip\"\n      >\n        {this.arrow && <span class=\"ld-tooltip__arrow\" />}\n        <slot />\n      </Host>\n    )\n  }\n}\n"],"mappings":"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"}