{"version":3,"names":["ldCheckboxCss","LdCheckbox","this","handleChange","ev","el","dispatchEvent","InputEvent","ldchange","emit","checked","handleClick","disabled","getAttribute","preventDefault","isTrusted","bubbles","composed","handleInput","ldinput","async","input","undefined","focus","updateIndeterminate","indeterminate","updateHiddenInput","outerForm","closest","hiddenInput","name","form","createHiddenInput","remove","value","removeAttribute","setAttribute","document","createElement","type","style","visibility","position","pointerEvents","appendChild","componentWillLoad","attributesObserver","cloneAttributes","call","registerAutofocus","autofocus","disconnectedCallback","_a","disconnect","render","cl","mode","tone","invalid","h","Host","part","class","getClassNames","onClick","Object","assign","clonedAttributes","onChange","onInput","ref","tabIndex","ldTabindex","width","height","fill","viewBox","d","stroke"],"sources":["../src/liquid/components/ld-checkbox/ld-checkbox.css?tag=ld-checkbox&encapsulation=shadow","../src/liquid/components/ld-checkbox/ld-checkbox.tsx"],"sourcesContent":[":host,\n.ld-checkbox {\n  /* layout */\n  --ld-checkbox-size: 1.25rem;\n\n  /* colors */\n  --ld-checkbox-bg-col: var(--ld-col-wht);\n  --ld-checkbox-bg-col-hover: var(--ld-col-neutral-010);\n  --ld-checkbox-bg-col-active: var(--ld-col-neutral-050);\n  --ld-checkbox-disabled-col: var(--ld-col-neutral-300);\n  --ld-checkbox-disabled-bg-col: var(--ld-col-neutral-100);\n  --ld-checkbox-dark-bg-col: var(--ld-col-neutral-050);\n  --ld-checkbox-dark-bg-col-hover: var(--ld-col-neutral-100);\n  --ld-checkbox-dark-bg-col-active: var(--ld-col-neutral-300);\n  --ld-checkbox-checked-col: var(--ld-col-wht);\n  --ld-checkbox-checked-col-active: var(--ld-col-wht);\n\n  /* themable colors */\n  --ld-checkbox-col: var(--ld-thm-primary);\n  --ld-checkbox-col-hover: var(--ld-thm-primary-hover);\n  --ld-checkbox-col-active: var(--ld-thm-primary-active);\n  --ld-checkbox-col-focus: var(--ld-thm-primary-focus);\n  --ld-checkbox-invalid-col: var(--ld-thm-error);\n  --ld-checkbox-invalid-col-hover: var(--ld-thm-error-hover);\n  --ld-checkbox-invalid-col-focus: var(--ld-thm-error-focus);\n  --ld-checkbox-invalid-col-active: var(--ld-thm-error-active);\n  --ld-checkbox-warn-col: var(--ld-thm-warning);\n  --ld-checkbox-warn-col-hover: var(--ld-thm-warning-hover);\n  --ld-checkbox-warn-col-focus: var(--ld-thm-warning-focus);\n  --ld-checkbox-warn-col-active: var(--ld-thm-warning-active);\n  --ld-checkbox-warn-checked-col: var(--ld-thm-warning-active);\n  --ld-checkbox-warn-checked-col-active: var(--ld-thm-warning-hover);\n\n  position: relative;\n  display: inline-flex;\n  flex-shrink: 0;\n  width: var(--ld-checkbox-size);\n  height: var(--ld-checkbox-size);\n  min-width: auto !important;\n  box-sizing: border-box;\n\n  input {\n    appearance: none;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n\n    &:checked {\n      ~ .ld-checkbox__check {\n        visibility: inherit;\n      }\n    }\n\n    &:indeterminate {\n      ~ .ld-checkbox__box::before {\n        content: '';\n        position: absolute;\n        width: 50%;\n        height: var(--ld-sp-2);\n        border-radius: var(--ld-sp-2);\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        box-shadow: inherit;\n        z-index: 1;\n      }\n    }\n\n    &:where(:disabled),\n    &:where([aria-disabled='true']) {\n      ~ .ld-checkbox__check {\n        color: var(--ld-checkbox-disabled-col);\n      }\n      ~ .ld-checkbox__box {\n        background-color: transparent;\n        box-shadow: inset 0 0 0 var(--ld-sp-2)\n          var(--ld-checkbox-disabled-bg-col);\n      }\n\n      &:checked {\n        ~ .ld-checkbox__box {\n          background-color: var(--ld-checkbox-disabled-bg-col);\n        }\n      }\n    }\n\n    &:where(:not(:disabled, [aria-disabled='true'])) {\n      cursor: pointer;\n\n      ~ .ld-checkbox__check {\n        color: var(--ld-checkbox-col-active);\n      }\n      ~ .ld-checkbox__box {\n        box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-checkbox-col);\n      }\n\n      &:focus:focus-visible {\n        ~ .ld-checkbox__box {\n          background-color: transparent;\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-checkbox-col-focus);\n        }\n      }\n      &:active,\n      &:active:focus-visible {\n        ~ .ld-checkbox__box {\n          background-color: var(--ld-checkbox-bg-col-active);\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-checkbox-col-active);\n        }\n      }\n\n      &:checked {\n        ~ .ld-checkbox__check {\n          color: var(--ld-checkbox-checked-col);\n        }\n        ~ .ld-checkbox__box {\n          background-color: var(--ld-checkbox-col);\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-checkbox-col);\n        }\n\n        &:focus:focus-visible {\n          ~ .ld-checkbox__check {\n            color: var(--ld-checkbox-col-active);\n          }\n          ~ .ld-checkbox__box {\n            background-color: var(--ld-checkbox-col-focus);\n            box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-checkbox-col-focus);\n          }\n        }\n        &:active,\n        &:active:focus-visible {\n          ~ .ld-checkbox__check {\n            color: var(--ld-checkbox-checked-col-active);\n          }\n          ~ .ld-checkbox__box {\n            background-color: var(--ld-checkbox-col-active);\n            box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-checkbox-col-active);\n          }\n        }\n      }\n    }\n  }\n\n  :where(input:not(:disabled, input[aria-disabled='true'])) {\n    ~ .ld-checkbox__box {\n      background-color: var(--ld-checkbox-bg-col);\n    }\n\n    @media (hover: hover) {\n      &:hover {\n        ~ .ld-checkbox__box {\n          background-color: var(--ld-checkbox-bg-col-hover);\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-checkbox-col-hover);\n        }\n\n        &:checked {\n          ~ .ld-checkbox__check {\n            color: var(--ld-checkbox-checked-col);\n          }\n          ~ .ld-checkbox__box {\n            background-color: var(--ld-checkbox-col-hover);\n            box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-checkbox-col-hover);\n          }\n        }\n      }\n    }\n  }\n}\n\n.ld-checkbox.ld-checkbox--dark,\n:host(.ld-checkbox.ld-checkbox--dark) {\n  :where(input) {\n    &:not(:disabled, input[aria-disabled='true'], :checked) {\n      ~ .ld-checkbox__box {\n        background-color: var(--ld-checkbox-dark-bg-col);\n      }\n\n      @media (hover: hover) {\n        &:hover {\n          ~ .ld-checkbox__box {\n            background-color: var(--ld-checkbox-dark-bg-col-hover);\n          }\n        }\n      }\n\n      &:active,\n      &:active:focus-visible {\n        ~ .ld-checkbox__box {\n          background-color: var(--ld-checkbox-dark-bg-col-active);\n        }\n      }\n    }\n  }\n}\n\n.ld-checkbox__check {\n  visibility: hidden;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  z-index: 1;\n}\n\n.ld-checkbox__box {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n\n:host,\n.ld-checkbox,\n.ld-checkbox__box {\n  border-radius: var(--ld-br-m);\n}\n\n:host(.ld-checkbox--highlight),\n.ld-checkbox--highlight {\n  --ld-checkbox-col: var(--ld-checkbox-warn-col);\n  --ld-checkbox-col-hover: var(--ld-checkbox-warn-col-hover);\n  --ld-checkbox-col-focus: var(--ld-checkbox-warn-col-focus);\n  --ld-checkbox-col-active: var(--ld-checkbox-warn-col-active);\n  --ld-checkbox-checked-col: var(--ld-checkbox-warn-checked-col);\n  --ld-checkbox-checked-col-active: var(--ld-checkbox-warn-checked-col-active);\n}\n\n:host(.ld-checkbox--invalid),\n:host(.ld-checkbox--danger),\n.ld-checkbox--invalid,\n.ld-checkbox--danger {\n  --ld-checkbox-col: var(--ld-checkbox-invalid-col);\n  --ld-checkbox-col-hover: var(--ld-checkbox-invalid-col-hover);\n  --ld-checkbox-col-active: var(--ld-checkbox-invalid-col-active);\n  --ld-checkbox-col-focus: var(--ld-checkbox-invalid-col-focus);\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { cloneAttributes } from '../../utils/cloneAttributes'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { registerAutofocus } from '../../utils/focus'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part input - Actual input element\n */\n@Component({\n  tag: 'ld-checkbox',\n  styleUrl: 'ld-checkbox.css',\n  shadow: true,\n})\nexport class LdCheckbox implements InnerFocusable, ClonesAttributes {\n  @Element() el: HTMLInputElement\n\n  private attributesObserver: MutationObserver\n\n  private input: HTMLInputElement\n  private hiddenInput: HTMLInputElement\n\n  /** Automatically focus the form control when the page is loaded. */\n  @Prop({ reflect: true }) autofocus: boolean\n\n  /** Indicates whether the checkbox is checked. */\n  @Prop({ mutable: true }) checked? = false\n\n  /** Disabled state of the checkbox. */\n  @Prop() disabled?: boolean\n\n  /** Associates the control with a form element. */\n  @Prop() form?: string\n\n  /**\n   * Set this property to `true` to indicate that the checkbox's value is neither true nor false.\n   * The prop is removed automatically as soon as the checkbox is clicked (if not disabled).\n   */\n  @Prop({ mutable: true }) indeterminate?: boolean\n\n  /** Set this property to `true` in order to mark the checkbox visually as invalid. */\n  @Prop() invalid?: boolean\n\n  /** Tab index of the input. */\n  @Prop() ldTabindex?: number\n\n  /** Display mode. */\n  @Prop() mode?: 'highlight' | 'danger'\n\n  /** Used to specify the name of the control. */\n  @Prop() name?: string\n\n  /** The value is not editable. */\n  @Prop() readonly?: boolean\n\n  /** Set this property to `true` in order to mark the checkbox as required. */\n  @Prop() required?: boolean\n\n  /** Checkbox tone. Use `'dark'` on white backgrounds. Default is a light tone. */\n  @Prop() tone?: 'dark'\n\n  /** The input value. */\n  @Prop() value?: string\n\n  @State() clonedAttributes\n\n  /** Emitted when the input value changed and the element loses focus. */\n  @Event() ldchange: EventEmitter<boolean>\n\n  /** Emitted when the input value changed. */\n  @Event() ldinput: EventEmitter<boolean>\n\n  /** Sets focus on the checkbox. */\n  @Method()\n  async focusInner() {\n    if (this.input !== undefined) {\n      this.input.focus()\n    }\n  }\n\n  @Watch('checked')\n  updateIndeterminate() {\n    this.indeterminate = undefined\n  }\n\n  @Watch('checked')\n  @Watch('form')\n  @Watch('name')\n  @Watch('value')\n  updateHiddenInput() {\n    const outerForm = this.el.closest('form')\n    if (!this.hiddenInput && this.name && (outerForm || this.form)) {\n      this.createHiddenInput()\n    }\n\n    if (this.hiddenInput) {\n      if (!this.name) {\n        this.hiddenInput.remove()\n        this.hiddenInput = undefined\n        return\n      }\n\n      this.hiddenInput.name = this.name\n      this.hiddenInput.checked = this.checked\n\n      if (this.value) {\n        this.hiddenInput.value = this.value\n      } else {\n        this.hiddenInput.removeAttribute('value')\n      }\n\n      if (this.form) {\n        this.hiddenInput.setAttribute('form', this.form)\n      } else if (this.hiddenInput.getAttribute('form')) {\n        if (outerForm) {\n          this.hiddenInput.removeAttribute('form')\n        } else {\n          this.hiddenInput.remove()\n          this.hiddenInput = undefined\n        }\n      }\n    }\n  }\n\n  private createHiddenInput() {\n    this.hiddenInput = document.createElement('input')\n    this.hiddenInput.type = 'checkbox'\n    this.hiddenInput.style.visibility = 'hidden'\n    this.hiddenInput.style.position = 'absolute'\n    this.hiddenInput.style.pointerEvents = 'none'\n    this.el.appendChild(this.hiddenInput)\n  }\n\n  private handleChange = (ev: InputEvent) => {\n    this.el.dispatchEvent(new InputEvent('change', ev))\n    this.ldchange.emit(this.checked)\n  }\n\n  private handleClick = (ev: MouseEvent) => {\n    if (this.disabled || this.el.getAttribute('aria-disabled') === 'true') {\n      ev.preventDefault()\n      return\n    }\n\n    this.checked = !this.checked\n\n    if (!ev.isTrusted) {\n      // This happens, when a click event is dispatched on the host element\n      // from the outside i.e. on click on a parent ld-label element.\n      this.el.dispatchEvent(\n        new InputEvent('input', { bubbles: true, composed: true })\n      )\n      this.handleInput()\n      this.el.dispatchEvent(new InputEvent('change', { bubbles: true }))\n      this.ldchange.emit(this.checked)\n    }\n  }\n\n  private handleInput = () => {\n    this.ldinput.emit(this.checked)\n  }\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, ['tone', 'mode'])\n\n    const outerForm = this.el.closest('form')\n\n    if (this.name && (outerForm || this.form)) {\n      this.createHiddenInput()\n      this.hiddenInput.checked = this.checked\n      this.hiddenInput.name = this.name\n\n      if (this.form) {\n        this.hiddenInput.setAttribute('form', this.form)\n      }\n\n      if (this.value) {\n        this.hiddenInput.value = this.value\n      }\n    }\n\n    registerAutofocus(this.autofocus)\n  }\n\n  disconnectedCallback() {\n    this.attributesObserver?.disconnect()\n  }\n\n  render() {\n    const cl = [\n      'ld-checkbox',\n      this.mode && `ld-checkbox--${this.mode}`,\n      this.tone && `ld-checkbox--${this.tone}`,\n      this.invalid && 'ld-checkbox--invalid',\n    ]\n\n    return (\n      <Host part=\"root\" class={getClassNames(cl)} onClick={this.handleClick}>\n        <input\n          type=\"checkbox\"\n          {...this.clonedAttributes}\n          checked={this.checked}\n          disabled={this.disabled}\n          indeterminate={this.indeterminate}\n          onChange={this.handleChange}\n          onInput={this.handleInput}\n          part=\"input focusable\"\n          ref={(ref) => (this.input = ref)}\n          tabIndex={this.ldTabindex}\n          value={this.value}\n        />\n        {/* custom icon check */}\n        <svg\n          class=\"ld-checkbox__check\"\n          part=\"check\"\n          width=\"14\"\n          height=\"14\"\n          fill=\"none\"\n          viewBox=\"0 0 14 14\"\n        >\n          <path\n            d=\"M12 4L5.40795 10L2 6.63964\"\n            stroke=\"currentColor\"\n            stroke-width=\"3\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          />\n        </svg>\n        <div class=\"ld-checkbox__box\" part=\"box\"></div>\n      </Host>\n    )\n  }\n}\n"],"mappings":"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"}