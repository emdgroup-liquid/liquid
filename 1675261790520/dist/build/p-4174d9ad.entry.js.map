{"version":3,"names":["ldTableRowShadowCss","LdTableRow","this","handleSelect","selected","indeterminate","closest","el","ldTableSelectAll","emit","rowIndex","Array","from","parentNode","children","indexOf","ldTableSelect","onSelectInput","ev","target","checked","componentWillLoad","render","h","class","part","selectable","getClassNames","selectionSticky","selectionDisabled","undefined","selectionLabel","onInput"],"sources":["./src/liquid/components/ld-table/ld-table-row/ld-table-row.shadow.css?tag=ld-table-row&encapsulation=shadow","./src/liquid/components/ld-table/ld-table-row/ld-table-row.tsx"],"sourcesContent":[":host {\n  display: contents;\n}\n\ntr {\n  background-color: inherit;\n  outline: var(--ld-table-row-outline-half);\n}\n\n.ld-table__selection-wrapper {\n  vertical-align: middle;\n  align-items: center;\n  background-color: var(--ld-table-bg-col);\n  display: flex;\n  justify-content: center;\n  padding-inline: var(--ld-table-cell-padding-x);\n  position: absolute;\n  top: var(--ld-sp-6);\n  bottom: var(--ld-sp-6);\n  left: 0;\n  border-right: 1px solid var(--ld-table-border-col);\n}\n\n.ld-table-row__selection-cell {\n  &::part(cell) {\n    min-width: 1.25rem;\n    position: relative;\n    z-index: 1;\n  }\n}\n\n.ld-table-row__selection-cell--sticky {\n  &::part(cell) {\n    left: 0;\n    position: sticky;\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Prop } from '@stencil/core'\nimport { closest } from '../../../utils/closest'\nimport { getClassNames } from '../../../utils/getClassNames'\n\n/**\n * @part checkbox - the selection checkbox\n * @part row - the actual tr element\n * @part select - the selection cell\n * @part selection-wrapper - the selection wrapper element\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-table-row',\n  styleUrl: 'ld-table-row.shadow.css',\n  shadow: true,\n})\nexport class LdTableRow {\n  @Element() el: HTMLLdTableRowElement\n\n  /** Makes the row selectable by adding a checkbox to the start of the row. */\n  @Prop() selectable?: boolean\n\n  /** In selectable mode the checkbox is sticky by default. */\n  @Prop() selectionSticky = true\n\n  /** Makes the row selectable by adding a checkbox to the start of the row. */\n  @Prop() selectionLabel = 'Row selection'\n\n  /** Indicates that the row is selected. */\n  @Prop({ mutable: true }) selected?: boolean\n\n  /** Indicates that the selection state is indeterminate. */\n  @Prop({ mutable: true }) indeterminate?: boolean\n\n  /** Indicates that the row selection is disabled. */\n  @Prop() selectionDisabled?: boolean\n\n  /** Emitted with selected state. */\n  @Event() ldTableSelectAll: EventEmitter<{\n    selected: boolean\n  }>\n\n  /** Emitted with row index and selected state. */\n  @Event() ldTableSelect: EventEmitter<{\n    rowIndex: number\n    selected: boolean\n  }>\n\n  handleSelect = (selected: boolean) => {\n    this.indeterminate = false\n    if (closest('ld-table-head', this.el)) {\n      this.ldTableSelectAll.emit({\n        selected,\n      })\n    } else {\n      const rowIndex = Array.from(this.el.parentNode.children).indexOf(this.el)\n      this.ldTableSelect.emit({\n        rowIndex,\n        selected,\n      })\n    }\n  }\n\n  onSelectInput = (ev: InputEvent) => {\n    this.selected = (ev.target as HTMLInputElement).checked\n    this.handleSelect(this.selected)\n  }\n\n  componentWillLoad() {\n    if (this.selected) {\n      this.handleSelect(this.selected)\n    }\n  }\n\n  render() {\n    return (\n      <tr class=\"ld-table-row\" part=\"row\">\n        {this.selectable && (\n          <ld-table-cell\n            class={getClassNames([\n              'ld-table-row__selection-cell',\n              this.selectionSticky && 'ld-table-row__selection-cell--sticky',\n            ])}\n            part=\"cell select\"\n          >\n            <div class=\"ld-table__selection-wrapper\" part=\"selection-wrapper\">\n              <ld-checkbox\n                aria-disabled={this.selectionDisabled ? 'true' : undefined}\n                aria-label={this.selectionLabel}\n                checked={this.selected}\n                indeterminate={this.indeterminate}\n                onInput={this.onSelectInput}\n                part=\"checkbox\"\n              />\n            </div>\n          </ld-table-cell>\n        )}\n        <slot />\n      </tr>\n    )\n  }\n}\n"],"mappings":"iIAAA,MAAMA,EAAsB,+lB,MCiBfC,EAAU,M,yHAgCrBC,KAAAC,aAAgBC,IACdF,KAAKG,cAAgB,MACrB,GAAIC,EAAQ,gBAAiBJ,KAAKK,IAAK,CACrCL,KAAKM,iBAAiBC,KAAK,CACzBL,Y,KAEG,CACL,MAAMM,EAAWC,MAAMC,KAAKV,KAAKK,GAAGM,WAAWC,UAAUC,QAAQb,KAAKK,IACtEL,KAAKc,cAAcP,KAAK,CACtBC,WACAN,Y,GAKNF,KAAAe,cAAiBC,IACfhB,KAAKE,SAAYc,EAAGC,OAA4BC,QAChDlB,KAAKC,aAAaD,KAAKE,SAAS,E,+CA1CR,K,oBAGD,gB,sFA0CzBiB,oBACE,GAAInB,KAAKE,SAAU,CACjBF,KAAKC,aAAaD,KAAKE,S,EAI3BkB,SACE,OACEC,EAAA,MAAIC,MAAM,eAAeC,KAAK,OAC3BvB,KAAKwB,YACJH,EAAA,iBACEC,MAAOG,EAAc,CACnB,+BACAzB,KAAK0B,iBAAmB,yCAE1BH,KAAK,eAELF,EAAA,OAAKC,MAAM,8BAA8BC,KAAK,qBAC5CF,EAAA,+BACiBrB,KAAK2B,kBAAoB,OAASC,UAAS,aAC9C5B,KAAK6B,eACjBX,QAASlB,KAAKE,SACdC,cAAeH,KAAKG,cACpB2B,QAAS9B,KAAKe,cACdQ,KAAK,eAKbF,EAAA,a"}