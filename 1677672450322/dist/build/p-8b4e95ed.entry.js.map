{"version":3,"names":["ldLabelCss","LdLabel","this","handleClick","async","event","inputElement","el","querySelector","clickedInsideInputElement","target","contains","focusInner","focus","click","componentWillLoad","attributesObserver","cloneAttributes","call","disconnectedCallback","_a","disconnect","render","cl","getClassNames","alignMessage","position","size","h","Object","assign","clonedAttributes","class","onClick","part"],"sources":["../src/liquid/components/ld-label/ld-label.css?tag=ld-label&encapsulation=shadow","../src/liquid/components/ld-label/ld-label.tsx"],"sourcesContent":[":host {\n  display: inline-flex;\n\n  .ld-label {\n    width: 100%;\n  }\n}\n\n.ld-label {\n  /* layout */\n  --ld-label-column-gap: 0.625rem;\n  --ld-label-row-gap: var(--ld-sp-6);\n\n  /* colors */\n  --ld-label-col: var(--ld-col-neutral-900);\n  --ld-label-disabled-col: var(--ld-col-neutral-300);\n\n  color: var(--ld-label-col);\n  font: var(--ld-typo-label-s);\n  display: inline-grid;\n  row-gap: var(--ld-label-row-gap);\n  column-gap: 0;\n  max-width: 100%;\n  align-content: flex-start;\n}\n\n.ld-label--left,\n.ld-label--right {\n  justify-content: flex-start;\n  align-items: center;\n  column-gap: var(--ld-label-column-gap);\n  row-gap: 0;\n\n  > ::slotted(.ld-checkbox),\n  > .ld-checkbox,\n  > ::slotted(.ld-radio),\n  > .ld-radio,\n  > ::slotted(.ld-toggle),\n  > .ld-toggle,\n  > ::slotted(.ld-input),\n  > .ld-input,\n  > ::slotted(.ld-select),\n  > .ld-select {\n    grid-area: input;\n    align-self: baseline;\n  }\n\n  > ::slotted(.ld-input-message),\n  > .ld-input-message {\n    grid-area: message;\n    margin-top: var(--ld-sp-4);\n  }\n}\n\n.ld-label--align-message {\n  &.ld-label--left {\n    > ::slotted(.ld-input-message),\n    > .ld-input-message {\n      grid-column-start: 2;\n    }\n  }\n\n  &.ld-label--right {\n    > ::slotted(.ld-input-message),\n    > .ld-input-message {\n      grid-column-end: 2;\n    }\n  }\n}\n\n.ld-label--left {\n  grid-template-columns: 1fr auto;\n  grid-template-areas:\n    'label input'\n    'message message';\n}\n\n.ld-label--right {\n  grid-template-columns: auto 1fr;\n  grid-template-areas:\n    'input label'\n    'message message';\n}\n\n.ld-label--m {\n  font: var(--ld-typo-label-m);\n  line-height: 1;\n}\n","import { Component, Element, h, Prop, State } from '@stencil/core'\nimport { cloneAttributes } from '../../utils/cloneAttributes'\nimport { getClassNames } from '../../utils/getClassNames'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part tag - Actual label element\n */\n@Component({\n  tag: 'ld-label',\n  styleUrl: 'ld-label.css',\n  shadow: true,\n})\nexport class LdLabel implements ClonesAttributes {\n  @Element() el: HTMLLabelElement\n\n  private attributesObserver: MutationObserver\n\n  /** Align input message with input position. */\n  @Prop() alignMessage?: boolean\n\n  /** Relative position to labeled element. Default is top. */\n  @Prop() position?: 'left' | 'right'\n\n  /** Size of the label. Default is small. */\n  @Prop() size?: 'm'\n\n  @State() clonedAttributes\n\n  private handleClick = async (event: MouseEvent) => {\n    const inputElement: HTMLElement = this.el.querySelector(\n      'ld-input, ld-textarea, ld-toggle, ld-select, ld-button, ld-checkbox, ld-radio, input, textarea, button, select'\n    )\n    const clickedInsideInputElement =\n      event.target === inputElement ||\n      inputElement.contains(event.target as Node)\n\n    if (\n      inputElement &&\n      !clickedInsideInputElement &&\n      !inputElement['disabled']\n    ) {\n      if ('focusInner' in inputElement) {\n        await (inputElement as unknown as InnerFocusable).focusInner()\n      } else {\n        inputElement.focus()\n      }\n\n      inputElement.click()\n    }\n  }\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, [\n      'align-message',\n      'position',\n      'size',\n    ])\n  }\n\n  disconnectedCallback() {\n    this.attributesObserver?.disconnect()\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-label',\n      this.alignMessage && 'ld-label--align-message',\n      this.position && `ld-label--${this.position}`,\n      this.size && `ld-label--${this.size}`,\n    ])\n\n    return (\n      <label\n        {...this.clonedAttributes}\n        class={cl}\n        onClick={this.handleClick}\n        part=\"tag\"\n      >\n        <slot></slot>\n      </label>\n    )\n  }\n}\n"],"mappings":"0HAAA,MAAMA,EAAa,29D,MCcNC,EAAO,M,yBAgBVC,KAAAC,YAAcC,MAAOC,IAC3B,MAAMC,EAA4BJ,KAAKK,GAAGC,cACxC,kHAEF,MAAMC,EACJJ,EAAMK,SAAWJ,GACjBA,EAAaK,SAASN,EAAMK,QAE9B,GACEJ,IACCG,IACAH,EAAa,YACd,CACA,GAAI,eAAgBA,EAAc,OACzBA,EAA2CM,Y,KAC7C,CACLN,EAAaO,O,CAGfP,EAAaQ,O,2GAIjBC,oBACEb,KAAKc,mBAAqBC,EAAgBC,KAAKhB,KAAM,CACnD,gBACA,WACA,Q,CAIJiB,uB,OACEC,EAAAlB,KAAKc,sBAAkB,MAAAI,SAAA,SAAAA,EAAEC,Y,CAG3BC,SACE,MAAMC,EAAKC,EAAc,CACvB,WACAtB,KAAKuB,cAAgB,0BACrBvB,KAAKwB,UAAY,aAAaxB,KAAKwB,WACnCxB,KAAKyB,MAAQ,aAAazB,KAAKyB,SAGjC,OACEC,EAAA,QAAAC,OAAAC,OAAA,GACM5B,KAAK6B,iBAAgB,CACzBC,MAAOT,EACPU,QAAS/B,KAAKC,YACd+B,KAAK,QAELN,EAAA,a"}