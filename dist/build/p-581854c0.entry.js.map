{"version":3,"names":["ldRadioCss","LdRadioStyle0","LdRadio","this","handleKeyDown","ev","key","preventDefault","focusAndSelect","handleChange","event","el","dispatchEvent","InputEvent","ldchange","emit","checked","handleClick","disabled","isAriaDisabled","ariaDisabled","name","Array","from","document","querySelectorAll","filter","ldRadio","getAttribute","forEach","groupChecked","isTrusted","bubbles","composed","handleInput","ldinput","focusInner","input","undefined","focus","updateHiddenInput","outerForm","closest","hiddenInput","form","createHiddenInput","remove","value","removeAttribute","setAttribute","createElement","type","style","visibility","position","pointerEvents","appendChild","dir","ldRadios","index","targetLdRadio","click","componentWillLoad","attributesObserver","cloneAttributes","call","registerAutofocus","autofocus","disconnectedCallback","disconnect","render","cl","mode","tone","invalid","h","Host","part","class","getClassNames","onClick","Object","assign","clonedAttributes","onChange","onInput","onKeyDown","ref","tabIndex","ldTabindex"],"sources":["../src/liquid/components/ld-radio/ld-radio.css?tag=ld-radio&encapsulation=shadow","../src/liquid/components/ld-radio/ld-radio.tsx"],"sourcesContent":[":host,\n.ld-radio {\n  /* layout */\n  --ld-radio-size: 1.25rem;\n  --ld-radio-dot-size: 0.625rem;\n\n  /* colors */\n  --ld-radio-bg-col: var(--ld-col-wht);\n  --ld-radio-bg-col-hover: var(--ld-col-neutral-010);\n  --ld-radio-bg-col-active: var(--ld-col-neutral-050);\n  --ld-radio-disabled-col: var(--ld-col-neutral-300);\n  --ld-radio-disabled-bg-col: var(--ld-col-neutral-100);\n  --ld-radio-dark-bg-col: var(--ld-col-neutral-050);\n  --ld-radio-dark-bg-col-hover: var(--ld-col-neutral-100);\n  --ld-radio-dark-bg-col-active: var(--ld-col-neutral-300);\n  --ld-radio-checked-col: var(--ld-col-wht);\n  --ld-radio-checked-col-active: var(--ld-col-wht);\n  --ld-radio-invalid-checked-col: var(--ld-col-wht);\n  --ld-radio-invalid-checked-col-active: var(--ld-col-wht);\n\n  /* themable colors */\n  --ld-radio-col: var(--ld-thm-primary);\n  --ld-radio-col-hover: var(--ld-thm-primary-hover);\n  --ld-radio-col-active: var(--ld-thm-primary-active);\n  --ld-radio-col-focus: var(--ld-thm-primary-focus);\n  --ld-radio-invalid-col: var(--ld-thm-error);\n  --ld-radio-invalid-col-hover: var(--ld-thm-error-hover);\n  --ld-radio-invalid-col-focus: var(--ld-thm-error-focus);\n  --ld-radio-invalid-col-active: var(--ld-thm-error-active);\n  --ld-radio-warn-col: var(--ld-thm-warning);\n  --ld-radio-warn-col-hover: var(--ld-thm-warning-hover);\n  --ld-radio-warn-col-focus: var(--ld-thm-warning-focus);\n  --ld-radio-warn-col-active: var(--ld-thm-warning-active);\n  --ld-radio-warn-checked-col: var(--ld-thm-warning-active);\n  --ld-radio-warn-checked-col-active: var(--ld-thm-warning-hover);\n\n  position: relative;\n  display: inline-flex;\n  flex-shrink: 0;\n  width: var(--ld-radio-size);\n  height: var(--ld-radio-size);\n  min-width: auto !important;\n  box-sizing: border-box;\n\n  input {\n    appearance: none;\n    background-color: transparent; /* Required for Mobile Sarari */\n    height: 100%;\n    inset: 0;\n    margin: 0;\n    position: absolute;\n    width: 100%;\n    z-index: 1;\n\n    &:checked {\n      ~ .ld-radio__dot {\n        visibility: inherit;\n      }\n    }\n\n    &:where(:disabled),\n    &:where(\n        [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n      ) {\n      ~ .ld-radio__dot {\n        background-color: var(--ld-radio-disabled-col);\n      }\n      ~ .ld-radio__box {\n        background-color: transparent;\n        box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-disabled-bg-col);\n      }\n\n      &:checked {\n        ~ .ld-radio__box {\n          background-color: var(--ld-radio-disabled-bg-col);\n        }\n      }\n    }\n\n    &:where(\n        :not(\n            :disabled,\n            [aria-disabled]:where(\n                :not([aria-disabled=''], [aria-disabled='false'])\n              )\n          )\n      ) {\n      cursor: pointer;\n\n      ~ .ld-radio__dot {\n        background-color: var(--ld-radio-col-active);\n      }\n      ~ .ld-radio__box {\n        box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col);\n      }\n\n      &:focus:focus-visible {\n        ~ .ld-radio__box {\n          background-color: transparent;\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-focus);\n        }\n      }\n      &:active,\n      &:active:focus-visible {\n        ~ .ld-radio__box {\n          background-color: var(--ld-radio-bg-col-active);\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-active);\n        }\n      }\n\n      &:checked {\n        ~ .ld-radio__dot {\n          background-color: var(--ld-radio-checked-col);\n        }\n        ~ .ld-radio__box {\n          background-color: var(--ld-radio-col);\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col);\n        }\n\n        &:focus:focus-visible {\n          ~ .ld-radio__dot {\n            background-color: var(--ld-radio-col-active);\n          }\n          ~ .ld-radio__box {\n            background-color: var(--ld-radio-col-focus);\n            box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-focus);\n          }\n        }\n        &:active,\n        &:active:focus-visible {\n          ~ .ld-radio__dot {\n            background-color: var(--ld-radio-checked-col-active);\n          }\n          ~ .ld-radio__box {\n            background-color: var(--ld-radio-col-active);\n            box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-active);\n          }\n        }\n      }\n    }\n  }\n\n  :where(\n      input:not(\n          :disabled,\n          input[aria-disabled]:where(\n              :not([aria-disabled=''], [aria-disabled='false'])\n            )\n        )\n    ) {\n    ~ .ld-radio__box {\n      background-color: var(--ld-radio-bg-col);\n    }\n\n    @media (hover: hover) {\n      &:hover {\n        ~ .ld-radio__box {\n          background-color: var(--ld-radio-bg-col-hover);\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-hover);\n        }\n\n        &:checked {\n          ~ .ld-radio__dot {\n            color: var(--ld-radio-checked-col);\n          }\n          ~ .ld-radio__box {\n            background-color: var(--ld-radio-col-hover);\n            box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-hover);\n          }\n        }\n      }\n    }\n  }\n}\n\n.ld-radio.ld-radio--dark,\n:host(.ld-radio.ld-radio--dark) {\n  :where(input) {\n    &:not(\n        :disabled,\n        input[aria-disabled]:where(\n            :not([aria-disabled=''], [aria-disabled='false'])\n          ),\n        :checked\n      ) {\n      ~ .ld-radio__box {\n        background-color: var(--ld-radio-dark-bg-col);\n      }\n\n      @media (hover: hover) {\n        &:hover {\n          ~ .ld-radio__box {\n            background-color: var(--ld-radio-dark-bg-col-hover);\n          }\n        }\n      }\n\n      &:active,\n      &:active:focus-visible {\n        ~ .ld-radio__box {\n          background-color: var(--ld-radio-dark-bg-col-active);\n        }\n      }\n    }\n  }\n}\n\n.ld-radio__dot {\n  visibility: hidden;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  z-index: 1;\n  width: var(--ld-radio-dot-size);\n  height: var(--ld-radio-dot-size);\n}\n\n.ld-radio__box {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-col-rblck4);\n}\n\n:host,\n.ld-radio,\n.ld-radio__dot,\n.ld-radio__box {\n  border-radius: var(--ld-br-full);\n}\n\n:host(.ld-radio--highlight),\n.ld-radio--highlight {\n  --ld-radio-col: var(--ld-radio-warn-col);\n  --ld-radio-col-hover: var(--ld-radio-warn-col-hover);\n  --ld-radio-col-active: var(--ld-radio-warn-col-focus);\n  --ld-radio-col-focus: var(--ld-radio-warn-col-active);\n  --ld-radio-checked-col: var(--ld-radio-warn-checked-col);\n  --ld-radio-checked-col-active: var(--ld-radio-warn-checked-col-active);\n}\n\n:host(.ld-radio--invalid),\n:host(.ld-radio--danger),\n.ld-radio--invalid,\n.ld-radio--danger {\n  --ld-radio-col: var(--ld-radio-invalid-col);\n  --ld-radio-col-hover: var(--ld-radio-invalid-col-hover);\n  --ld-radio-col-active: var(--ld-radio-invalid-col-focus);\n  --ld-radio-col-focus: var(--ld-radio-invalid-col-active);\n  --ld-radio-checked-col: var(--ld-radio-invalid-checked-col);\n  --ld-radio-checked-col-active: var(--ld-radio-invalid-checked-col-active);\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { cloneAttributes } from '../../utils/cloneAttributes'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { registerAutofocus } from '../../utils/focus'\nimport { isAriaDisabled } from '../../utils/ariaDisabled'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part input - Actual input element\n */\n@Component({\n  tag: 'ld-radio',\n  styleUrl: 'ld-radio.css',\n  shadow: true,\n})\nexport class LdRadio implements InnerFocusable, ClonesAttributes {\n  @Element() el: HTMLInputElement\n\n  private attributesObserver: MutationObserver\n\n  private input: HTMLInputElement\n  private hiddenInput: HTMLInputElement\n\n  /** Alternative disabled state that keeps element focusable */\n  @Prop() ariaDisabled: string\n\n  /** Automatically focus the form control when the page is loaded. */\n  @Prop({ reflect: true }) autofocus: boolean\n\n  /** Indicates whether the radio button is selected. */\n  @Prop({ mutable: true }) checked? = false\n\n  /** Disabled state of the radio. */\n  @Prop() disabled?: boolean\n\n  /** Associates the control with a form element. */\n  @Prop() form?: string\n\n  /**\n   * @internal\n   * States that this radio button or another radio button with the same name is checked.\n   */\n  @Prop() groupChecked? = false\n\n  /** Set this property to `true` in order to mark the radio visually as invalid. */\n  @Prop() invalid?: boolean\n\n  /** Tab index of the input. */\n  @Prop() ldTabindex?: number\n\n  /** Display mode. */\n  @Prop() mode?: 'highlight' | 'danger'\n\n  /** Used to specify the name of the control. */\n  @Prop() name!: string\n\n  /** The value is not editable. */\n  @Prop() readonly?: boolean\n\n  /** Set this property to `true` in order to mark the radio button as required. */\n  @Prop() required?: boolean\n\n  /** radio tone. Use `'dark'` on white backgrounds. Default is a light tone. */\n  @Prop() tone?: 'dark'\n\n  /** The input value. */\n  @Prop() value?: string\n\n  @State() clonedAttributes\n\n  /** Emitted when the input value changed and the element loses focus. */\n  @Event() ldchange: EventEmitter<boolean>\n\n  /** Emitted when the input value changed. */\n  @Event() ldinput: EventEmitter<boolean>\n\n  /** Sets focus on the radio button. */\n  @Method()\n  async focusInner() {\n    if (this.input !== undefined) {\n      this.input.focus()\n    }\n  }\n\n  @Watch('checked')\n  @Watch('form')\n  @Watch('name')\n  @Watch('value')\n  updateHiddenInput() {\n    const outerForm = this.el.closest('form')\n    if (!this.hiddenInput && this.name && (outerForm || this.form)) {\n      this.createHiddenInput()\n    }\n\n    if (this.hiddenInput) {\n      if (!this.name) {\n        this.hiddenInput.remove()\n        this.hiddenInput = undefined\n        return\n      }\n\n      this.hiddenInput.name = this.name\n      this.hiddenInput.checked = this.checked\n\n      if (this.value) {\n        this.hiddenInput.value = this.value\n      } else {\n        this.hiddenInput.removeAttribute('value')\n      }\n\n      if (this.form) {\n        this.hiddenInput.setAttribute('form', this.form)\n      } else if (this.hiddenInput.getAttribute('form')) {\n        if (outerForm) {\n          this.hiddenInput.removeAttribute('form')\n        } else {\n          this.hiddenInput.remove()\n          this.hiddenInput = undefined\n        }\n      }\n    }\n  }\n\n  private createHiddenInput() {\n    this.hiddenInput = document.createElement('input')\n    this.hiddenInput.type = 'radio'\n    this.hiddenInput.style.visibility = 'hidden'\n    this.hiddenInput.style.position = 'absolute'\n    this.hiddenInput.style.pointerEvents = 'none'\n    this.el.appendChild(this.hiddenInput)\n  }\n\n  private handleKeyDown = (ev: KeyboardEvent) => {\n    switch (ev.key) {\n      case 'ArrowUp':\n      case 'ArrowLeft': {\n        ev.preventDefault()\n        this.focusAndSelect('prev')\n        return\n      }\n      case 'ArrowDown':\n      case 'ArrowRight': {\n        ev.preventDefault()\n        this.focusAndSelect('next')\n        return\n      }\n    }\n  }\n\n  private handleChange = (event: InputEvent) => {\n    this.el.dispatchEvent(new InputEvent('change', event))\n    this.ldchange.emit(this.checked)\n  }\n\n  private handleClick = (ev?: MouseEvent) => {\n    if (this.disabled || isAriaDisabled(this.el.ariaDisabled)) {\n      ev?.preventDefault()\n      return\n    }\n\n    if (this.checked) return\n\n    // Uncheck radios with same name.\n    if (this.name) {\n      // Attribute selector fails in test env, hance filtering with js below.\n      Array.from(document.querySelectorAll('ld-radio'))\n        .filter((ldRadio) => ldRadio.getAttribute('name') === this.name)\n        .forEach((ldRadio) => {\n          ldRadio.checked = false\n          ldRadio.groupChecked = true\n        })\n    }\n\n    this.checked = true\n\n    if (!ev.isTrusted) {\n      // This happens, when a click event is dispatched on the host element\n      // from the outside i.e. on click on a parent ld-label element.\n      this.el.dispatchEvent(\n        new InputEvent('input', { bubbles: true, composed: true })\n      )\n      this.handleInput()\n      this.el.dispatchEvent(new InputEvent('change', { bubbles: true }))\n      this.ldchange.emit(this.checked)\n    }\n  }\n\n  private handleInput = () => {\n    this.ldinput.emit(this.checked)\n  }\n\n  private focusAndSelect(dir: 'next' | 'prev') {\n    const ldRadios = Array.from(document.querySelectorAll('ld-radio')).filter(\n      (ldRadio) => ldRadio.getAttribute('name') === this.name\n    )\n    ldRadios.forEach((ldRadio, index) => {\n      if (ldRadio === (this.el as unknown as HTMLLdRadioElement)) {\n        const targetLdRadio = ldRadios[index + (dir === 'next' ? 1 : -1)]\n        if (targetLdRadio) {\n          targetLdRadio.focusInner()\n          targetLdRadio.click()\n        }\n      }\n    })\n  }\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, ['tone', 'mode'])\n\n    const outerForm = this.el.closest('form')\n\n    if (this.name && (outerForm || this.form)) {\n      this.createHiddenInput()\n      this.hiddenInput.checked = this.checked\n      this.hiddenInput.name = this.name\n\n      if (this.form) {\n        this.hiddenInput.setAttribute('form', this.form)\n      }\n\n      if (this.value) {\n        this.hiddenInput.value = this.value\n      }\n    }\n\n    if (this.checked) {\n      Array.from(document.querySelectorAll('ld-radio'))\n        .filter((ldRadio) => ldRadio.getAttribute('name') === this.name)\n        .forEach((ldRadio) => {\n          ldRadio.groupChecked = true\n        })\n    }\n\n    registerAutofocus(this.autofocus)\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.attributesObserver) this.attributesObserver.disconnect()\n  }\n\n  render() {\n    const cl = [\n      'ld-radio',\n      this.mode && `ld-radio--${this.mode}`,\n      this.tone && `ld-radio--${this.tone}`,\n      this.invalid && 'ld-radio--invalid',\n    ]\n\n    return (\n      <Host part=\"root\" class={getClassNames(cl)} onClick={this.handleClick}>\n        <input\n          type=\"radio\"\n          {...this.clonedAttributes}\n          part=\"input focusable\"\n          onChange={this.handleChange}\n          onInput={this.handleInput}\n          onKeyDown={this.handleKeyDown}\n          ref={(ref) => (this.input = ref)}\n          disabled={this.disabled}\n          checked={this.checked}\n          tabIndex={\n            this.disabled || this.checked || !this.groupChecked\n              ? this.ldTabindex\n              : -1\n          }\n          value={this.value}\n        />\n        <div part=\"dot\" class=\"ld-radio__dot\"></div>\n        <div class=\"ld-radio__box\" part=\"box\"></div>\n      </Host>\n    )\n  }\n}\n"],"mappings":"gNAAA,MAAMA,EAAa,m0XACnB,MAAAC,EAAeD,E,MC0BFE,EAAO,M,6FAqHVC,KAAAC,cAAiBC,IACvB,OAAQA,EAAGC,KACT,IAAK,UACL,IAAK,YAAa,CAChBD,EAAGE,iBACHJ,KAAKK,eAAe,QACpB,M,CAEF,IAAK,YACL,IAAK,aAAc,CACjBH,EAAGE,iBACHJ,KAAKK,eAAe,QACpB,M,IAKEL,KAAAM,aAAgBC,IACtBP,KAAKQ,GAAGC,cAAc,IAAIC,WAAW,SAAUH,IAC/CP,KAAKW,SAASC,KAAKZ,KAAKa,QAAQ,EAG1Bb,KAAAc,YAAeZ,IACrB,GAAIF,KAAKe,UAAYC,EAAehB,KAAKQ,GAAGS,cAAe,CACzDf,IAAE,MAAFA,SAAE,SAAFA,EAAIE,iBACJ,M,CAGF,GAAIJ,KAAKa,QAAS,OAGlB,GAAIb,KAAKkB,KAAM,CAEbC,MAAMC,KAAKC,SAASC,iBAAiB,aAClCC,QAAQC,GAAYA,EAAQC,aAAa,UAAYzB,KAAKkB,OAC1DQ,SAASF,IACRA,EAAQX,QAAU,MAClBW,EAAQG,aAAe,IAAI,G,CAIjC3B,KAAKa,QAAU,KAEf,IAAKX,EAAG0B,UAAW,CAGjB5B,KAAKQ,GAAGC,cACN,IAAIC,WAAW,QAAS,CAAEmB,QAAS,KAAMC,SAAU,QAErD9B,KAAK+B,cACL/B,KAAKQ,GAAGC,cAAc,IAAIC,WAAW,SAAU,CAAEmB,QAAS,QAC1D7B,KAAKW,SAASC,KAAKZ,KAAKa,Q,GAIpBb,KAAA+B,YAAc,KACpB/B,KAAKgC,QAAQpB,KAAKZ,KAAKa,QAAQ,E,kEA9JG,M,8DAYZ,M,kNAoCxB,gBAAMoB,GACJ,GAAIjC,KAAKkC,QAAUC,UAAW,CAC5BnC,KAAKkC,MAAME,O,EAQf,iBAAAC,GACE,MAAMC,EAAYtC,KAAKQ,GAAG+B,QAAQ,QAClC,IAAKvC,KAAKwC,aAAexC,KAAKkB,OAASoB,GAAatC,KAAKyC,MAAO,CAC9DzC,KAAK0C,mB,CAGP,GAAI1C,KAAKwC,YAAa,CACpB,IAAKxC,KAAKkB,KAAM,CACdlB,KAAKwC,YAAYG,SACjB3C,KAAKwC,YAAcL,UACnB,M,CAGFnC,KAAKwC,YAAYtB,KAAOlB,KAAKkB,KAC7BlB,KAAKwC,YAAY3B,QAAUb,KAAKa,QAEhC,GAAIb,KAAK4C,MAAO,CACd5C,KAAKwC,YAAYI,MAAQ5C,KAAK4C,K,KACzB,CACL5C,KAAKwC,YAAYK,gBAAgB,Q,CAGnC,GAAI7C,KAAKyC,KAAM,CACbzC,KAAKwC,YAAYM,aAAa,OAAQ9C,KAAKyC,K,MACtC,GAAIzC,KAAKwC,YAAYf,aAAa,QAAS,CAChD,GAAIa,EAAW,CACbtC,KAAKwC,YAAYK,gBAAgB,O,KAC5B,CACL7C,KAAKwC,YAAYG,SACjB3C,KAAKwC,YAAcL,S,IAMnB,iBAAAO,GACN1C,KAAKwC,YAAcnB,SAAS0B,cAAc,SAC1C/C,KAAKwC,YAAYQ,KAAO,QACxBhD,KAAKwC,YAAYS,MAAMC,WAAa,SACpClD,KAAKwC,YAAYS,MAAME,SAAW,WAClCnD,KAAKwC,YAAYS,MAAMG,cAAgB,OACvCpD,KAAKQ,GAAG6C,YAAYrD,KAAKwC,Y,CA8DnB,cAAAnC,CAAeiD,GACrB,MAAMC,EAAWpC,MAAMC,KAAKC,SAASC,iBAAiB,aAAaC,QAChEC,GAAYA,EAAQC,aAAa,UAAYzB,KAAKkB,OAErDqC,EAAS7B,SAAQ,CAACF,EAASgC,KACzB,GAAIhC,IAAaxB,KAAKQ,GAAsC,CAC1D,MAAMiD,EAAgBF,EAASC,GAASF,IAAQ,OAAS,GAAK,IAC9D,GAAIG,EAAe,CACjBA,EAAcxB,aACdwB,EAAcC,O,MAMtB,iBAAAC,GACE3D,KAAK4D,mBAAqBC,EAAgBC,KAAK9D,KAAM,CAAC,OAAQ,SAE9D,MAAMsC,EAAYtC,KAAKQ,GAAG+B,QAAQ,QAElC,GAAIvC,KAAKkB,OAASoB,GAAatC,KAAKyC,MAAO,CACzCzC,KAAK0C,oBACL1C,KAAKwC,YAAY3B,QAAUb,KAAKa,QAChCb,KAAKwC,YAAYtB,KAAOlB,KAAKkB,KAE7B,GAAIlB,KAAKyC,KAAM,CACbzC,KAAKwC,YAAYM,aAAa,OAAQ9C,KAAKyC,K,CAG7C,GAAIzC,KAAK4C,MAAO,CACd5C,KAAKwC,YAAYI,MAAQ5C,KAAK4C,K,EAIlC,GAAI5C,KAAKa,QAAS,CAChBM,MAAMC,KAAKC,SAASC,iBAAiB,aAClCC,QAAQC,GAAYA,EAAQC,aAAa,UAAYzB,KAAKkB,OAC1DQ,SAASF,IACRA,EAAQG,aAAe,IAAI,G,CAIjCoC,EAAkB/D,KAAKgE,U,CAGzB,oBAAAC,GAEE,GAAIjE,KAAK4D,mBAAoB5D,KAAK4D,mBAAmBM,Y,CAGvD,MAAAC,GACE,MAAMC,EAAK,CACT,WACApE,KAAKqE,MAAQ,aAAarE,KAAKqE,OAC/BrE,KAAKsE,MAAQ,aAAatE,KAAKsE,OAC/BtE,KAAKuE,SAAW,qBAGlB,OACEC,EAACC,EAAI,CAAAtE,IAAA,2CAACuE,KAAK,OAAOC,MAAOC,EAAcR,GAAKS,QAAS7E,KAAKc,aACxD0D,EAAA,QAAAM,OAAAC,OAAA,CAAA5E,IAAA,2CACE6C,KAAK,SACDhD,KAAKgF,iBAAgB,CACzBN,KAAK,kBACLO,SAAUjF,KAAKM,aACf4E,QAASlF,KAAK+B,YACdoD,UAAWnF,KAAKC,cAChBmF,IAAMA,GAASpF,KAAKkC,MAAQkD,EAC5BrE,SAAUf,KAAKe,SACfF,QAASb,KAAKa,QACdwE,SACErF,KAAKe,UAAYf,KAAKa,UAAYb,KAAK2B,aACnC3B,KAAKsF,YACJ,EAEP1C,MAAO5C,KAAK4C,SAEd4B,EAAA,OAAArE,IAAA,2CAAKuE,KAAK,MAAMC,MAAM,kBACtBH,EAAA,OAAArE,IAAA,2CAAKwE,MAAM,gBAAgBD,KAAK,Q"}