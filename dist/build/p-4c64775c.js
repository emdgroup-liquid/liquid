function t(t=[]){const s=new Set(["style","id","class","slot","part",...t]),i={};for(const t in this)if(!Object.getOwnPropertyDescriptor(this,t)&&null!=this[t]){const e=t.replaceAll(/([A-Z])/g,"-$1").toLowerCase();s.has(e)||(i[e]=this[t])}const e={};for(const t of this.el.attributes)t.name in i||s.has(t.name)||(e[t.name]=t.value);const n=Object.assign(Object.assign({},i),e);this.clonedAttributes=n;const o=new MutationObserver((t=>{for(const i of t){const{attributeName:t}=i;if(!s.has(t)){const s=this.el.getAttribute(t);null==s?delete this.clonedAttributes[t]:this.clonedAttributes[t]=s}}this.clonedAttributes=Object.assign({},this.clonedAttributes)}));return o.observe(this.el,{subtree:!1,childList:!1,attributes:!0}),o}export{t as c}