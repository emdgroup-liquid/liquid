{"version":3,"names":["ldTableHeaderShadowCss","LdTableHeader","this","handleSort","sortOrder","columnIndex","Array","from","el","parentNode","children","indexOf","ldTableSort","emit","onSortClick","ev","preventDefault","stopPropagation","isAriaDisabled","closest","target","ariaDisabled","onThClick","sortable","resetSort","undefined","componentWillLoad","renderChevron","asc","h","size","part","fill","height","style","transform","viewBox","width","d","stroke","render","class","getClassNames","abbr","colSpan","colspan","headers","rowspan","scope","onClick","mode"],"sources":["../src/liquid/components/ld-table/ld-table-header/ld-table-header.shadow.css?tag=ld-table-header&encapsulation=shadow","../src/liquid/components/ld-table/ld-table-header/ld-table-header.tsx"],"sourcesContent":[":host {\n  display: contents;\n}\n\nth {\n  background-color: inherit;\n  font: inherit;\n  max-width: inherit;\n  min-width: inherit;\n  padding-block: var(--ld-table-cell-padding-y);\n  padding-inline: var(--ld-table-cell-padding-x);\n}\n\n.ld-table-header--sortable {\n  cursor: pointer;\n}\n\n.ld-table-header__sort-buttons {\n  display: inline-grid;\n  margin: -1.2rem calc(-1 * var(--ld-sp-8)) -1rem var(--ld-sp-6);\n  vertical-align: middle;\n\n  ld-button::part(button) {\n    min-height: 0;\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n} from '@stencil/core'\nimport { closest } from '../../../utils/closest'\nimport { getClassNames } from '../../../utils/getClassNames'\nimport { isAriaDisabled } from '../../../utils/ariaDisabled'\n\n/**\n * @part cell - the actual th element\n * @part sort-button-asc - ascending sort button\n * @part sort-button-desc - descending sort button\n * @part sort-buttons - container wrapping the sort buttons\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-table-header',\n  styleUrl: 'ld-table-header.shadow.css',\n  shadow: true,\n})\nexport class LdTableHeader {\n  @Element() el: HTMLLdTableHeaderElement\n\n  /**\n   * This attribute contains a short abbreviated description\n   * of the cell's content. Some user-agents, such as speech readers,\n   * may present this description before the content itself.\n   */\n  @Prop() abbr?: HTMLTableCellElement['abbr']\n\n  /** Indicates for how many columns the cell extends. */\n  @Prop() colspan?: HTMLTableCellElement['colSpan']\n\n  /**\n   * This attribute contains a list of space-separated strings,\n   * each corresponding to the id attribute of the <th> elements\n   * that apply to this element.\n   */\n  @Prop() headers?: HTMLTableCellElement['headers']\n\n  /** Indicates for how many rows the cell extends. */\n  @Prop() rowspan?: HTMLTableCellElement['rowSpan']\n\n  /** Defines the cells that the header element relates to. */\n  @Prop() scope?: HTMLTableCellElement['scope']\n\n  /** Defines whether the column is sortable. */\n  @Prop() sortable? = false\n\n  /** Defines whether the column is sorted and in which order. */\n  @Prop({ mutable: true }) sortOrder?: 'asc' | 'desc'\n\n  /** Emitted with culumn index and sort order. */\n  @Event() ldTableSort: EventEmitter<{\n    columnIndex: number\n    sortOrder: 'asc' | 'desc'\n  }>\n\n  /**\n   * @internal\n   * Resets sort buttons.\n   */\n  @Method()\n  async resetSort() {\n    this.sortOrder = undefined\n  }\n\n  handleSort = (sortOrder: 'asc' | 'desc') => {\n    this.sortOrder = sortOrder\n    const columnIndex = Array.from(this.el.parentNode.children).indexOf(this.el)\n    this.ldTableSort.emit({\n      columnIndex,\n      sortOrder,\n    })\n  }\n\n  onSortClick = (ev: Event, sortOrder: 'asc' | 'desc') => {\n    ev.preventDefault()\n    ev.stopPropagation()\n    if (\n      isAriaDisabled(\n        closest('ld-button', ev.target as HTMLElement).ariaDisabled\n      )\n    ) {\n      return\n    }\n    this.handleSort(sortOrder)\n  }\n\n  onThClick = () => {\n    if (!this.sortable) return\n    if (this.sortOrder === 'desc') {\n      this.handleSort('asc')\n    } else {\n      this.handleSort('desc')\n    }\n  }\n\n  componentWillLoad() {\n    if (this.sortOrder) {\n      this.handleSort(this.sortOrder)\n    }\n  }\n\n  renderChevron(asc?: boolean) {\n    return (\n      <ld-icon size=\"sm\" part={`icon chevron-${asc ? 'asc' : 'desc'}`}>\n        <svg\n          fill=\"none\"\n          height=\"7\"\n          part={`svg svg-${asc ? 'asc' : 'desc'}`}\n          style={{\n            transform: asc ? undefined : 'rotate(180deg)',\n          }}\n          viewBox=\"0 0 15 7\"\n          width=\"15\"\n        >\n          <path\n            d=\"M13.3 5.5 7.3 1l-6 4.5\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          />\n        </svg>\n      </ld-icon>\n    )\n  }\n\n  render() {\n    return (\n      <th\n        class={getClassNames([\n          'ld-table-header',\n          this.sortable && 'ld-table-header--sortable',\n        ])}\n        abbr={this.abbr}\n        colSpan={this.colspan}\n        headers={this.abbr}\n        rowspan={this.rowspan}\n        scope={this.scope}\n        part=\"cell\"\n        onClick={this.onThClick}\n      >\n        <slot />\n        {this.sortable && (\n          <div class=\"ld-table-header__sort-buttons\" part=\"sort-buttons\">\n            <ld-button\n              aria-disabled={this.sortOrder === 'asc' ? 'true' : undefined}\n              mode=\"ghost\"\n              onClick={(ev) => this.onSortClick(ev, 'asc')}\n              part=\"sort-button-asc\"\n              size=\"sm\"\n            >\n              {this.renderChevron(true)}\n            </ld-button>\n            <ld-button\n              aria-disabled={this.sortOrder === 'desc' ? 'true' : undefined}\n              mode=\"ghost\"\n              onClick={(ev) => this.onSortClick(ev, 'desc')}\n              part=\"sort-button-desc\"\n              size=\"sm\"\n            >\n              {this.renderChevron()}\n            </ld-button>\n          </div>\n        )}\n      </th>\n    )\n  }\n}\n"],"mappings":"qKAAA,MAAMA,EAAyB,ub,MC0BlBC,EAAa,M,kEA+CxBC,KAAAC,WAAcC,IACZF,KAAKE,UAAYA,EACjB,MAAMC,EAAcC,MAAMC,KAAKL,KAAKM,GAAGC,WAAWC,UAAUC,QAAQT,KAAKM,IACzEN,KAAKU,YAAYC,KAAK,CACpBR,cACAD,aACA,EAGJF,KAAAY,YAAc,CAACC,EAAWX,KACxBW,EAAGC,iBACHD,EAAGE,kBACH,GACEC,EACEC,EAAQ,YAAaJ,EAAGK,QAAuBC,cAEjD,CACA,M,CAEFnB,KAAKC,WAAWC,EAAU,EAG5BF,KAAAoB,UAAY,KACV,IAAKpB,KAAKqB,SAAU,OACpB,GAAIrB,KAAKE,YAAc,OAAQ,CAC7BF,KAAKC,WAAW,M,KACX,CACLD,KAAKC,WAAW,O,+HA/CA,M,yBAgBpB,eAAMqB,GACJtB,KAAKE,UAAYqB,S,CAkCnB,iBAAAC,GACE,GAAIxB,KAAKE,UAAW,CAClBF,KAAKC,WAAWD,KAAKE,U,EAIzB,aAAAuB,CAAcC,GACZ,OACEC,EAAA,WAASC,KAAK,KAAKC,KAAM,gBAAgBH,EAAM,MAAQ,UACrDC,EAAA,OACEG,KAAK,OACLC,OAAO,IACPF,KAAM,WAAWH,EAAM,MAAQ,SAC/BM,MAAO,CACLC,UAAWP,EAAMH,UAAY,kBAE/BW,QAAQ,WACRC,MAAM,MAENR,EAAA,QACES,EAAE,yBACFC,OAAO,eAAc,eACR,IAAG,iBACD,QAAO,kBACN,W,CAO1B,MAAAC,GACE,OACEX,EAAA,MACEY,MAAOC,EAAc,CACnB,kBACAxC,KAAKqB,UAAY,8BAEnBoB,KAAMzC,KAAKyC,KACXC,QAAS1C,KAAK2C,QACdC,QAAS5C,KAAKyC,KACdI,QAAS7C,KAAK6C,QACdC,MAAO9C,KAAK8C,MACZjB,KAAK,OACLkB,QAAS/C,KAAKoB,WAEdO,EAAA,aACC3B,KAAKqB,UACJM,EAAA,OAAKY,MAAM,gCAAgCV,KAAK,gBAC9CF,EAAA,6BACiB3B,KAAKE,YAAc,MAAQ,OAASqB,UACnDyB,KAAK,QACLD,QAAUlC,GAAOb,KAAKY,YAAYC,EAAI,OACtCgB,KAAK,kBACLD,KAAK,MAEJ5B,KAAKyB,cAAc,OAEtBE,EAAA,6BACiB3B,KAAKE,YAAc,OAAS,OAASqB,UACpDyB,KAAK,QACLD,QAAUlC,GAAOb,KAAKY,YAAYC,EAAI,QACtCgB,KAAK,mBACLD,KAAK,MAEJ5B,KAAKyB,kB"}