{"version":3,"names":["ldSidenavSliderShadowCss","LdSidenavSlider","this","updateActiveBeforeTransition","el","querySelectorAll","forEach","subnav","activeBeforeTransition","activeSubnavs","updateActive","active","updateAncestor","ancestor","index","length","updateFirstLevelHidden","isFirstLevelHidden","currentNavLevel","scrollInactiveToTop","Array","from","scrollToTop","onTransitionEnd","ev","target","emitChange","toggleVisibilityOnHidableContent","visible","children","includes","tagName","classList","toggle","navigateToSubnav","parentSubnav","subnavId","currentSubnav","document","querySelector","closest","unshift","id","undefined","needsInertUpdate","handleSubnavChange","slideToHandler","detail","handleSidenavCollapsedChange","sidenav","collapsed","scrollerRef","handleSidenavBreakpointChange","sidenavClosable","navigateBack","afterTransition","activeSubnav","toEmit","ldSidenavSliderChanged","ldSidenavSliderChange","emit","label","componentWillLoad","render","cl","getClassNames","h","Host","class","style","transform","visibility","part","ref"],"sources":["../src/liquid/components/ld-sidenav/ld-sidenav-slider/ld-sidenav-slider.shadow.css?tag=ld-sidenav-slider&encapsulation=shadow","../src/liquid/components/ld-sidenav/ld-sidenav-slider/ld-sidenav-slider.tsx"],"sourcesContent":[":host {\n  transition: transform var(--ld-sidenav-transition-duration) ease;\n  display: block;\n  height: 100%;\n  width: 100%;\n  position: absolute;\n\n  &.ld-sidenav-slider--subnav-active {\n    visibility: hidden;\n  }\n\n  ::slotted(\n      :where(:not(ld-sidenav-separator, ld-sidenav-navitem, ld-sidenav-subnav))\n    ) {\n    margin-bottom: var(--ld-sidenav-padding-y);\n    transition: var(--ld-sidenav-collapse-content-transition);\n    will-change: opacity, transform; /* fixes flickering on slide */\n  }\n\n  ::slotted(.ld-sidenav-slider__hidden) {\n    transition: opacity var(--ld-sidenav-transition-duration-collapse-expand)\n        linear,\n      visibility 0s var(--ld-sidenav-transition-duration-collapse-expand) linear,\n      transform var(--ld-sidenav-transition-duration-collapse-expand) ease;\n    opacity: 0;\n    visibility: hidden;\n    transform: translateX(var(--ld-sidenav-translate-x-delta));\n  }\n\n  ::slotted(.ld-sidenav-accordion) {\n    transform: none;\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\nimport { closest } from '../../../utils/closest'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-sidenav-slider',\n  styleUrl: 'ld-sidenav-slider.shadow.css',\n  shadow: true,\n})\nexport class LdSidenavSlider {\n  @Element() el: HTMLLdSidenavSliderElement\n  private sidenav: HTMLLdSidenavElement\n  private scrollerRef: HTMLLdSidenavScrollerInternalElement\n\n  /** ID of the subnav that shall be shown on initial render. */\n  @Prop({ mutable: true }) currentSubnav?: string\n\n  /** Used in the ld-sidenav-back component to display parent nav label. */\n  @Prop() label!: string\n\n  @State() currentNavLevel: number\n  @State() activeSubnavs: HTMLLdSidenavSubnavElement[] = []\n  @State() isFirstLevelHidden = false\n\n  /** Emitted on navigation (before transition ends). */\n  @Event() ldSidenavSliderChange: EventEmitter<\n    { id: string; label: string } | undefined\n  >\n\n  /** Emitted after navigation (after transition ends). */\n  @Event() ldSidenavSliderChanged: EventEmitter<\n    { id: string; label: string } | undefined\n  >\n\n  private navigateToSubnav() {\n    // Make current subnav and all ancestor subnavs active.\n    let parentSubnav: HTMLLdSidenavSubnavElement\n    let subnavId = this.currentSubnav\n    this.activeSubnavs = []\n    while (subnavId) {\n      const subnav = document.querySelector<HTMLLdSidenavSubnavElement>(\n        `#${subnavId}`\n      )\n      if (subnav) {\n        subnav.active = true\n        parentSubnav = subnav.closest(`ld-sidenav-subnav:not(#${subnavId})`)\n        this.activeSubnavs.unshift(subnav)\n        if (parentSubnav) {\n          subnavId = parentSubnav.id\n        } else {\n          subnavId = undefined\n        }\n      } else {\n        subnavId = undefined\n      }\n    }\n\n    if (this.activeSubnavs.length !== this.currentNavLevel) {\n      // Condition is true for almost all use cases.\n      let needsInertUpdate = false\n      if (\n        this.currentNavLevel === undefined ||\n        this.currentNavLevel > this.activeSubnavs.length\n      ) {\n        needsInertUpdate = true\n        this.updateAncestor()\n      }\n      this.currentNavLevel = this.activeSubnavs.length\n      if (needsInertUpdate) this.updateFirstLevelHidden()\n\n      this.updateActiveBeforeTransition()\n    } else if (this.activeSubnavs.length > 0) {\n      // This condition applies if navigating to a subnav\n      // which has the same level as the currently active subnav.\n      // This happens on change of the currentSubnav prop from\n      // the outside.\n      this.updateActive()\n      this.updateAncestor()\n      this.updateFirstLevelHidden()\n      this.scrollInactiveToTop()\n    }\n  }\n\n  @Watch('currentSubnav')\n  handleSubnavChange() {\n    this.navigateToSubnav()\n    this.emitChange()\n  }\n\n  @Listen('ldSidenavNavitemTo')\n  slideToHandler(ev: CustomEvent<{ id: string; label: string }>) {\n    this.currentSubnav = ev.detail.id\n  }\n\n  @Listen('ldSidenavCollapsedChange', { target: 'window', passive: true })\n  handleSidenavCollapsedChange(\n    ev: CustomEvent<{\n      collapsed: boolean\n      fully: boolean\n    }>\n  ) {\n    if (ev.target !== this.sidenav) return\n    if (ev.detail.collapsed) {\n      this.scrollerRef.scrollToTop(true)\n      this.toggleVisibilityOnHidableContent(false)\n    } else {\n      this.toggleVisibilityOnHidableContent(true)\n    }\n  }\n\n  @Listen('ldSidenavBreakpointChange', { target: 'window', passive: true })\n  handleSidenavBreakpointChange(ev: CustomEvent<boolean>) {\n    if (ev.target !== this.sidenav) return\n    const sidenavClosable = ev.detail\n    if (sidenavClosable) {\n      this.toggleVisibilityOnHidableContent(true)\n    } else {\n      this.toggleVisibilityOnHidableContent(!this.sidenav.collapsed)\n    }\n  }\n\n  /** Navigates back to the parent nav. */\n  @Method()\n  async navigateBack() {\n    if (this.currentNavLevel > 0) {\n      const parentSubnav = this.activeSubnavs[this.activeSubnavs.length - 2]\n      this.currentSubnav = parentSubnav?.id || ''\n    }\n  }\n\n  private emitChange(afterTransition = false) {\n    const activeSubnav = this.activeSubnavs[this.activeSubnavs.length - 1]\n    const toEmit = afterTransition\n      ? this.ldSidenavSliderChanged\n      : this.ldSidenavSliderChange\n    if (activeSubnav) {\n      const parentSubnav =\n        this.activeSubnavs[this.activeSubnavs.length - 2] || this.el\n      toEmit.emit({\n        id: activeSubnav.id,\n        label: parentSubnav.label,\n      })\n    } else if (!this.currentSubnav) {\n      toEmit.emit()\n    }\n  }\n\n  private updateActiveBeforeTransition = () => {\n    // reset\n    this.el.querySelectorAll('ld-sidenav-subnav').forEach((subnav) => {\n      subnav.activeBeforeTransition = false\n    })\n\n    // update\n    this.activeSubnavs.forEach((subnav) => {\n      subnav.activeBeforeTransition = true\n    })\n  }\n\n  private updateActive = () => {\n    // reset\n    this.el.querySelectorAll('ld-sidenav-subnav').forEach((subnav) => {\n      subnav.active = false\n    })\n\n    // update\n    this.activeSubnavs.forEach((subnav) => {\n      subnav.active = true\n    })\n  }\n\n  private updateAncestor = () => {\n    // reset\n    this.el.querySelectorAll('ld-sidenav-subnav').forEach((subnav) => {\n      subnav.ancestor = false\n    })\n\n    // update\n    this.activeSubnavs.forEach((subnav, index) => {\n      subnav.ancestor = index < this.activeSubnavs.length - 1\n    })\n  }\n\n  private updateFirstLevelHidden = () => {\n    this.isFirstLevelHidden = this.currentNavLevel > 0\n  }\n\n  private scrollInactiveToTop = () => {\n    // Scroll all inactive subnav scroll containers to top.\n    Array.from(\n      this.el.querySelectorAll<HTMLLdSidenavSubnavElement>('ld-sidenav-subnav')\n    ).forEach((subnav) => {\n      if (!subnav.active) {\n        subnav.scrollToTop()\n      }\n    })\n  }\n\n  private onTransitionEnd = (ev: TransitionEvent) => {\n    if (ev.target !== this.el) return\n\n    this.updateActive()\n    this.updateAncestor()\n    this.updateFirstLevelHidden()\n    this.scrollInactiveToTop()\n    this.emitChange(true)\n  }\n\n  private toggleVisibilityOnHidableContent = (visible: boolean) => {\n    Array.from(this.el.children).forEach((el) => {\n      // To also hide one of the following elements,\n      // it is possible to wrap it in a div with display contents.\n      if (\n        ![\n          'LD-SIDENAV-ACCORDION',\n          'LD-SIDENAV-NAVITEM',\n          'LD-SIDENAV-SEPARATOR',\n          'LD-SIDENAV-SUBNAV',\n        ].includes(el.tagName)\n      ) {\n        el.classList.toggle('ld-sidenav-slider__hidden', !visible)\n      }\n    })\n  }\n\n  componentWillLoad() {\n    this.sidenav = closest('ld-sidenav', this.el)\n    if (this.currentSubnav) {\n      this.handleSubnavChange()\n    }\n    if (this.currentNavLevel === undefined) {\n      this.currentNavLevel = 0\n    }\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-sidenav-slider',\n      this.currentNavLevel > 0 && 'ld-sidenav-slider--subnav-active',\n    ])\n\n    return (\n      <Host\n        onTransitionEnd={this.onTransitionEnd}\n        class={cl}\n        style={{\n          transform: `translateX(-${this.currentNavLevel}00%)`,\n          visibility: this.isFirstLevelHidden ? 'hidden' : 'inherit',\n        }}\n      >\n        <ld-sidenav-scroller-internal\n          part=\"scroll-container\"\n          ref={(el) => (this.scrollerRef = el)}\n        >\n          <slot></slot>\n        </ld-sidenav-scroller-internal>\n      </Host>\n    )\n  }\n}\n"],"mappings":"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"}