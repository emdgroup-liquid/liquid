{"version":3,"names":["ldContextMenuShadowCss","LdContextMenu","this","resetFocus","async","trigger","triggerSlotRef","assignedElements","isInnerFocusable","focusInner","isHtmlElement","focus","handleKeyDown","event","key","preventDefault","tooltipRef","hideTooltip","handleMenuOpen","tooltip","getTooltip","menuInTooltip","querySelector","initialized","addEventListener","firstMenuItem","getFirstMenuItem","showTooltip","updateSize","size","menuRef","setAttribute","removeAttribute","componentDidLoad","style","el","getAttribute","forEach","element","ariaHasPopup","render","h","onLdtooltipclose","onLdtooltipopen","ref","part","position","preventScreenreader","tag","tetherOptions","triggerType","unstyled","name","slot"],"sources":["../src/liquid/components/ld-context-menu/ld-context-menu.shadow.css?tag=ld-context-menu&encapsulation=shadow","../src/liquid/components/ld-context-menu/ld-context-menu.tsx"],"sourcesContent":[":host {\n  display: inline-flex;\n}\n","import {\n  Component,\n  Element,\n  h,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { isHtmlElement } from '../../utils/type-checking'\nimport { isInnerFocusable } from '../../utils/focus'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part menu - `ld-menu` element wrapping the default slot\n * @part tooltip - `ld-tooltip` element\n */\n@Component({\n  tag: 'ld-context-menu',\n  styleUrl: 'ld-context-menu.shadow.css',\n  shadow: true,\n})\nexport class LdContextMenu {\n  @Element() el: HTMLLdContextMenuElement\n  private menuRef: HTMLLdMenuElement\n  private tooltipRef: HTMLLdTooltipElement\n  private triggerSlotRef: HTMLSlotElement\n\n  /** Position of the context menu relative to the trigger element. */\n  @Prop() position?: HTMLLdTooltipElement['position'] = 'bottom left'\n\n  /** Size of the context menu. */\n  @Prop() size?: 'sm' | 'lg'\n\n  /** Tether options object to be merged with the default options (optionally stringified). */\n  @Prop() tetherOptions?: Partial<Tether.ITetherOptions> | string\n\n  @State() initialized = false\n\n  private resetFocus = async () => {\n    const [trigger] = this.triggerSlotRef.assignedElements()\n\n    if (isInnerFocusable(trigger)) {\n      await trigger.focusInner()\n      return\n    }\n\n    if (isHtmlElement(trigger)) {\n      trigger.focus()\n    }\n  }\n\n  private handleKeyDown = async (event: KeyboardEvent) => {\n    switch (event.key) {\n      case 'Escape':\n        event.preventDefault()\n        await this.tooltipRef.hideTooltip()\n        break\n      case 'Tab':\n        event.preventDefault()\n    }\n  }\n\n  private handleMenuOpen = async () => {\n    const tooltip = await this.tooltipRef.getTooltip()\n    const menuInTooltip = tooltip.querySelector('ld-menu')\n\n    if (!this.initialized) {\n      menuInTooltip.addEventListener('keydown', this.handleKeyDown)\n      this.initialized = true\n    }\n    const firstMenuItem = await menuInTooltip.getFirstMenuItem()\n\n    if (!firstMenuItem) {\n      return\n    }\n\n    await firstMenuItem.focusInner()\n  }\n\n  /** Show context menu */\n  @Method()\n  async showContextMenu() {\n    await this.tooltipRef.showTooltip()\n  }\n\n  /** Hide context menu */\n  @Method()\n  async hideContextMenu() {\n    await this.tooltipRef.hideTooltip()\n  }\n\n  @Watch('size')\n  private updateSize() {\n    if (this.size) {\n      this.menuRef.setAttribute('size', this.size)\n    } else {\n      this.menuRef.removeAttribute('size')\n    }\n  }\n\n  componentDidLoad() {\n    const style = this.el.getAttribute('style')\n\n    this.updateSize()\n\n    if (style) {\n      this.menuRef.setAttribute('style', style)\n      this.el.removeAttribute('style')\n    }\n\n    this.triggerSlotRef\n      .assignedElements()\n      .forEach((element) => (element.ariaHasPopup = 'menu'))\n  }\n\n  render() {\n    return (\n      <ld-tooltip\n        onLdtooltipclose={this.resetFocus}\n        onLdtooltipopen={this.handleMenuOpen}\n        ref={(element: HTMLLdTooltipElement) => (this.tooltipRef = element)}\n        part=\"tooltip\"\n        position={this.position}\n        preventScreenreader\n        tag=\"span\"\n        tetherOptions={this.tetherOptions}\n        triggerType=\"click\"\n        unstyled\n      >\n        <slot\n          name=\"trigger\"\n          ref={(element: HTMLSlotElement) => (this.triggerSlotRef = element)}\n          slot=\"trigger\"\n        />\n        <ld-menu\n          part=\"menu\"\n          ref={(el: HTMLLdMenuElement) => (this.menuRef = el)}\n        >\n          <slot />\n        </ld-menu>\n      </ld-tooltip>\n    )\n  }\n}\n"],"mappings":"0HAAA,MAAMA,EAAyB,6B,MCuBlBC,EAAa,M,yBAiBhBC,KAAAC,WAAaC,UACnB,MAAOC,GAAWH,KAAKI,eAAeC,mBAEtC,GAAIC,EAAiBH,GAAU,OACvBA,EAAQI,aACd,M,CAGF,GAAIC,EAAcL,GAAU,CAC1BA,EAAQM,O,GAIJT,KAAAU,cAAgBR,MAAOS,IAC7B,OAAQA,EAAMC,KACZ,IAAK,SACHD,EAAME,uBACAb,KAAKc,WAAWC,cACtB,MACF,IAAK,MACHJ,EAAME,iB,EAIJb,KAAAgB,eAAiBd,UACvB,MAAMe,QAAgBjB,KAAKc,WAAWI,aACtC,MAAMC,EAAgBF,EAAQG,cAAc,WAE5C,IAAKpB,KAAKqB,YAAa,CACrBF,EAAcG,iBAAiB,UAAWtB,KAAKU,eAC/CV,KAAKqB,YAAc,I,CAErB,MAAME,QAAsBJ,EAAcK,mBAE1C,IAAKD,EAAe,CAClB,M,OAGIA,EAAchB,YAAY,E,cAhDoB,c,kEAQ/B,K,CA6CvBL,8BACQF,KAAKc,WAAWW,a,CAKxBvB,8BACQF,KAAKc,WAAWC,a,CAIhBW,aACN,GAAI1B,KAAK2B,KAAM,CACb3B,KAAK4B,QAAQC,aAAa,OAAQ7B,KAAK2B,K,KAClC,CACL3B,KAAK4B,QAAQE,gBAAgB,O,EAIjCC,mBACE,MAAMC,EAAQhC,KAAKiC,GAAGC,aAAa,SAEnClC,KAAK0B,aAEL,GAAIM,EAAO,CACThC,KAAK4B,QAAQC,aAAa,QAASG,GACnChC,KAAKiC,GAAGH,gBAAgB,Q,CAG1B9B,KAAKI,eACFC,mBACA8B,SAASC,GAAaA,EAAQC,aAAe,Q,CAGlDC,SACE,OACEC,EAAA,cACEC,iBAAkBxC,KAAKC,WACvBwC,gBAAiBzC,KAAKgB,eACtB0B,IAAMN,GAAmCpC,KAAKc,WAAasB,EAC3DO,KAAK,UACLC,SAAU5C,KAAK4C,SACfC,oBAAmB,KACnBC,IAAI,OACJC,cAAe/C,KAAK+C,cACpBC,YAAY,QACZC,SAAQ,MAERV,EAAA,QACEW,KAAK,UACLR,IAAMN,GAA8BpC,KAAKI,eAAiBgC,EAC1De,KAAK,YAEPZ,EAAA,WACEI,KAAK,OACLD,IAAMT,GAA2BjC,KAAK4B,QAAUK,GAEhDM,EAAA,c"}