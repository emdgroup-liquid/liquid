{"version":3,"names":["ldTabsShadowCss","tabsCount","LdTabs","constructor","hostRef","this","idDescriber","handleLdtabselect","ev","stopImmediatePropagation","currentLdTab","target","updateTabs","updateTabPanels","id","ldtabchange","emit","_a","Array","from","el","querySelectorAll","find","tab","hasAttribute","removeAttribute","scrollIntoView","behavior","block","inline","tabId","tabPanels","tabpanel","setAttribute","undefined","_b","getAttribute","async","identifier","newActiveTab","querySelector","Error","select","componentDidRender","selectedIndex","forEach","index","selected","render","h","Host","onLdtabselect","class"],"sources":["./src/liquid/components/ld-tabs/ld-tabs.shadow.css?tag=ld-tabs&encapsulation=shadow","./src/liquid/components/ld-tabs/ld-tabs.tsx"],"sourcesContent":[null,"import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n} from '@stencil/core'\nimport { LdTab } from './ld-tab/ld-tab'\n\nlet tabsCount = 0\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-tabs',\n  styleUrl: 'ld-tabs.shadow.css',\n  shadow: true,\n})\nexport class LdTabs {\n  @Element() el: HTMLElement\n\n  /** Emitted with the id of the selected tab. */\n  @Event() ldtabchange: EventEmitter<string>\n\n  private idDescriber = `ld-tabs-${tabsCount++}`\n\n  private updateTabs(currentLdTab) {\n    // TODO: fix Stencils DOM implementation for unit testing and replace\n    // this.el.querySelector('[selected]')?.removeAttribute('selected')\n    Array.from(this.el.querySelectorAll('ld-tab'))\n      .find((tab) => tab.hasAttribute('selected'))\n      ?.removeAttribute('selected')\n    currentLdTab.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center',\n    })\n  }\n\n  private updateTabPanels(tabId: string) {\n    // TODO: fix Stencils DOM implementation for unit testing and replace\n    const tabPanels = Array.from(this.el.querySelectorAll('ld-tabpanel'))\n    // this.el.querySelector('ld-tabpanel:not([hidden])')\n    tabPanels\n      .find((tabpanel) => !tabpanel.hasAttribute('hidden'))\n      ?.setAttribute('hidden', undefined)\n    // this.el.querySelector(`[aria-labelledby=\"${tabId}\"]`)\n    tabPanels\n      .find((tabpanel) => tabpanel.getAttribute('aria-labelledby') === tabId)\n      ?.removeAttribute('hidden')\n  }\n\n  private handleLdtabselect = (ev: CustomEvent<undefined>) => {\n    ev.stopImmediatePropagation()\n    const currentLdTab = ev.target as HTMLLdTabElement\n    this.updateTabs(currentLdTab)\n    this.updateTabPanels(currentLdTab.id)\n    this.ldtabchange.emit(currentLdTab.id)\n  }\n\n  /** Set selected tab to a certain index */\n  @Method()\n  async switchTab(identifier: number | string) {\n    const newActiveTab =\n      typeof identifier === 'number'\n        ? this.el.querySelectorAll('ld-tab')[identifier]\n        : this.el.querySelector(`ld-tab#${identifier}`)\n\n    if (!newActiveTab) {\n      throw new Error(\n        `Could not find ld-tab with ${\n          typeof identifier === 'number' ? 'index' : 'id'\n        } ${typeof identifier === 'number' ? identifier : `\"${identifier}\"`}.`\n      )\n    }\n\n    ;(newActiveTab as unknown as LdTab).select()\n  }\n\n  componentDidRender() {\n    // Assign ids to tabs and use them in aria-describedby attributes of the corresponding tabpanels.\n    // Memorize the index of the selected tab in order to hide all non-selected tabpanels.\n    let selectedIndex\n    this.el.querySelectorAll('ld-tab').forEach((tab, index) => {\n      tab.id = `${this.idDescriber}-tab-${index}`\n      if (tab.selected) {\n        selectedIndex = index\n      }\n    })\n    this.el.querySelectorAll('ld-tabpanel').forEach((tabpanel, index) => {\n      tabpanel.setAttribute(\n        'aria-labelledby',\n        `${this.idDescriber}-tab-${index}`\n      )\n      if (selectedIndex === index) {\n        tabpanel.removeAttribute('hidden')\n      } else {\n        tabpanel.setAttribute('hidden', 'true')\n      }\n    })\n  }\n\n  render() {\n    return (\n      <Host onLdtabselect={this.handleLdtabselect} class=\"ld-tabs\">\n        <slot></slot>\n      </Host>\n    )\n  }\n}\n"],"mappings":"gEAAA,MAAMA,EAAkB,GCWxB,IAAIC,EAAY,E,MAWHC,EAAM,MALnBC,YAAAC,G,mDAWUC,KAAAC,YAAc,WAAWL,MA4BzBI,KAAAE,kBAAqBC,IAC3BA,EAAGC,2BACH,MAAMC,EAAeF,EAAGG,OACxBN,KAAKO,WAAWF,GAChBL,KAAKQ,gBAAgBH,EAAaI,IAClCT,KAAKU,YAAYC,KAAKN,EAAaI,GAAG,C,CA/BhCF,WAAWF,G,OAGjBO,EAAAC,MAAMC,KAAKd,KAAKe,GAAGC,iBAAiB,WACjCC,MAAMC,GAAQA,EAAIC,aAAa,iBAAY,MAAAP,SAAA,SAAAA,EAC1CQ,gBAAgB,YACpBf,EAAagB,eAAe,CAC1BC,SAAU,SACVC,MAAO,UACPC,OAAQ,U,CAIJhB,gBAAgBiB,G,QAEtB,MAAMC,EAAYb,MAAMC,KAAKd,KAAKe,GAAGC,iBAAiB,iBAEtDJ,EAAAc,EACGT,MAAMU,IAAcA,EAASR,aAAa,eAAU,MAAAP,SAAA,SAAAA,EACnDgB,aAAa,SAAUC,YAE3BC,EAAAJ,EACGT,MAAMU,GAAaA,EAASI,aAAa,qBAAuBN,OAAM,MAAAK,SAAA,SAAAA,EACrEV,gBAAgB,S,CAatBY,gBAAgBC,GACd,MAAMC,SACGD,IAAe,SAClBjC,KAAKe,GAAGC,iBAAiB,UAAUiB,GACnCjC,KAAKe,GAAGoB,cAAc,UAAUF,KAEtC,IAAKC,EAAc,CACjB,MAAM,IAAIE,MACR,qCACSH,IAAe,SAAW,QAAU,eAClCA,IAAe,SAAWA,EAAa,IAAIA,Q,CAIxDC,EAAkCG,Q,CAGtCC,qBAGE,IAAIC,EACJvC,KAAKe,GAAGC,iBAAiB,UAAUwB,SAAQ,CAACtB,EAAKuB,KAC/CvB,EAAIT,GAAK,GAAGT,KAAKC,mBAAmBwC,IACpC,GAAIvB,EAAIwB,SAAU,CAChBH,EAAgBE,C,KAGpBzC,KAAKe,GAAGC,iBAAiB,eAAewB,SAAQ,CAACb,EAAUc,KACzDd,EAASC,aACP,kBACA,GAAG5B,KAAKC,mBAAmBwC,KAE7B,GAAIF,IAAkBE,EAAO,CAC3Bd,EAASP,gBAAgB,S,KACpB,CACLO,EAASC,aAAa,SAAU,O,KAKtCe,SACE,OACEC,EAACC,EAAI,CAACC,cAAe9C,KAAKE,kBAAmB6C,MAAM,WACjDH,EAAA,a"}