{"version":3,"names":["ldSidenavShadowCss","LdSidenav","this","toFocus","undefined","focusTimeout","updateFocus","clearTimeout","tabIndex","window","getComputedStyle","visibility","setTimeout","focus","toggleCollapsedState","collapsed","activeSubnavContainsIconsOrHasBack","children","Array","from","el","hasBack","some","child","tagName","hasPrimaryChild","includes","mode","slider","querySelector","activeSubnav","currentSubnav","navitemsModePrimaryChildren","filter","navitemsModePrimaryInAccordion","querySelectorAll","totalNavitemsModePrimary","length","isToggleOutside","element","onTransitionEnd","ev","target","transitions","fullyCollapsible","firstFocusableInSidenav","getFirstFocusable","document","activeElement","closest","previousElementSibling","focusInner","onMatchMediaChange","closable","matches","collapsible","ldSidenavBreakpointChange","emit","async","open","onCollapsedChange","ldSidenavCollapsedChange","fully","onOpenChange","ldSidenavOpenChange","updateFullyCollapsible","narrow","_a","updateCollapsible","handleClickOutside","isTrusted","collapseTrigger","handleMouseOut","relatedTarget","handleMouseIn","expandTrigger","handleOpen","handleClose","handleSlideBack","pop","currentSubnavId","id","parentSubnav","parentElement","navigateBack","shadowRoot","slideToHandler","ldSidenavBack","slideChangeHandler","updateLabel","_b","detail","label","hasActiveSubnav","handleKeyDown","hasSidenavFocus","key","shiftKey","firstItemOfCurrentSubnav","isFocusInSidenav","trapFocus","isFocusInKeepFocusable","isLeavingSidenav","isLeavingFocusSelectorElement","trapFocusSelectorElements","firstFocusableFromSelectorElements","find","isLeavingFirstFocusableInSidenav","isLeavingFirstFocusableFromSelectorElements","lastFocusableInSidenav","reverse","lastFocusableFromSelectorElements","nextFocused","handleHeaderToggleClick","toggle","componentWillLoad","mediaQuery","matchMedia","breakpoint","addEventListener","componentDidLoad","disconnectedCallback","removeEventListener","render","cl","align","hasShadowTop","hasShadowBottom","toggleTransitionDisabled","h","Host","class","getClassNames","role","name","part","onClick","bind"],"sources":["../src/liquid/components/ld-sidenav/ld-sidenav.shadow.css?tag=ld-sidenav&encapsulation=shadow","../src/liquid/components/ld-sidenav/ld-sidenav.tsx"],"sourcesContent":[":host {\n  /* layout */\n  --ld-sidenav-line-height: 1.15;\n  --ld-sidenav-padding-x: 1rem;\n  --ld-sidenav-padding-y: 1rem;\n  --ld-sidenav-padding: var(--ld-sidenav-padding-y) var(--ld-sidenav-padding-x);\n  --ld-sidenav-toggle-size: var(--ld-sp-24);\n  --ld-sidenav-toggle-top: calc(\n    2 * var(--ld-sidenav-padding-y) + var(--ld-sidenav-navitem-icon-size) - 0.5 *\n      var(--ld-sidenav-toggle-size)\n  );\n  --ld-sidenav-translate-x-delta: calc(\n    var(--ld-sidenav-width) - var(--ld-sidenav-width-collapsed)\n  );\n  --ld-sidenav-width: 15.625rem;\n  --ld-sidenav-width-collapsed: calc(\n    2 * var(--ld-sidenav-padding-x) + var(--ld-sidenav-navitem-icon-size)\n  );\n  --ld-sidenav-width-fully-collapsed: calc(-1 * var(--ld-sp-1));\n\n  /* layout ld-navitem */\n  --ld-sidenav-navitem-active-indicator-border-width: 0.1875rem;\n  --ld-sidenav-navitem-icon-size: var(--ld-sp-32);\n  --ld-sidenav-navitem-bg-inset: var(--ld-sp-6);\n  --ld-sidenav-navitem-border-radius: var(--ld-br-l);\n  --ld-sidenav-navitem-tertiary-indent: calc(\n    3 * var(--ld-sidenav-padding-x) + 0.3125rem\n  );\n  --ld-sidenav-navitem-tertiary-width: calc(\n    100% - (4 * var(--ld-sidenav-padding-x)) - 0.3125rem\n  );\n\n  /* transitions */\n  --ld-sidenav-collapse-content-transition: opacity\n      var(--ld-sidenav-transition-duration-collapse-expand)\n      var(--ld-sidenav-transition-delay-collapse-expand) linear,\n    transform var(--ld-sidenav-transition-duration-collapse-expand) ease;\n  --ld-sidenav-transition-delay: 0s;\n  --ld-sidenav-transition-delay-collapse-expand: 0s;\n  /* Not using 0s here because we rely on the transition end event. */\n  --ld-sidenav-transition-duration: var(--ld-transition-duration-instant);\n  --ld-sidenav-transition-duration-collapse-expand: var(\n    --ld-transition-duration-instant\n  );\n  --ld-sidenav-translate-x-direction: 1;\n  --ld-sidenav-stack-to-top-transition: transform\n    var(--ld-sidenav-transition-duration-collapse-expand)\n    var(--ld-sidenav-transition-delay-collapse-expand) ease;\n\n  /* colors */\n  --ld-sidenav-bg-color: var(--ld-col-wht);\n  --ld-sidenav-separator-line-bg-col: var(--ld-col-neutral-100);\n  --ld-sidenav-subnav-bg-color: var(--ld-col-wht);\n\n  &(.ld-sidenav--transitions) {\n    @media (prefers-reduced-motion: no-preference) {\n      --ld-sidenav-transition-duration: var(--ld-transition-duration-normal);\n      --ld-sidenav-transition-duration-collapse-expand: var(\n        --ld-transition-duration-normal\n      );\n      --ld-sidenav-transition-delay: var(--ld-transition-duration-quick);\n      --ld-sidenav-transition-delay-collapse-expand: var(\n        --ld-transition-duration-quick\n      );\n    }\n  }\n\n  &(.ld-sidenav--toggle-transition-disabled) {\n    @media (prefers-reduced-motion: no-preference) {\n      --ld-sidenav-transition-duration-collapse-expand: var(\n        --ld-transition-duration-instant\n      );\n      --ld-sidenav-transition-delay-collapse-expand: 0s;\n    }\n  }\n\n  background-color: var(--ld-sidenav-bg-color);\n  bottom: 0;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font: var(--ld-typo-body-m);\n  left: 0;\n  overflow: hidden;\n  position: var(--ld-sidenav-position, fixed);\n  text-align: left;\n  transition: transform var(--ld-sidenav-transition-duration-collapse-expand)\n    ease;\n  top: 0;\n  width: var(--ld-sidenav-width);\n\n  /* Create a stacking context with a default z-index greater zero,\n  so that elements with a stacking context of their own don't overlap. */\n  z-index: var(--ld-sidenav-z-index, 1);\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    width: var(--ld-sp-2);\n    background-color: var(--ld-sidenav-separator-line-bg-col);\n    z-index: 2;\n  }\n\n  .ld-sidenav__content {\n    transition: opacity var(--ld-sidenav-transition-duration-collapse-expand)\n      linear;\n  }\n\n  &(.ld-sidenav--closable:not(.ld-sidenav--open)) {\n    .ld-sidenav__content {\n      transition: opacity var(--ld-sidenav-transition-duration-collapse-expand)\n          linear,\n        visibility 0s var(--ld-sidenav-transition-duration-collapse-expand)\n          linear;\n      visibility: hidden;\n    }\n  }\n\n  &(.ld-sidenav--collapsed:not(.ld-sidenav--closable)) {\n    transform: translateX(\n      calc(\n        var(--ld-sidenav-translate-x-direction) *\n          (-100% + var(--ld-sidenav-width-collapsed))\n      )\n    );\n  }\n\n  &(.ld-sidenav--collapsed.ld-sidenav--fully-collapsible:not(.ld-sidenav--closable)) {\n    transform: translateX(\n      calc(\n        var(--ld-sidenav-translate-x-direction) *\n          (-100% + var(--ld-sidenav-width-fully-collapsed))\n      )\n    );\n\n    .ld-sidenav__content {\n      opacity: 0;\n      visibility: hidden;\n    }\n  }\n\n  &(.ld-sidenav--collapsed.ld-sidenav--fully-collapsible.ld-sidenav--transitions:not(.ld-sidenav--closable)) {\n    .ld-sidenav__content {\n      transition: opacity var(--ld-sidenav-transition-duration-collapse-expand)\n          linear,\n        visibility 0s var(--ld-sidenav-transition-duration-collapse-expand)\n          linear;\n    }\n  }\n\n  &(.ld-sidenav--right) {\n    --ld-sidenav-translate-x-direction: -1;\n    --ld-sidenav-translate-x-delta: 0;\n    left: unset;\n    right: 0;\n\n    &::before {\n      right: unset;\n      left: 0;\n      transform: translateX(-50%) scaleX(1.5);\n    }\n  }\n\n  &(.ld-sidenav--closable) {\n    --ld-sidenav-collapse-content-transition: none;\n    --ld-sidenav-stack-to-top-transition: none;\n    --ld-sidenav-navitem-move-up-closable: 0;\n    --ld-sidenav-translate-x-delta: 0;\n    width: 100%;\n    transform: translateX(\n      calc(var(--ld-sidenav-translate-x-direction) * -100%)\n    );\n  }\n\n  &(.ld-sidenav--closable.ld-sidenav--open) {\n    transform: translateX(0);\n  }\n\n  ::slotted(ld-sidenav-navitem) {\n    margin-bottom: var(--ld-sidenav-padding-y);\n  }\n\n  ::slotted(ld-sidenav-navitem[slot='top']),\n  ::slotted(ld-sidenav-navitem[slot='bottom']) {\n    margin-top: var(--ld-sidenav-padding-y);\n  }\n\n  ::slotted(ld-sidenav-heading) {\n    margin: var(--ld-sidenav-padding-y) 0;\n  }\n}\n\n.ld-sidenav__toggle {\n  aspect-ratio: 1;\n  background-color: var(--ld-col-wht);\n  border: 0;\n  border-radius: var(--ld-br-full);\n  box-shadow: var(--ld-shadow-stacked);\n  color: var(--ld-thm-primary);\n  cursor: pointer;\n  display: grid;\n  outline-offset: var(--ld-sp-4);\n  place-content: center;\n  position: absolute;\n  right: 0;\n  top: var(--ld-sidenav-toggle-top);\n  touch-action: manipulation;\n  transform: translateX(50%);\n  width: var(--ld-sidenav-toggle-size);\n  will-change: transform; /* fixes rendering issue */\n  z-index: 1;\n  -webkit-touch-callout: none;\n\n  /* background color */\n  &::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    display: block;\n    border-radius: inherit;\n  }\n\n  /* increase click area */\n  &::after {\n    content: '';\n    position: absolute;\n    inset: calc(-1 * var(--ld-sp-6));\n    display: block;\n    border-radius: inherit;\n  }\n\n  &:hover,\n  &:focus:focus-visible {\n    &:not(:active) {\n      box-shadow: var(--ld-shadow-sticky);\n    }\n  }\n\n  &:where(:focus:focus-visible) {\n    color: var(--ld-thm-primary-hover);\n\n    &::before {\n      background-color: var(--ld-thm-primary-alpha-low);\n    }\n  }\n  @media (hover: hover) {\n    &:where(:hover) {\n      color: var(--ld-thm-primary-hover);\n    }\n  }\n  &:where(:active),\n  &:where(:active:focus-visible) {\n    color: var(--ld-thm-primary-active);\n  }\n\n  :host(.ld-sidenav--right) & {\n    transform: translateX(-50%);\n    right: unset;\n    left: 0;\n  }\n}\n\n.ld-sidenav__toggle-icon {\n  transform-origin: center;\n  position: relative;\n\n  :host(.ld-sidenav--collapsed) & {\n    transform: rotate(180deg);\n  }\n\n  :host(.ld-sidenav--right) & {\n    transform: rotate(180deg);\n  }\n  :host(.ld-sidenav--right.ld-sidenav--collapsed) & {\n    transform: none;\n  }\n}\n\n.ld-sidenav__content {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n  will-change: transform; /* fixes overflow not working on slide transition */\n}\n\n.ld-sidenav__slot-container-default {\n  height: 100%;\n  position: relative;\n}\n\n.ld-sidenav__slot-container-top,\n.ld-sidenav__slot-container-bottom {\n  background-color: var(--ld-sidenav-bg-color);\n  z-index: 1;\n  position: relative;\n}\n\n.ld-sidenav__slot-container-top,\n.ld-sidenav__slot-container-default,\n.ld-sidenav__slot-container-bottom {\n  &::before {\n    visibility: visible;\n    z-index: 0;\n    opacity: 0;\n    content: '';\n    position: absolute;\n    inset: 0;\n    background-color: var(--ld-sidenav-subnav-bg-color);\n    transition: opacity var(--ld-sidenav-transition-duration-collapse-expand)\n      linear;\n  }\n\n  :host(.ld-sidenav--has-active-subnav) & {\n    &::before {\n      opacity: 1;\n    }\n  }\n}\n\n.ld-sidenav__fully-collapsed-click-area {\n  display: none;\n  inset: 0;\n  position: absolute;\n  z-index: 1;\n\n  :host(\n      .ld-sidenav--collapsed.ld-sidenav--fully-collapsible:not(\n          .ld-sidenav--closable\n        )\n    )\n    & {\n    display: block;\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { getFirstFocusable } from '../../utils/focus'\nimport { closest } from '../../utils/closest'\n\n/**\n * @slot - default slot, vertically scrollable.\n * @slot top - slot fixed at the top, above scrollable default slot.\n * @slot bottom - slot fixed at the bottom, below scrollable default slot.\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-sidenav',\n  styleUrl: 'ld-sidenav.shadow.css',\n  shadow: true,\n})\nexport class LdSidenav {\n  @Element() el: HTMLLdSidenavElement\n  private mediaQuery: MediaQueryList\n\n  /** Whether the nav should be aligned to the left or the right side of its container. */\n  @Prop() align?: 'left' | 'right' = 'left'\n\n  /**\n   * The breakpoint at which the sidenav takes full width and can be\n   * opened and closed as opposed to being expanded and collapsed.\n   * The prop value is used in a max-width media query.\n   */\n  @Prop() breakpoint? = '23.4375rem'\n\n  /** Indicates that the navigation is collapsed to the side of its container. */\n  @Prop({ mutable: true }) collapsed? = false\n\n  /**\n   * Makes the navigation collapse either on\n   * - explicit toggle button click,\n   * - when the user clicks somewhere outside the element or\n   * - when the user moves the cursor / focus outside the element.\n   * The modes are inclusive from right to left:\n   * - clickoutside applies if the collapse trigger is set to mouseout\n   * - toggle applies if the collapse trigger is set to clickoutside\n   */\n  @Prop() collapseTrigger?: 'toggle' | 'clickoutside' | 'mouseout' = 'toggle'\n\n  /**\n   * Allows the side navigation to be collapsed to the side of its container.\n   */\n  @Prop() collapsible? = false\n\n  /**\n   * Makes the navigation expand either on\n   * - explicit toggle button click,\n   * - when the user moves the cursor over the element.\n   * The modes are inclusive from right to left:\n   * - toggle applies if the expand trigger is set to mouseenter\n   */\n  @Prop() expandTrigger?: 'toggle' | 'mouseenter' = 'toggle'\n\n  /** Label to be used for the landmark element (the sidenav itself). */\n  @Prop() label? = 'Side navigation'\n\n  /**\n   * Set to true if you'd like to have a sidenav which partially\n   * collapses in way, that slotted ld-navitem components are displayed\n   * as icon buttons.\n   */\n  @Prop() narrow? = false\n\n  /**\n   * Indicates that the navigation is visible in a viewport\n   * which is smaller than the value of the `breakpoint` prop.\n   */\n  @Prop({ mutable: true }) open? = false\n\n  /**\n   * Disables transitions on collapsing and expansion of the sidenav.\n   * This is especially usefull when the page content gets pushed to\n   * the side on sidenav expansion, and you want to prevent too many\n   * layout shifts during the transition.\n   */\n  @Prop() toggleTransitionDisabled? = false\n\n  /**\n   * Enables focus trapping. Accespts a CSS selector which indicates\n   * what is still focusable outside the sidenav, when the sidenav is\n   * closable and open (i.e. \"ld-header *\"). Use an empty string to\n   * enable focus trapping without specifying focusable elements\n   * outside the sidenav component.\n   */\n  @Prop() trapFocus?: string // The focus trap feature is\n  // disabled by default in order to not violate WCAG 2.1.2 (see\n  // https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap.html).\n  // It needs to be enabled explicitly, making sure that all visible\n  // UI elements are still focusable when the sidenav is opened.\n\n  @State() closable\n  @State() fullyCollapsible = false\n  @State() hasActiveSubnav = false\n  @State() hasShadowBottom = false\n  @State() hasShadowTop = false\n  @State() transitions = false\n\n  /**\n   * Toggles sidenav.\n   */\n  @Method()\n  async toggle() {\n    if (this.closable) {\n      this.open = !this.open\n    } else {\n      this.toggleCollapsedState()\n    }\n  }\n\n  /** Emitted when the sidenav collapses or expands. */\n  @Event() ldSidenavCollapsedChange: EventEmitter<{\n    collapsed: boolean\n    fully: boolean\n  }>\n\n  /** Emitted when the sidenav opens or closes. */\n  @Event() ldSidenavOpenChange: EventEmitter<boolean>\n\n  /** Emitted when the sidenav registers a match media change event. */\n  @Event() ldSidenavBreakpointChange: EventEmitter<boolean>\n\n  // The following event is not used within the ld-sidenav component itself.\n  // Its only purpose is to create a type definition on the ld-sidenav component,\n  // in order to be able to add an inline listener in TSX, for listening\n  // on the event bubling up from ld-sidenav-back components.\n  /** Emitted on click of the ld-sidenav-back component. */\n  @Event() ldSidenavBack: EventEmitter\n\n  // The following event is not used within the ld-sidenav component itself.\n  // Its only purpose is to create a type definition on the ld-sidenav component,\n  // in order to be able to add an inline listener in TSX, for listening\n  // on the event bubling up from ld-sidenav-navitem components.\n  /** Emitted on click of the ld-sidenav-navitem component if prop to is set. */\n  @Event() ldSidenavNavitemTo: EventEmitter<{ id: string; label: string }>\n\n  // The following event is not used within the ld-sidenav component itself.\n  // Its only purpose is to create a type definition on the ld-sidenav component,\n  // in order to be able to add an inline listener in TSX, for listening\n  // on the event bubling up from ld-sidenav-navitem components.\n  /** Emitted on click of the ld-sidenav-navitem component. */\n  @Event() ldSidenavNavitemClick: EventEmitter\n\n  // The following event is not used within the ld-sidenav component itself.\n  // Its only purpose is to create a type definition on the ld-sidenav component,\n  // in order to be able to add an inline listener in TSX, for listening\n  // on the event bubling up from ld-sidenav-slider components.\n  /** Emitted on navigation (before transition ends) of the ld-sidenav-slider component. */\n  @Event() ldSidenavSliderChange: EventEmitter<\n    { id: string; label: string } | undefined\n  >\n\n  @Watch('collapsed')\n  onCollapsedChange(collapsed) {\n    // The ldSidenavCollapsedChange event needs to be emitted even if the\n    // sidenav is currently not collapsible (when it is closable), because\n    // on breakpoint change its subcomponents need to be rendered according\n    // to the new state and thus need to update their state using the event.\n    this.ldSidenavCollapsedChange.emit({\n      collapsed,\n      fully: this.fullyCollapsible,\n    })\n\n    if (collapsed) {\n      this.open = false\n    }\n  }\n\n  @Watch('open')\n  onOpenChange(open) {\n    this.ldSidenavOpenChange.emit(open)\n\n    if (!open && this.collapsible) {\n      this.collapsed = true\n    }\n  }\n\n  @Watch('collapsible')\n  @Watch('narrow')\n  updateFullyCollapsible() {\n    this.fullyCollapsible =\n      this.collapsible &&\n      (!this.narrow || !this.activeSubnavContainsIconsOrHasBack())\n    if (!this.collapsible) this.collapsed = false\n    this.el.querySelector('ld-sidenav-header')?.updateCollapsible()\n  }\n\n  @Listen('click', {\n    target: 'window',\n  })\n  handleClickOutside(ev: MouseEvent) {\n    if (\n      ev.isTrusted &&\n      ['clickoutside', 'mouseout'].includes(this.collapseTrigger) &&\n      closest('ld-sidenav', ev.target as HTMLElement) !== this.el\n    ) {\n      this.collapsed = this.collapsible\n    }\n  }\n\n  @Listen('mouseout')\n  handleMouseOut(ev: MouseEvent) {\n    if (\n      this.collapseTrigger === 'mouseout' &&\n      ev.relatedTarget &&\n      (ev.relatedTarget as HTMLElement).closest('ld-sidenav') !== this.el\n    ) {\n      this.collapsed = this.collapsible\n    }\n  }\n\n  @Listen('mouseenter')\n  handleMouseIn() {\n    if (this.fullyCollapsible || this.expandTrigger === 'mouseenter') {\n      this.collapsed = false\n    }\n  }\n\n  @Listen('ldSidenavOpen')\n  handleOpen() {\n    this.open = true\n  }\n\n  @Listen('ldSidenavClose')\n  handleClose() {\n    clearTimeout(this.focusTimeout)\n    this.open = false\n  }\n\n  @Listen('ldSidenavBack')\n  handleSlideBack() {\n    clearTimeout(this.focusTimeout)\n    const currentSubnav = Array.from(\n      this.el.querySelectorAll('.ld-sidenav-subnav--active')\n    ).pop()\n    const currentSubnavId = currentSubnav?.id\n    const parentSubnav = currentSubnav?.parentElement\n    this.el.querySelector('ld-sidenav-slider').navigateBack()\n\n    // Set focus on parent nav-item element as soon as back button looses focus.\n    this.toFocus = parentSubnav\n      ?.querySelector<HTMLLdSidenavNavitemElement>(`[to='${currentSubnavId}']`)\n      ?.shadowRoot.querySelector<HTMLButtonElement | HTMLAnchorElement>(\n        '[part*=\"focusable\"]'\n      )\n\n    // Always expand side navigation on back button click.\n    this.collapsed = false\n  }\n\n  @Listen('ldSidenavNavitemTo')\n  slideToHandler() {\n    clearTimeout(this.focusTimeout)\n    // set focus on back button\n    const ldSidenavBack = this.el\n      .querySelector('ld-sidenav-back')\n      ?.shadowRoot.querySelector<HTMLElement>('.ld-sidenav-back')\n    this.toFocus = ldSidenavBack\n    this.updateFocus()\n  }\n\n  @Listen('ldSidenavSliderChange')\n  slideChangeHandler(\n    ev: CustomEvent<{ id: string; label: string } | undefined>\n  ) {\n    clearTimeout(this.focusTimeout)\n    this.el.querySelector('ld-sidenav-back')?.updateLabel(ev.detail?.label)\n\n    this.hasActiveSubnav = !!ev.detail\n\n    this.updateFullyCollapsible()\n    this.updateFocus()\n  }\n\n  @Listen('keydown', { passive: true, target: 'window' })\n  handleKeyDown(ev: KeyboardEvent) {\n    // Ignore events if sidenav has no focus and is not closable.\n    const hasSidenavFocus =\n      document.activeElement.closest('ld-sidenav') === this.el\n\n    if (\n      hasSidenavFocus &&\n      ev.key === 'Tab' &&\n      !ev.shiftKey &&\n      document.activeElement === this.el.querySelector('ld-sidenav-back')\n    ) {\n      // This block prevents the focus from being set to the wrong element,\n      // when a user quickly hits the [Tab] key after triggering the\n      // transition to a subnav.\n      const { currentSubnav } = this.el.querySelector('ld-sidenav-slider')\n\n      if (currentSubnav) {\n        const firstItemOfCurrentSubnav = getFirstFocusable(\n          this.el.querySelector<HTMLLdSidenavSubnavElement>(`#${currentSubnav}`)\n        )\n\n        setTimeout(async () => {\n          if ('focusInner' in firstItemOfCurrentSubnav) {\n            await (\n              firstItemOfCurrentSubnav as unknown as InnerFocusable\n            ).focusInner()\n          } else {\n            firstItemOfCurrentSubnav.focus()\n          }\n        })\n      }\n    }\n\n    if (!hasSidenavFocus && !this.closable) {\n      return\n    }\n\n    const slider = this.el.querySelector('ld-sidenav-slider')\n\n    if (ev.key === 'Escape') {\n      if (!slider && this.closable) {\n        this.open = false\n        return\n      }\n\n      if (this.hasActiveSubnav) {\n        this.handleSlideBack()\n      } else if (this.closable) {\n        this.open = false\n      }\n    }\n  }\n\n  @Listen('focusout', { passive: true, target: 'window' })\n  async handleFocusout(ev: FocusEvent) {\n    const relatedTarget = ev.relatedTarget as HTMLElement | undefined\n    const isFocusInSidenav = closest('ld-sidenav', relatedTarget) === this.el\n\n    // If focus is outside the sidenav and the collapse trigger is set\n    // to 'mouseout', collapse the sidenav.\n    if (!isFocusInSidenav && relatedTarget !== null) {\n      if (this.collapseTrigger === 'mouseout') {\n        this.collapsed = this.collapsible\n      }\n    }\n\n    // If focus is inside the sidenav expand the sidenav.\n    if (this.expandTrigger === 'mouseenter' && isFocusInSidenav) {\n      this.collapsed = false\n    }\n\n    // If the sidenav is closable, trap the focus.\n    // Do not trap the focus as long as the sidenav is not closable or not open.\n    if (!this.closable || !this.open) return\n\n    // Do not trap the focus if the trap focus prop is not set.\n    if (this.trapFocus === undefined) return\n\n    // Do not trap the focus as long as the focus remains within the sidenav.\n    if (isFocusInSidenav) return\n\n    // Do not trap the focus when it moves to an element which matches\n    // the trap focus selector or no element will be focused.\n    const isFocusInKeepFocusable =\n      this.trapFocus !== '' &&\n      (!relatedTarget || relatedTarget?.matches(this.trapFocus))\n    if (isFocusInKeepFocusable) return\n\n    // Loop the focus between the ld-sidenav and the elements matching\n    // the trap focus selector.\n    const target = ev.target as HTMLElement\n    const isLeavingSidenav = target.closest('ld-sidenav') === this.el\n    const isLeavingFocusSelectorElement =\n      this.trapFocus !== '' && !!target.closest(this.trapFocus)\n\n    if (!isLeavingSidenav && !isLeavingFocusSelectorElement) return\n\n    const firstFocusableInSidenav = getFirstFocusable(this.el)\n    const trapFocusSelectorElements =\n      this.trapFocus === ''\n        ? [firstFocusableInSidenav]\n        : Array.from(document.querySelectorAll<HTMLElement>(this.trapFocus))\n    const firstFocusableFromSelectorElements =\n      trapFocusSelectorElements.find(getFirstFocusable)\n    const isLeavingFirstFocusableInSidenav = firstFocusableInSidenav === target\n    const isLeavingFirstFocusableFromSelectorElements =\n      firstFocusableFromSelectorElements === target\n    const lastFocusableInSidenav = Array.from(\n      this.el.querySelectorAll<HTMLElement>('*')\n    )\n      .reverse()\n      .find(getFirstFocusable)\n    const lastFocusableFromSelectorElements = trapFocusSelectorElements\n      .reverse()\n      .find(getFirstFocusable)\n    const nextFocused = isLeavingSidenav\n      ? isLeavingFirstFocusableInSidenav\n        ? lastFocusableFromSelectorElements\n        : firstFocusableFromSelectorElements\n      : isLeavingFirstFocusableFromSelectorElements\n      ? lastFocusableInSidenav\n      : firstFocusableInSidenav\n\n    if (!nextFocused) return\n\n    if ('focusInner' in nextFocused) {\n      await (nextFocused as unknown as InnerFocusable).focusInner()\n    } else {\n      nextFocused?.focus()\n    }\n  }\n\n  @Listen('ldSidenavHeaderToggleClick')\n  handleHeaderToggleClick() {\n    this.toggle()\n  }\n\n  private toFocus: HTMLElement = undefined\n  private focusTimeout = undefined\n  private updateFocus = () => {\n    // HACK: Using recursive call with timeout to account for fast user interactions during transitions.\n    clearTimeout(this.focusTimeout)\n    if (this.toFocus) {\n      if (\n        this.toFocus.tabIndex === -1 ||\n        window.getComputedStyle(this.toFocus).visibility === 'hidden'\n      ) {\n        this.focusTimeout = setTimeout(this.updateFocus, 10)\n        return\n      }\n      this.toFocus.focus()\n      this.toFocus = undefined\n    }\n  }\n\n  private toggleCollapsedState = () => {\n    this.collapsed = !this.collapsed\n  }\n\n  private activeSubnavContainsIconsOrHasBack = () => {\n    // Return true if we have a back button or a nav items as a direct child.\n    const children = Array.from(this.el.children)\n    const hasBack = children.some(\n      (child) => child.tagName === 'LD-SIDENAV-BACK'\n    )\n    const hasPrimaryChild = children.some(\n      (child) =>\n        child.tagName === 'LD-SIDENAV-NAVITEM' &&\n        !['secondary', 'tertiary'].includes(\n          (child as HTMLLdSidenavNavitemElement).mode\n        )\n    )\n    if (hasBack || hasPrimaryChild) {\n      return true\n    }\n\n    // Otherwise, check if the current subnav contains a nav item.\n    const slider = this.el.querySelector('ld-sidenav-slider')\n    const activeSubnav = slider.currentSubnav\n      ? this.el.querySelector(`#${slider.currentSubnav}`)\n      : slider\n    const navitemsModePrimaryChildren = Array.from(\n      activeSubnav.children\n    ).filter(\n      (child) =>\n        child.tagName === 'LD-SIDENAV-NAVITEM' &&\n        (child as HTMLLdSidenavNavitemElement).mode === 'primary'\n    )\n    const navitemsModePrimaryInAccordion = Array.from(\n      activeSubnav.querySelectorAll(\n        'ld-sidenav-accordion > ld-sidenav-navitem[slot=\"toggle\"]'\n      )\n    ).filter(\n      (child: HTMLLdSidenavNavitemElement) =>\n        (child as HTMLLdSidenavNavitemElement).mode === 'primary'\n    )\n    const totalNavitemsModePrimary =\n      navitemsModePrimaryChildren.length + navitemsModePrimaryInAccordion.length\n    return !!totalNavitemsModePrimary\n  }\n\n  private isToggleOutside = (\n    element?: Element\n  ): element is HTMLLdSidenavToggleOutsideElement =>\n    element?.tagName === 'LD-SIDENAV-TOGGLE-OUTSIDE'\n\n  private onTransitionEnd = (ev: TransitionEvent) => {\n    if (ev.target === this.el) {\n      this.transitions = true\n\n      // If the sidenav was fully collapsed and is being expanded, set the focus\n      // on the first focusable element. If it is being collapsed and has focus inside,\n      // set the focus on the toggle outside if it is there.\n      if (this.fullyCollapsible) {\n        if (!this.collapsed) {\n          const firstFocusableInSidenav = getFirstFocusable(this.el)\n          firstFocusableInSidenav.focus()\n        } else if (document.activeElement.closest('ld-sidenav') === this.el) {\n          const previousElementSibling = this.el.previousElementSibling\n          if (this.isToggleOutside(previousElementSibling)) {\n            previousElementSibling.focusInner()\n          }\n        }\n      }\n    }\n  }\n\n  private onMatchMediaChange = (ev: MediaQueryListEvent) => {\n    this.closable = ev.matches\n\n    // Remove transitions class on breakpoint change in order to prevent\n    // weird looking transitions on screen resize or orientation change events.\n    // Add it back on transition end / after style changes have been applied.\n    this.transitions = false\n\n    // When there is less space available than before the breakpoint change,\n    // collapse the side nav if it is collapsible.\n    if (this.closable && this.collapsible) this.collapsed = true\n\n    this.ldSidenavBreakpointChange.emit(this.closable)\n  }\n\n  componentWillLoad() {\n    this.mediaQuery = window.matchMedia(`(max-width: ${this.breakpoint})`)\n    this.mediaQuery.addEventListener('change', this.onMatchMediaChange)\n    this.closable = this.mediaQuery.matches\n    this.updateFullyCollapsible()\n  }\n\n  componentDidLoad() {\n    this.ldSidenavCollapsedChange.emit({\n      collapsed: this.collapsible && this.collapsed,\n      fully: this.fullyCollapsible,\n    })\n    this.ldSidenavOpenChange.emit(this.open)\n    this.ldSidenavBreakpointChange.emit(this.closable)\n\n    setTimeout(() => {\n      this.transitions = true\n    })\n  }\n\n  disconnectedCallback() {\n    this.mediaQuery?.removeEventListener('change', this.onMatchMediaChange)\n  }\n\n  render() {\n    const cl = [\n      'ld-sidenav',\n      this.align === 'right' && 'ld-sidenav--right',\n      this.transitions && 'ld-sidenav--transitions',\n      this.closable && 'ld-sidenav--closable',\n      this.collapsible && this.collapsed && 'ld-sidenav--collapsed',\n      this.collapsible && 'ld-sidenav--collapsible',\n      this.fullyCollapsible && 'ld-sidenav--fully-collapsible',\n      this.hasActiveSubnav && 'ld-sidenav--has-active-subnav',\n      this.hasShadowTop && 'ld-sidenav--has-shadow-top',\n      this.hasShadowBottom && 'ld-sidenav--has-shadow-bottom',\n      this.open && 'ld-sidenav--open',\n      this.toggleTransitionDisabled && 'ld-sidenav--toggle-transition-disabled',\n    ]\n\n    return (\n      <Host\n        onTransitionEnd={this.onTransitionEnd}\n        class={getClassNames(cl)}\n        role=\"navigation\"\n        aria-label={this.label}\n      >\n        <slot name=\"header\"></slot>\n        <div class=\"ld-sidenav__content\">\n          <div class=\"ld-sidenav__slot-container-top\" part=\"slot-container-top\">\n            <slot name=\"top\"></slot>\n          </div>\n          <ld-sidenav-scroller-internal\n            class=\"ld-sidenav__scroller\"\n            part=\"scroll-container\"\n          >\n            <div\n              class=\"ld-sidenav__slot-container-default\"\n              part=\"slot-container\"\n            >\n              <slot></slot>\n            </div>\n          </ld-sidenav-scroller-internal>\n          <div\n            class=\"ld-sidenav__slot-container-bottom\"\n            part=\"slot-container-bottom\"\n          >\n            <slot name=\"bottom\"></slot>\n          </div>\n        </div>\n        <div\n          onClick={this.toggle.bind(this)}\n          class=\"ld-sidenav__fully-collapsed-click-area\"\n        ></div>\n      </Host>\n    )\n  }\n}\n"],"mappings":"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"}