{"version":3,"names":["ldContextMenuShadowCss","LdContextMenuStyle0","LdContextMenu","this","resetFocus","async","trigger","triggerSlotRef","assignedElements","isInnerFocusable","focusInner","isHtmlElement","focus","focusFirstMenuitem","menuInTooltip","firstMenuItem","getFirstMenuItem","handleKeyDown","event","key","preventDefault","tooltipRef","hideTooltip","handleMenuOpen","tooltip","getTooltip","querySelector","initialized","addEventListener","ldcontextmenuopen","emit","handleMenuClose","ldcontextmenuclose","showContextMenu","showTooltip","hideContextMenu","updateSize","size","menuRef","setAttribute","removeAttribute","componentDidLoad","style","el","getAttribute","forEach","element","ariaHasPopup","render","h","onLdtooltipclose","onLdtooltipopen","ref","rightClick","part","position","preventScreenreader","tag","tetherOptions","triggerType","unstyled","name","slot","ldMenuitemCss","LdMenuitemStyle0","modeMap","Map","LdMenuitem","handleClick","ev","preventClose","ldclosetooltip","_a","buttonRef","componentWillLoad","attributesObserver","cloneAttributes","call","disconnectedCallback","disconnect","Host","class","role","Object","assign","clonedAttributes","disabled","href","iconOnly","justifyContent","ldTabindex","mode","get","onClick","target","type"],"sources":["../src/liquid/components/ld-context-menu/ld-context-menu.shadow.css?tag=ld-context-menu&encapsulation=shadow","../src/liquid/components/ld-context-menu/ld-context-menu.tsx","../src/liquid/components/ld-context-menu/ld-menuitem/ld-menuitem.css?tag=ld-menuitem&encapsulation=shadow","../src/liquid/components/ld-context-menu/ld-menuitem/ld-menuitem.tsx"],"sourcesContent":[":host {\n  display: inline-flex;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { isHtmlElement } from '../../utils/type-checking'\nimport { isInnerFocusable } from '../../utils/focus'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part menu - `ld-menu` element wrapping the default slot\n * @part tooltip - `ld-tooltip` element\n */\n@Component({\n  tag: 'ld-context-menu',\n  styleUrl: 'ld-context-menu.shadow.css',\n  shadow: true,\n})\nexport class LdContextMenu {\n  @Element() el: HTMLLdContextMenuElement\n  private menuRef: HTMLLdMenuElement\n  private tooltipRef: HTMLLdTooltipElement\n  private triggerSlotRef: HTMLSlotElement\n\n  /** Position of the context menu relative to the trigger element. */\n  @Prop() position?: HTMLLdTooltipElement['position'] = 'bottom left'\n\n  /** Use right-click. */\n  @Prop() rightClick? = false\n\n  /** Size of the context menu. */\n  @Prop() size?: 'sm' | 'lg'\n\n  /** Tether options object to be merged with the default options (optionally stringified). */\n  @Prop() tetherOptions?: Partial<Tether.ITetherOptions> | string\n\n  @State() initialized = false\n\n  private resetFocus = async () => {\n    const [trigger] = this.triggerSlotRef.assignedElements()\n\n    if (isInnerFocusable(trigger)) {\n      await trigger.focusInner()\n      return\n    }\n\n    if (isHtmlElement(trigger)) {\n      trigger.focus()\n    }\n  }\n\n  private focusFirstMenuitem = async (menuInTooltip: HTMLLdMenuElement) => {\n    const firstMenuItem = await menuInTooltip.getFirstMenuItem()\n\n    if (!firstMenuItem) {\n      return\n    }\n\n    await firstMenuItem.focusInner()\n  }\n\n  private handleKeyDown = async (event: KeyboardEvent) => {\n    switch (event.key) {\n      case 'Escape':\n        event.preventDefault()\n        await this.tooltipRef.hideTooltip()\n        break\n      case 'Tab':\n        event.preventDefault()\n    }\n  }\n\n  private handleMenuOpen = async () => {\n    const tooltip = await this.tooltipRef.getTooltip()\n    const menuInTooltip = tooltip.querySelector('ld-menu')\n\n    if (!this.initialized) {\n      menuInTooltip.addEventListener('keydown', this.handleKeyDown)\n      this.initialized = true\n    }\n\n    this.focusFirstMenuitem(menuInTooltip)\n    this.ldcontextmenuopen.emit()\n  }\n\n  private handleMenuClose = () => {\n    this.resetFocus()\n    this.ldcontextmenuclose.emit()\n  }\n\n  /** Emitted when the context menu is opened. */\n  @Event() ldcontextmenuopen: EventEmitter\n\n  /** Emitted when the context menu is closed. */\n  @Event() ldcontextmenuclose: EventEmitter\n\n  /** Show context menu */\n  @Method()\n  async showContextMenu() {\n    await this.tooltipRef.showTooltip()\n  }\n\n  /** Hide context menu */\n  @Method()\n  async hideContextMenu() {\n    await this.tooltipRef.hideTooltip()\n  }\n\n  @Watch('size')\n  private updateSize() {\n    if (this.size) {\n      this.menuRef.setAttribute('size', this.size)\n    } else {\n      this.menuRef.removeAttribute('size')\n    }\n  }\n\n  componentDidLoad() {\n    const style = this.el.getAttribute('style')\n\n    this.updateSize()\n\n    if (style) {\n      this.menuRef.setAttribute('style', style)\n      this.el.removeAttribute('style')\n    }\n\n    this.triggerSlotRef\n      .assignedElements()\n      .forEach((element) => (element.ariaHasPopup = 'menu'))\n  }\n\n  render() {\n    return (\n      <ld-tooltip\n        onLdtooltipclose={this.handleMenuClose}\n        onLdtooltipopen={this.handleMenuOpen}\n        ref={(element: HTMLLdTooltipElement) => (this.tooltipRef = element)}\n        rightClick={this.rightClick}\n        part=\"tooltip\"\n        position={this.position}\n        preventScreenreader\n        tag=\"span\"\n        tetherOptions={this.tetherOptions}\n        triggerType=\"click\"\n        unstyled\n      >\n        <slot\n          name=\"trigger\"\n          ref={(element: HTMLSlotElement) => (this.triggerSlotRef = element)}\n          slot=\"trigger\"\n        />\n        <ld-menu\n          part=\"menu\"\n          ref={(el: HTMLLdMenuElement) => (this.menuRef = el)}\n        >\n          <slot />\n        </ld-menu>\n      </ld-tooltip>\n    )\n  }\n}\n",":host {\n  display: block;\n}\n\n.ld-menuitem .ld-menuitem__button {\n  display: grid;\n  width: 100%;\n}\n","import {\n  Component,\n  Element,\n  Host,\n  h,\n  Prop,\n  State,\n  Method,\n  Event,\n  EventEmitter,\n} from '@stencil/core'\nimport { cloneAttributes } from '../../../utils/cloneAttributes'\n\ntype Mode = 'highlight' | 'danger' | 'neutral'\n\nconst modeMap = new Map<Mode, string>([\n  ['danger', 'danger-ghost'],\n  ['highlight', 'ghost'],\n  ['neutral', 'neutral-ghost'],\n])\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part listitem - `li` element wrapping the `ld-button` element\n * @part button - `ld-button` element wrapping the default slot\n */\n@Component({\n  tag: 'ld-menuitem',\n  styleUrl: 'ld-menuitem.css',\n  shadow: true,\n})\nexport class LdMenuitem implements InnerFocusable {\n  @Element() el: HTMLLdMenuitemElement\n  private attributesObserver: MutationObserver\n  private buttonRef?: HTMLLdButtonElement\n\n  /** Disabled state of the menu item. */\n  @Prop() disabled?: boolean\n\n  /**\n   * Transforms the menu item to an anchor element.\n   * See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href)\n   * for more information on the `href` attribute.\n   */\n  @Prop() href?: HTMLLdButtonElement['href']\n\n  /** Tab index of the menu item. */\n  @Prop() ldTabindex?: number\n\n  /** Prevent closing of the context menu on click. */\n  @Prop() preventClose?: boolean\n\n  /** Display mode. */\n  @Prop() mode?: Mode = 'neutral'\n\n  /**\n   * Size of the menu item.\n   * @internal\n   */\n  @Prop() size?: 'sm' | 'lg'\n\n  /**\n   * The `target` attributed can be used in conjunction with the `href` attribute.\n   * See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)\n   * for more information on the `target` attribute.\n   */\n  @Prop() target?: HTMLLdButtonElement['target']\n\n  @State() clonedAttributes: Record<string, string>\n\n  /** Sets focus on the anchor or button */\n  @Method()\n  async focusInner() {\n    this.buttonRef?.focusInner()\n  }\n\n  /**\n   * @internal\n   * Emitted on menu item click if preventClose prop is not truethy.\n   */\n  @Event() ldclosetooltip: EventEmitter\n\n  private handleClick = (ev: MouseEvent) => {\n    if (this.preventClose) return\n    this.ldclosetooltip.emit(ev)\n  }\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, [\n      'ld-tabindex',\n      'mode',\n      'size',\n    ])\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.attributesObserver) this.attributesObserver.disconnect()\n  }\n\n  render() {\n    return (\n      <Host>\n        <li class=\"ld-menuitem\" part=\"listitem\" role=\"menuitem\">\n          <ld-button\n            {...this.clonedAttributes}\n            class=\"ld-menuitem__button\"\n            disabled={this.disabled}\n            href={this.href}\n            iconOnly={false}\n            justifyContent=\"start\"\n            ldTabindex={this.ldTabindex}\n            mode={modeMap.get(this.mode)}\n            onClick={this.handleClick}\n            part=\"focusable button\"\n            ref={(element) => (this.buttonRef = element)}\n            size={this.size}\n            target={this.target}\n            type=\"button\"\n          >\n            <slot></slot>\n          </ld-button>\n        </li>\n      </Host>\n    )\n  }\n}\n"],"mappings":"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"}