{"version":3,"names":["getScrollParent","element","includeHidden","style","getComputedStyle","position","document","scrollingElement","excludeStaticParent","overflowRegex","parent","parentElement","test","overflow","overflowY","overflowX","ldAccordionShadowCss","LdAccordionStyle0","LdAccordion","this","scrollIntoViewOnTransitionEnd","scrollIntoView","section","scrollParent","toggle","querySelector","panel","allSections","Array","from","children","singleModeDelta","single","_a","slice","findIndex","sec","find","classList","contains","scrollHeight","panelOffsetToScrollParent","scrollTop","getBoundingClientRect","top","Math","max","scrollPaddingTop","parseFloat","window","targetOffsetBottom","min","clientHeight","el","closest","prefersReducedMotion","matchMedia","matches","scrollTo","behavior","focusToggle","currentToggle","dir","toggleToFocus","previousElementSibling","nextElementSibling","focusInner","onKeydown","ev","target","tagName","key","preventDefault","onTransitionEnd","expanded","handleAccordionExpandChange","siblings","filter","forEach","detail","render","cl","getClassNames","detached","brandColor","tone","rounded","h","Host","class","ldAccordionPanelShadowCss","LdAccordionPanelStyle0","LdAccordionPanel","applyMaxHeight","additionalHeightFromInnerPanel","innerPanelExpanding","ldaccordionmaxheightchange","emit","maxHeight","handleInnerMaxHeightChange","stopImmediatePropagation","setExpanded","componentDidLoad","setTimeout","resizeObserver","ResizeObserver","observe","contentRef","initialized","disconnectedCallback","unobserve","onLdaccordionmaxheightchange","part","ref","ldAccordionSectionShadowCss","LdAccordionSectionStyle0","LdAccordionSection","updateExpandedState","newExpanded","child","ldaccordionchange","handleToggleClick","composedPath","at","componentWillLoad","onLdaccordiontoggleclick","bind","ldAccordionToggleShadowCss","LdAccordionToggleStyle0","LdAccordionToggle","disabled","ldaccordiontoggleclick","handleLabelClick","ldaccordionlabelclick","btnRef","focus","preventScroll","hasCustomIcon","split","toggleTriggerContent","name","size","toggleTrigger","undefined","toggleLabel","onClick","ToggleLabelTag","labelTag","toggleContent","tabindex","ldTabindex"],"sources":["../src/liquid/utils/scroll.ts","../src/liquid/components/ld-accordion/ld-accordion.shadow.css?tag=ld-accordion&encapsulation=shadow","../src/liquid/components/ld-accordion/ld-accordion.tsx","../src/liquid/components/ld-accordion/ld-accordion-panel/ld-accordion-panel.shadow.css?tag=ld-accordion-panel&encapsulation=shadow","../src/liquid/components/ld-accordion/ld-accordion-panel/ld-accordion-panel.tsx","../src/liquid/components/ld-accordion/ld-accordion-section/ld-accordion-section.shadow.css?tag=ld-accordion-section&encapsulation=shadow","../src/liquid/components/ld-accordion/ld-accordion-section/ld-accordion-section.tsx","../src/liquid/components/ld-accordion/ld-accordion-toggle/ld-accordion-toggle.shadow.css?tag=ld-accordion-toggle&encapsulation=shadow","../src/liquid/components/ld-accordion/ld-accordion-toggle/ld-accordion-toggle.tsx"],"sourcesContent":["/**\n * Returns the scroll parent (the first scrollable ancestor of a given element).\n * This is a vanilla JS port of the jQuery UI scrollParent method:\n * https://github.com/jquery/jquery-ui/blob/main/ui/scroll-parent.js\n */\nexport function getScrollParent(element: HTMLElement, includeHidden?: boolean) {\n  let style = getComputedStyle(element)\n  if (style.position === 'fixed') {\n    return document.scrollingElement\n  }\n\n  const excludeStaticParent = style.position === 'absolute'\n  const overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/\n\n  // Using for loop instead of recursion in order to save memory.\n  for (let parent = element; (parent = parent.parentElement); ) {\n    style = getComputedStyle(parent)\n    if (excludeStaticParent && style.position === 'static') {\n      continue\n    }\n    if (\n      overflowRegex.test(style.overflow + style.overflowY + style.overflowX)\n    ) {\n      return parent\n    }\n  }\n\n  return document.scrollingElement\n}\n",":host {\n  /* colors */\n  --ld-accordion-col: var(--ld-col-neutral-900);\n  --ld-accordion-col-disabled: var(--ld-col-neutral-100);\n  --ld-accordion-col-hover: var(--ld-col-neutral-900);\n  --ld-accordion-col-focus: var(--ld-col-neutral-900);\n  --ld-accordion-bg-col: var(--ld-col-wht);\n  --ld-accordion-bg-col-active: var(--ld-col-wht);\n  --ld-accordion-bg-col-disabled: var(--ld-col-neutral-100);\n  --ld-accordion-bg-col-focus: var(--ld-col-neutral-100);\n  --ld-accordion-bg-col-hover: var(--ld-col-neutral-050);\n  --ld-accordion-trigger-icon-col-disabled: var(--ld-col-neutral-100);\n\n  /* themable colors */\n  --ld-accordion-col-active: var(--ld-thm-primary);\n  --ld-accordion-col-selected: var(--ld-thm-primary);\n  --ld-accordion-toggle-col: inherit;\n  --ld-accordion-toggle-indicator-bg-col: transparent;\n  --ld-accordion-toggle-trigger-col: var(--ld-thm-primary);\n  --ld-accordion-trigger-icon-col: var(--ld-thm-primary);\n  --ld-accordion-trigger-icon-col-hover: var(--ld-thm-primary-hover);\n  --ld-accordion-trigger-icon-col-focus: var(--ld-thm-primary-focus);\n  --ld-accordion-trigger-icon-col-active: var(--ld-thm-primary-active);\n  --ld-accordion-toggle-expanded-col: var(--ld-thm-primary);\n\n  /* layout */\n  --ld-accordion-padding-y: 0.45rem;\n  --ld-accordion-padding-x: 1.25rem;\n  --ld-accordion-toggle-size: 2.5rem;\n  --ld-accordion-toggle-line-height: 180%;\n  --ld-accordion-border-radius-size: 0;\n  --ld-accordion-border-radius: var(--ld-accordion-border-radius-size);\n  --ld-accordion-gap: var(--ld-sp-2);\n  --ld-accordion-gap-col: var(--ld-accordion-panel-border-top-col);\n  --ld-accordion-panel-border-top-col: var(--ld-col-neutral-010);\n\n  &(:where(.ld-accordion)) {\n    color-scheme: var(--ld-accordion-color-scheme, none);\n    display: block;\n    flex-grow: 1;\n  }\n\n  &(.ld-accordion--rounded) {\n    --ld-accordion-border-radius-size: var(--ld-br-m);\n  }\n\n  &(.ld-accordion--dark) {\n    --ld-accordion-bg-col: var(--ld-col-neutral-010);\n    --ld-accordion-bg-col-active: var(--ld-col-neutral-010);\n    --ld-accordion-panel-border-top-col: var(--ld-col-neutral-050);\n  }\n\n  &(.ld-accordion--brand-color) {\n    --ld-accordion-bg-col-hover: var(--ld-thm-primary-alpha-lowest);\n    --ld-accordion-bg-col-focus: var(--ld-thm-primary-alpha-low);\n  }\n\n  &(.ld-accordion--detached) {\n    --ld-accordion-gap: var(--ld-sp-8);\n    --ld-accordion-gap-col: transparent;\n  }\n\n  &(.ld-accordion:not(.ld-accordion--detached)) {\n    ::slotted(ld-accordion-section) {\n      --ld-accordion-border-radius: 0;\n    }\n    ::slotted(ld-accordion-section:first-of-type) {\n      --ld-accordion-border-radius: var(--ld-accordion-border-radius-size)\n        var(--ld-accordion-border-radius-size) 0 0;\n    }\n    ::slotted(ld-accordion-section:last-of-type) {\n      --ld-accordion-border-radius: 0 0 var(--ld-accordion-border-radius-size)\n        var(--ld-accordion-border-radius-size);\n    }\n  }\n\n  ::slotted(ld-accordion-section:not(:first-of-type)) {\n    border-top: solid var(--ld-accordion-gap) var(--ld-accordion-gap-col);\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { getScrollParent } from '../../utils/scroll'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-accordion',\n  styleUrl: 'ld-accordion.shadow.css',\n  shadow: true,\n})\nexport class LdAccordion {\n  @Element() el: HTMLElement\n\n  private scrollIntoViewOnTransitionEnd = false\n\n  // `onBrandColor` is not possible, as Stencil expects `on*` props to be events.\n  /** Style the accordion so that it looks good on the primary color of the current theme. */\n  @Prop() brandColor?: boolean\n\n  /** Sets a small gap between each accordion section. */\n  @Prop() detached? = false\n\n  /** Applies rounded corners. */\n  @Prop() rounded? = false\n\n  /** When set to true, an open accordion element closes, if anthorer one opens. */\n  @Prop() single? = false\n\n  /**\n   * Use `'dark'` on white backgrounds. Default is a light tone.\n   * Takes only effect in conjunction with neutral mode.\n   */\n  @Prop() tone?: 'dark'\n\n  // The following event is not used within the ld-accordion component itself.\n  // Its only purpose is to create a type definition on the ld-accordion component,\n  // in order to be able to add an inline listener in TSX, for listening\n  // on the event bubling up from ld-accordion-section components.\n  /** Emitted on expansion and collapse of an accordion section element. */\n  @Event() ldaccordionchange: EventEmitter<boolean>\n\n  @Listen('ldaccordionchange', { passive: true })\n  handleAccordionExpandChange(ev) {\n    if (ev.target.tagName !== 'LD-ACCORDION-SECTION') return\n\n    // In single mode, close sibling sections of open section.\n    if (this.single && ev.target.expanded) {\n      const siblings = [...ev.target.parentElement.children].filter(\n        (section) => section !== ev.target\n      )\n      siblings.forEach((section) => {\n        section.expanded = false\n      })\n    }\n\n    if (ev.detail /* expanded */) {\n      this.scrollIntoView(ev.target)\n    }\n  }\n\n  private scrollIntoView = (section: HTMLLdAccordionSectionElement) => {\n    const scrollParent = getScrollParent(section)\n\n    const toggle = section.querySelector('ld-accordion-toggle')\n    const panel = section.querySelector('ld-accordion-panel')\n\n    // singleModeDelta is the height of the currently open panel, that needs\n    // to be subtracted from the scroll amount in single mode.\n    const allSections = Array.from(section.parentElement.children)\n    const singleModeDelta =\n      this.single && !this.scrollIntoViewOnTransitionEnd\n        ? allSections\n            .slice(\n              0,\n              allSections.findIndex((sec) => sec === section)\n            )\n            .find((sec) =>\n              sec.classList.contains('ld-accordion-section--expanded')\n            )?.children[1].scrollHeight || 0\n        : 0\n\n    const panelOffsetToScrollParent =\n      scrollParent.scrollTop +\n      panel.getBoundingClientRect().top -\n      Math.max(0, scrollParent.getBoundingClientRect().top)\n\n    const scrollPaddingTop =\n      parseFloat(window.getComputedStyle(scrollParent)['scrollPaddingTop']) || 0\n\n    // targetOffsetBottom is the distance from the scrollParent top to the\n    // bottom of the section that is being expanded in its expanded state.\n    const targetOffsetBottom =\n      panelOffsetToScrollParent +\n      Math.min(\n        panel.scrollHeight,\n        scrollParent.clientHeight - toggle.clientHeight - scrollPaddingTop\n      ) -\n      singleModeDelta\n\n    // If an accordion section expands at the bottom end of the accordion\n    // The scroll container may not have a sufficient height at that time\n    // in order to be scrollable to the target offset. In this case we\n    // postpone the scrolling to the transition end event.\n    if (\n      !this.scrollIntoViewOnTransitionEnd &&\n      scrollParent.scrollHeight < targetOffsetBottom\n    ) {\n      this.scrollIntoViewOnTransitionEnd = true\n      return\n    }\n\n    if (\n      !this.el.closest('ld-accordion-panel') &&\n      scrollParent.clientHeight + scrollParent.scrollTop < targetOffsetBottom\n    ) {\n      const prefersReducedMotion = window.matchMedia(\n        '(prefers-reduced-motion: reduce)'\n      ).matches\n\n      scrollParent.scrollTo({\n        top: targetOffsetBottom - scrollParent.clientHeight,\n        behavior: prefersReducedMotion ? 'auto' : 'smooth',\n      })\n    }\n  }\n\n  private focusToggle = (\n    currentToggle: HTMLLdAccordionToggleElement,\n    dir: 'prev' | 'next'\n  ) => {\n    const toggleToFocus = (\n      dir === 'prev'\n        ? currentToggle.parentElement.previousElementSibling\n        : currentToggle.parentElement.nextElementSibling\n    )?.querySelector('ld-accordion-toggle')\n    if (toggleToFocus) {\n      toggleToFocus.focusInner()\n    }\n  }\n\n  private onKeydown = (ev) => {\n    if (ev.target.tagName !== 'LD-ACCORDION-TOGGLE') {\n      return\n    }\n\n    switch (ev.key) {\n      case 'ArrowUp': {\n        ev.preventDefault()\n        this.focusToggle(ev.target, 'prev')\n        return\n      }\n      case 'ArrowDown': {\n        ev.preventDefault()\n        this.focusToggle(ev.target, 'next')\n        return\n      }\n    }\n  }\n\n  private onTransitionEnd = (ev: TransitionEvent) => {\n    const target = ev.target as HTMLElement\n    if (\n      !this.scrollIntoViewOnTransitionEnd ||\n      target.tagName !== 'LD-ACCORDION-PANEL' ||\n      target.closest('ld-accordion') !== this.el ||\n      !target.closest('ld-accordion-section').expanded\n    ) {\n      return\n    }\n\n    this.scrollIntoView(target.closest('ld-accordion-section'))\n    this.scrollIntoViewOnTransitionEnd = false\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-accordion',\n      this.detached && 'ld-accordion--detached',\n      this.brandColor && 'ld-accordion--brand-color',\n      !this.brandColor && this.tone && `ld-accordion--${this.tone}`,\n      this.rounded && 'ld-accordion--rounded',\n    ])\n\n    return (\n      <Host\n        class={cl}\n        onKeydown={this.onKeydown}\n        onTransitionEnd={this.onTransitionEnd}\n      >\n        <slot></slot>\n      </Host>\n    )\n  }\n}\n",":host {\n  /* Not using 0s here because we rely on the transition end event. */\n  --ld-accordion-panel-transition-duration: var(\n    --ld-transition-duration-instant\n  );\n\n  position: relative;\n  display: block;\n  box-sizing: border-box;\n  max-height: var(--ld-accordion-panel-max-height, auto);\n  overflow: hidden;\n  background-color: var(--ld-accordion-bg-col);\n  border-radius: var(--ld-accordion-border-radius);\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  will-change: max-height;\n\n  &(.ld-accordion-panel--initialized) {\n    /* stylelint-disable-next-line plugin/no-low-performance-animation-properties */\n    transition: max-height var(--ld-accordion-panel-transition-duration) ease;\n\n    @media (prefers-reduced-motion: no-preference) {\n      --ld-accordion-panel-transition-duration: var(\n        --ld-transition-duration-normal\n      );\n    }\n  }\n\n  &(.ld-accordion-panel--expanded) {\n    &::before {\n      content: '';\n      height: var(--ld-sp-2);\n      background-color: var(--ld-accordion-panel-border-top-col);\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n    }\n\n    .ld-accordion-panel__content {\n      opacity: 1;\n      visibility: inherit;\n      transition: opacity var(--ld-accordion-panel-transition-duration) linear;\n    }\n  }\n}\n\n.ld-accordion-panel__content {\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity var(--ld-accordion-panel-transition-duration) linear,\n    visibility 0s var(--ld-accordion-panel-transition-duration) linear;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  State,\n} from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-accordion-panel',\n  styleUrl: 'ld-accordion-panel.shadow.css',\n  shadow: true,\n})\nexport class LdAccordionPanel {\n  @Element() el: HTMLElement\n\n  // Container to be observed for size changes.\n  // Note that we can not observe size changes on the element itself,\n  // As with the max-height prop applied to it changes to the content\n  // will not trigger a resize event. Hence, we use a container element.\n  private contentRef: HTMLDivElement\n\n  @State() expanded: boolean\n  @State() initialized = false\n  @State() transitionEnabled = false\n  @State() maxHeight: number\n  @State() resizeObserver: ResizeObserver\n  @State() innerPanelExpanding = false\n\n  /**\n   * @internal\n   * Emitted on accordion panel max-height change.\n   */\n  @Event() ldaccordionmaxheightchange: EventEmitter<number>\n\n  /**\n   * @internal\n   * Updates expanded state.\n   */\n  @Method()\n  async setExpanded(expanded: boolean) {\n    this.expanded = expanded\n\n    this.applyMaxHeight()\n  }\n\n  private applyMaxHeight = (additionalHeightFromInnerPanel = 0) => {\n    if (additionalHeightFromInnerPanel) {\n      this.innerPanelExpanding = true\n    }\n\n    // Apply max-height on outer panel inside nested accordion.\n    if (this.expanded) {\n      this.ldaccordionmaxheightchange.emit(this.el.scrollHeight)\n    }\n\n    this.maxHeight = this.expanded\n      ? this.el.scrollHeight + additionalHeightFromInnerPanel\n      : 0\n  }\n\n  private handleInnerMaxHeightChange = (ev: CustomEvent) => {\n    if (ev.target === this.el) return\n\n    ev.stopImmediatePropagation()\n    this.applyMaxHeight(ev.detail)\n  }\n\n  private onTransitionEnd = (ev: TransitionEvent) => {\n    if (ev.target === this.el) {\n      this.innerPanelExpanding = false\n    }\n  }\n\n  componentDidLoad() {\n    setTimeout(() => {\n      this.resizeObserver = new ResizeObserver(() => {\n        // When a panel is expanding inside a nested accordion, the nested panel\n        // takes over the responsibility for updating the max-height on the outer\n        // panel. In other words: We disable the observer callback function in\n        // order to instantly update the max-height for a better performance.\n        if (!this.innerPanelExpanding) {\n          this.applyMaxHeight()\n        }\n      })\n      this.resizeObserver.observe(this.contentRef)\n      this.initialized = true\n    })\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.resizeObserver) this.resizeObserver.unobserve(this.contentRef)\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-accordion-panel',\n      this.expanded && 'ld-accordion-panel--expanded',\n      this.initialized && 'ld-accordion-panel--initialized',\n    ])\n\n    return (\n      <Host\n        style={{ '--ld-accordion-panel-max-height': this.maxHeight + 'px' }}\n        class={cl}\n        onTransitionEnd={this.onTransitionEnd}\n        onLdaccordionmaxheightchange={this.handleInnerMaxHeightChange}\n      >\n        <div\n          part=\"content\"\n          ref={(ref) => (this.contentRef = ref)}\n          class=\"ld-accordion-panel__content\"\n        >\n          <slot></slot>\n        </div>\n      </Host>\n    )\n  }\n}\n",":host {\n  display: block;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\nimport { closest } from '../../../utils/closest'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-accordion-section',\n  styleUrl: 'ld-accordion-section.shadow.css',\n  shadow: true,\n})\nexport class LdAccordionSection {\n  @Element() el: HTMLElement\n\n  /** Indicates that the accordion section is expanded. */\n  @Prop({ mutable: true }) expanded?: boolean\n\n  @State() initialized = false\n\n  /** Emitted on expansion and collapse. */\n  @Event() ldaccordionchange: EventEmitter<boolean>\n\n  @Watch('expanded')\n  updateExpandedState(newExpanded: boolean) {\n    Array.from(this.el.children).forEach(\n      (child: HTMLLdAccordionPanelElement | HTMLLdAccordionToggleElement) => {\n        if (typeof child.setExpanded === 'function') {\n          child.setExpanded(newExpanded)\n        }\n      }\n    )\n\n    if (this.initialized) {\n      this.ldaccordionchange.emit(newExpanded)\n    }\n  }\n\n  private handleToggleClick(ev) {\n    // closest utility function must be used here for the component\n    // to work in Solid.js app, where ev.target can be an element\n    // within the shadow DOM of the component.\n    // Usage of ev.composedPath() is required for penetrating shadow DOM.\n    const target = 'composedPath' in ev ? ev.composedPath().at(0) : ev.target\n    if (closest('ld-accordion-section', target) !== this.el) {\n      return\n    }\n    this.expanded = !this.expanded\n  }\n\n  componentWillLoad() {\n    this.updateExpandedState(this.expanded)\n    this.initialized = true\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-accordion-section',\n      this.expanded && 'ld-accordion-section--expanded',\n    ])\n\n    return (\n      <Host\n        class={cl}\n        onLdaccordiontoggleclick={this.handleToggleClick.bind(this)}\n      >\n        <slot></slot>\n      </Host>\n    )\n  }\n}\n",":host {\n  border-radius: var(--ld-accordion-border-radius);\n  display: block;\n  position: relative;\n  z-index: 1;\n}\n\n.ld-accordion-toggle__button,\n.ld-accordion-toggle__label,\n.ld-accordion-toggle__trigger {\n  margin: 0;\n  border: 0;\n  box-sizing: border-box;\n  text-align: left;\n  touch-action: manipulation;\n  user-select: none;\n  width: 100%;\n  -webkit-touch-callout: none;\n}\n\n.ld-accordion-toggle__button {\n  background-color: var(--ld-accordion-bg-col);\n  align-items: center;\n  border-radius: inherit;\n  color: var(--ld-accordion-col);\n  display: grid;\n  font: var(--ld-typo-body-m);\n  grid-template-columns: 1fr var(--ld-accordion-toggle-size);\n  direction: var(--ld-accordion-grid-dir);\n  padding: 0;\n  position: relative;\n\n  &[aria-disabled] {\n    color: var(--ld-accordion-col-disabled);\n  }\n\n  :host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) & {\n    &::before {\n      content: '';\n      position: absolute;\n      inset: 0;\n      border-radius: var(--ld-accordion-border-radius);\n      background-color: var(--ld-accordion-toggle-indicator-bg-col);\n    }\n    &:not(\n        [aria-disabled]:not([aria-disabled='']:not([aria-disabled='false']))\n      ) {\n      &:where(:focus:focus-visible) {\n        --ld-accordion-toggle-indicator-bg-col: var(\n          --ld-accordion-bg-col-focus\n        );\n      }\n      @media (hover: hover) {\n        &:where(:hover) {\n          --ld-accordion-toggle-indicator-bg-col: var(\n            --ld-accordion-bg-col-hover\n          );\n        }\n      }\n      &:where(:active),\n      &:where(:active:focus-visible) {\n        --ld-accordion-toggle-indicator-bg-col: var(\n          --ld-accordion-bg-col-active\n        );\n      }\n    }\n  }\n\n  :host(.ld-accordion-toggle--expanded:not(.ld-accordion-toggle--split)) & {\n    &::before {\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  }\n\n  :host(\n      .ld-accordion-toggle:not(\n          .ld-accordion-toggle--split,\n          .ld-accordion-toggle--expanded\n        )\n    )\n    & {\n    &:not(\n        [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n      ) {\n      &:where(:focus:focus-visible) {\n        --ld-accordion-toggle-col: var(--ld-accordion-col-focus);\n      }\n      @media (hover: hover) {\n        &:where(:hover) {\n          --ld-accordion-toggle-col: var(--ld-accordion-col-hover);\n        }\n      }\n      &:where(:active),\n      &:where(:active:focus-visible) {\n        --ld-accordion-toggle-col: var(--ld-accordion-col-active);\n      }\n    }\n  }\n\n  &:not(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    ) {\n    .ld-accordion-toggle__trigger {\n      color: var(--ld-accordion-trigger-icon-col);\n    }\n  }\n}\n\n.ld-accordion-toggle__label,\n.ld-accordion-toggle__trigger {\n  font: inherit;\n  background-color: transparent;\n}\n\nbutton.ld-accordion-toggle__button,\nbutton.ld-accordion-toggle__label,\nbutton.ld-accordion-toggle__trigger {\n  &:not(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    ) {\n    cursor: pointer;\n  }\n}\n\n.ld-accordion-toggle__label {\n  position: relative;\n  padding: var(--ld-accordion-padding-y) var(--ld-accordion-padding-x);\n  border-radius: var(--ld-accordion-border-radius);\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.ld-accordion-toggle__trigger {\n  position: relative;\n  width: var(--ld-accordion-toggle-size);\n  height: var(--ld-accordion-toggle-size);\n  display: grid;\n  place-items: center;\n  border-radius: var(--ld-accordion-border-radius);\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n  overflow: hidden; /* resolves focus outline issue on safari */\n}\n\n.ld-accordion-toggle__label-content,\n.ld-accordion-toggle__trigger-content {\n  position: relative;\n  display: grid;\n  transform: translateX(calc(-1 * var(--ld-sp-1)));\n}\n\n.ld-accordion-toggle__label-content {\n  .ld-accordion-toggle__label:not(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    )\n    & {\n    color: var(--ld-accordion-toggle-col);\n  }\n}\n\n:host(.ld-accordion-toggle--expanded) {\n  --ld-accordion-toggle-col: var(--ld-accordion-toggle-expanded-col);\n\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n\n  .ld-accordion-toggle__trigger-icon {\n    transform: scaleY(-1);\n  }\n}\n\n:host(.ld-accordion-toggle--split) {\n  .ld-accordion-toggle__label,\n  .ld-accordion-toggle__trigger {\n    &::before {\n      content: '';\n      position: absolute;\n      inset: var(--ld-sp-4);\n      left: var(--ld-sp-2);\n      border-radius: var(--ld-br-s);\n    }\n\n    &[aria-disabled] {\n      color: var(--ld-accordion-col-disabled);\n    }\n  }\n\n  .ld-accordion-toggle__label::before {\n    background-color: var(--ld-accordion-toggle-label-indicator-bg-col);\n    transform: translateX(calc(var(--ld-sp-2)));\n  }\n\n  .ld-accordion-toggle__trigger::before {\n    background-color: var(--ld-accordion-toggle-trigger-indicator-bg-col);\n  }\n\n  .ld-accordion-toggle__button:not(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    ) {\n    background-color: var(--ld-accordion-bg-col);\n  }\n\n  .ld-accordion-toggle__label:not(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    ) {\n    &:where(:focus:focus-visible) {\n      --ld-accordion-toggle-label-indicator-bg-col: var(\n        --ld-accordion-bg-col-focus\n      );\n    }\n    @media (hover: hover) {\n      &:where(:hover) {\n        --ld-accordion-toggle-label-indicator-bg-col: var(\n          --ld-accordion-bg-col-hover\n        );\n      }\n    }\n    &:where(:active),\n    &:where(:active:focus-visible) {\n      --ld-accordion-toggle-label-indicator-bg-col: var(\n        --ld-accordion-bg-col-active\n      );\n    }\n  }\n\n  .ld-accordion-toggle__trigger:not(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    ) {\n    &:where(:focus:focus-visible) {\n      --ld-accordion-toggle-trigger-col: var(--ld-accordion-col-focus);\n      --ld-accordion-toggle-trigger-indicator-bg-col: var(\n        --ld-accordion-bg-col-focus\n      );\n    }\n    @media (hover: hover) {\n      &:where(:hover) {\n        --ld-accordion-toggle-trigger-col: var(--ld-accordion-col-hover);\n        --ld-accordion-toggle-trigger-indicator-bg-col: var(\n          --ld-accordion-bg-col-hover\n        );\n      }\n    }\n    &:where(:active),\n    &:where(:active:focus-visible) {\n      --ld-accordion-toggle-trigger-col: var(--ld-accordion-col-active);\n      --ld-accordion-toggle-trigger-indicator-bg-col: var(\n        --ld-accordion-bg-col-active\n      );\n    }\n  }\n}\n\n.ld-accordion-toggle__content {\n  display: contents;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-accordion-toggle',\n  styleUrl: 'ld-accordion-toggle.shadow.css',\n  shadow: true,\n})\nexport class LdAccordionToggle implements InnerFocusable {\n  @Element() el: HTMLElement\n\n  private btnRef: HTMLButtonElement\n\n  /** Disables the toggle. */\n  @Prop() disabled?: boolean\n\n  /**\n   * Tag to be used for the toggle label in split mode.\n   * This prop is especially usefull, if you want to place\n   * your own focusable element inside the toggle label element.\n   */\n  @Prop() labelTag?: 'button' | 'div' = 'button'\n\n  /** Tab index of the toggle. */\n  @Prop() ldTabindex?: number\n\n  /**\n   * Split the toggle in two parts with the second part containing\n   * the caret icon and being responsible for expanding / collapsing\n   * the accordion panel.\n   */\n  @Prop() split?: boolean\n\n  /** Used as aria-label value on the toggle trigger element. */\n  @Prop() toggleLabel? = 'Toggle'\n\n  @State() expanded: boolean\n  @State() hasCustomIcon = false\n\n  /** Focuses the toggle */\n  @Method()\n  async focusInner() {\n    this.btnRef.focus({ preventScroll: true })\n  }\n\n  /**\n   * @internal\n   * Updates expanded state.\n   */\n  @Method()\n  async setExpanded(expanded: boolean) {\n    this.expanded = expanded\n  }\n\n  /** Emitted on click of the accordion toggle trigger. */\n  @Event() ldaccordiontoggleclick: EventEmitter<undefined>\n\n  /** Emitted on click of the accordion toggle label. */\n  @Event() ldaccordionlabelclick: EventEmitter<undefined>\n\n  private handleToggleClick = (ev: MouseEvent) => {\n    ev.preventDefault()\n\n    if (this.disabled) return\n\n    this.ldaccordiontoggleclick.emit()\n  }\n\n  private handleLabelClick = (ev: MouseEvent) => {\n    ev.preventDefault()\n\n    if (this.disabled) return\n\n    this.ldaccordionlabelclick.emit()\n  }\n\n  componentWillLoad() {\n    this.hasCustomIcon = !!this.el.querySelector('[slot=\"icon\"]')\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-accordion-toggle',\n      this.expanded && 'ld-accordion-toggle--expanded',\n      this.split && 'ld-accordion-toggle--split',\n    ])\n\n    const toggleTriggerContent = (\n      <div class=\"ld-accordion-toggle__trigger-content\" part=\"trigger-content\">\n        <slot name=\"icon\"></slot>\n        {!this.hasCustomIcon && (\n          <ld-icon\n            name=\"arrow-down\"\n            size=\"sm\"\n            part=\"trigger-icon\"\n            aria-hidden=\"true\"\n            class=\"ld-accordion-toggle__trigger-icon\"\n          />\n        )}\n      </div>\n    )\n\n    const toggleTrigger = this.split ? (\n      <button\n        part=\"trigger focusable\"\n        class=\"ld-accordion-toggle__trigger\"\n        aria-disabled={this.disabled ? 'true' : undefined}\n        aria-expanded={this.expanded ? 'true' : 'false'}\n        aria-label={this.toggleLabel}\n        onClick={this.handleToggleClick}\n        ref={(el) => (this.btnRef = el as HTMLButtonElement)}\n      >\n        {toggleTriggerContent}\n      </button>\n    ) : (\n      <div part=\"trigger\" class=\"ld-accordion-toggle__trigger\">\n        {toggleTriggerContent}\n      </div>\n    )\n\n    const ToggleLabelTag = this.labelTag\n    const toggleLabel = this.split ? (\n      <ToggleLabelTag\n        part={`label${this.labelTag === 'button' ? ' focusable' : ''}`}\n        aria-disabled={this.disabled ? 'true' : undefined}\n        class=\"ld-accordion-toggle__label\"\n        onClick={this.handleLabelClick}\n      >\n        <div class=\"ld-accordion-toggle__label-content\" part=\"label-content\">\n          <slot />\n        </div>\n      </ToggleLabelTag>\n    ) : (\n      <div part=\"label\" class=\"ld-accordion-toggle__label\">\n        <div class=\"ld-accordion-toggle__label-content\" part=\"label-content\">\n          <slot />\n        </div>\n      </div>\n    )\n\n    const toggleContent = (\n      <div part=\"content\" class=\"ld-accordion-toggle__content\">\n        {toggleLabel}\n        {toggleTrigger}\n      </div>\n    )\n\n    const toggle = this.split ? (\n      <div part=\"toggle\" class=\"ld-accordion-toggle__button\">\n        {toggleContent}\n      </div>\n    ) : (\n      <button\n        aria-disabled={this.disabled ? 'true' : undefined}\n        aria-expanded={this.expanded ? 'true' : 'false'}\n        class=\"ld-accordion-toggle__button\"\n        onClick={this.handleToggleClick}\n        part=\"toggle focusable\"\n        ref={(el) => (this.btnRef = el as HTMLButtonElement)}\n        tabindex={this.ldTabindex}\n      >\n        {toggleContent}\n      </button>\n    )\n\n    return <Host class={cl}>{toggle}</Host>\n  }\n}\n"],"mappings":"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"}