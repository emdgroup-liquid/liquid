{"version":3,"names":["ldTooltipShadowCss","tooltipCount","mapPositionToAttachment","position","mapPositionToTargetAttachment","_a","copySlottedNodes","node","isElement","querySelectorAll","forEach","slot","assignedNodes","childNode","parentElement","insertBefore","remove","LdTooltip","this","idDescriber","isObserverEnabled","syncContent","tooltipContent","contentRef","querySelector","tooltipRef","textContent","appendChild","setTimeout","initTooltip","async","attachment","targetAttachment","customTetherOptions","tetherOptions","JSON","parse","Object","assign","classPrefix","constraints","to","element","target","triggerRef","popper","Tether","enable","showTooltip","toggleTooltip","visible","hideTooltip","handleHideTrigger","triggerType","disabled","clearTimeout","delayTimeout","hideDelay","handleShowTrigger","undefined","showDelay","bind","handleClick","rightClick","handleSlotChange","childNodes","classList","contains","initObserver","observer","MutationObserver","observe","el","subtree","childList","attributes","findFirstSlottedTrigger","triggerInSlot","isSlot","assignedElements","updatePopper","newDisabled","getTooltip","disable","ldtooltipclose","emit","ldtooltipopen","handleContextMenu","ev","preventDefault","handleClickOutside","isTrusted","composedPath","includes","handleContextMenuOutside","handleTouchOutside","handleCloseTooltip","componentWillLoad","hasDefaultTrigger","matches","focusableSelector","isInnerFocusable","triggerTabIndex","addEventListener","componentDidLoad","disconnectedCallback","disconnect","destroy","render","TriggerTag","tag","h","Host","preventScreenreader","class","getClassNames","onClick","onContextMenu","onMouseEnter","onMouseLeave","part","ref","tabIndex","type","name","fill","viewBox","d","arrow","id","unstyled","size","ldTooltipPopperShadowCss","LdTooltipPopper","initialized","role"],"sources":["../src/liquid/components/ld-tooltip/ld-tooltip.shadow.css?tag=ld-tooltip&encapsulation=shadow","../src/liquid/components/ld-tooltip/ld-tooltip.tsx","../src/liquid/components/ld-tooltip/ld-tooltip-popper/ld-tooltip-popper.shadow.css?tag=ld-tooltip-popper&encapsulation=shadow","../src/liquid/components/ld-tooltip/ld-tooltip-popper/ld-tooltip-popper.tsx"],"sourcesContent":[".ld-tooltip__trigger {\n  /* themable colors */\n  --ld-tooltip-trigger-icon-col: var(--ld-thm-primary);\n  --ld-tooltip-trigger-icon-col-hover: var(--ld-thm-primary-hover);\n  --ld-tooltip-trigger-icon-col-focus: var(--ld-thm-primary-focus);\n\n  background: none;\n  border: 0;\n  display: inline-block;\n  font-family: inherit;\n  font-size: inherit;\n  padding: 0;\n  color: inherit;\n\n  &--clickable {\n    cursor: pointer;\n  }\n\n  &:focus:focus-visible .ld-tooltip__icon {\n    color: var(--ld-tooltip-trigger-icon-col-focus);\n  }\n\n  &:hover .ld-tooltip__icon {\n    color: var(--ld-tooltip-trigger-icon-col-hover);\n  }\n\n  ~ .ld-tooltip {\n    opacity: 0;\n    position: absolute;\n    display: none;\n  }\n}\n\n.ld-tooltip__icon {\n  color: var(--ld-tooltip-trigger-icon-col);\n  display: flex;\n  height: var(--ld-sp-16);\n  width: var(--ld-sp-16);\n}\n\n.ld-tooltip__content {\n  display: none;\n}\n","import Tether from 'tether'\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { focusableSelector, isInnerFocusable } from '../../utils/focus'\nimport { isElement, isSlot } from '../../utils/type-checking'\n\nexport type Position =\n  | 'bottom center'\n  | 'bottom left'\n  | 'bottom right'\n  | 'left bottom'\n  | 'left middle'\n  | 'left top'\n  | 'right bottom'\n  | 'right middle'\n  | 'right top'\n  | 'top center'\n  | 'top left'\n  | 'top right'\n\nlet tooltipCount = 0\n\nconst mapPositionToAttachment = (position: Position) => {\n  return {\n    'bottom center': 'top center',\n    'bottom left': 'top left',\n    'bottom right': 'top right',\n    'left bottom': 'bottom right',\n    'left middle': 'middle right',\n    'left top': 'top right',\n    'right bottom': 'bottom left',\n    'right middle': 'middle left',\n    'right top': 'top left',\n    'top center': 'bottom center',\n    'top left': 'bottom left',\n    'top right': 'bottom right',\n  }[position]\n}\n\nconst mapPositionToTargetAttachment = (position: Position) => {\n  return (\n    {\n      'left bottom': 'bottom left',\n      'left middle': 'middle left',\n      'left top': 'top left',\n      'right bottom': 'bottom right',\n      'right middle': 'middle right',\n      'right top': 'top right',\n    }[position] ?? position\n  )\n}\n\nconst copySlottedNodes = (node: Node) => {\n  // text node\n  if (!isElement(node)) {\n    return\n  }\n\n  node.querySelectorAll('slot').forEach((slot) => {\n    slot.assignedNodes().forEach((childNode) => {\n      copySlottedNodes(childNode)\n      slot.parentElement.insertBefore(childNode, slot)\n    })\n    slot.remove()\n  })\n}\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part content - `span` element wrapping the default slot\n * @part icon - Default icon when no trigger is supplied\n * @part trigger - Trigger button\n * @part popper - Popper element (can only be styled as long as tooltip is not initialized)\n */\n@Component({\n  tag: 'ld-tooltip',\n  styleUrl: 'ld-tooltip.shadow.css',\n  shadow: true,\n})\nexport class LdTooltip {\n  @Element() el: HTMLElement\n\n  private contentRef!: HTMLSpanElement\n  private delayTimeout?: NodeJS.Timeout\n  private idDescriber = `ld-tooltip-${++tooltipCount}`\n  private observer: MutationObserver\n  private popper?: Tether\n  private tooltipRef!: HTMLElement\n  private triggerRef!: HTMLSpanElement\n  private isObserverEnabled = true\n\n  /** Show arrow */\n  @Prop() arrow?: boolean\n\n  /** Disable tooltip trigger */\n  @Prop() disabled?: boolean\n\n  /** Delay in ms until tooltip hides (only when trigger type is 'hover') */\n  @Prop() hideDelay? = 0\n\n  /** Position of the tooltip relative to the trigger element (also affects the arrow position) */\n  @Prop() position?: Position = 'top center'\n\n  /**\n   * Do not apply code that triggers screenreaders when tooltip opens.\n   * @internal\n   */\n  @Prop() preventScreenreader? = false\n\n  /**\n   * Use to right-click.\n   * @internal\n   */\n  @Prop() rightClick? = false\n\n  /** Delay in ms until tooltip shows (only when trigger type is 'hover') */\n  @Prop() showDelay? = 0\n\n  /** The tooltip size (effects tooltip padding only) */\n  @Prop() size?: 'sm'\n\n  /**\n   * Render the tooltip without visual styling.\n   * @internal\n   */\n  @Prop() unstyled?: HTMLLdTooltipPopperElement['unstyled']\n\n  /** The rendered HTML tag for the tooltip trigger. */\n  @Prop() tag? = 'button'\n\n  /** Tether options object to be merged with the default options (optionally stringified). */\n  @Prop() tetherOptions?: Partial<Tether.ITetherOptions> | string\n\n  /** Event type that triggers the tooltip */\n  @Prop() triggerType?: 'click' | 'hover' = 'hover'\n\n  /** Emitted when the tooltip is opened. */\n  @Event() ldtooltipopen: EventEmitter\n\n  /** Emitted when the tooltip is closed. */\n  @Event() ldtooltipclose: EventEmitter\n\n  @State() hasDefaultTrigger = true\n  @State() triggerTabIndex?: number\n  @State() visible = false\n\n  @Watch('disabled')\n  updatePopper(newDisabled: boolean) {\n    if (newDisabled) {\n      this.hideTooltip()\n    }\n  }\n\n  private syncContent = () => {\n    this.isObserverEnabled = false\n\n    // Grab the new content in the slot.\n    const tooltipContent = this.contentRef.querySelector('slot').assignedNodes()\n\n    // Delete old content in popper element. Using textContent\n    // is faster than innerHTML as no HTML parsers needs to be\n    // invoked. Instead, this immediately replaces all children\n    // of the tooltip ref with a single #text node.\n    this.tooltipRef.textContent = ''\n\n    // Move original nodes to popper element,\n    // including all event listeners!\n    tooltipContent.forEach((node) => {\n      copySlottedNodes(node)\n      this.tooltipRef.appendChild(node)\n    })\n\n    // The timeout is required. Without the setTimeout,\n    // there is a possibility that the observer could be\n    // re-enabled immediately after the content synchronization\n    // code has been executed, but before the DOM modifications\n    // have been fully processed. This could result in the\n    // observer detecting incomplete or inconsistent changes,\n    // leading to unexpected behavior.\n    setTimeout(() => {\n      this.isObserverEnabled = true\n    })\n  }\n\n  private initTooltip = async () => {\n    const attachment = mapPositionToAttachment(this.position)\n    const targetAttachment = mapPositionToTargetAttachment(this.position)\n\n    const customTetherOptions: Partial<Tether.ITetherOptions> =\n      typeof this.tetherOptions === 'string'\n        ? JSON.parse(this.tetherOptions)\n        : this.tetherOptions\n    const tetherOptions: Tether.ITetherOptions = {\n      attachment,\n      classPrefix: 'ld-tether',\n      constraints: [\n        {\n          attachment: 'together',\n          to: 'window',\n        },\n      ],\n      element: this.tooltipRef,\n      target: this.triggerRef,\n      targetAttachment,\n      ...customTetherOptions,\n    }\n\n    this.popper = new Tether(tetherOptions)\n    // Fixes a tether positioning bug\n    this.popper.enable()\n    this.popper.enable()\n    this.popper.enable()\n    await this.showTooltip()\n  }\n\n  /** Get the `ld-tooltip-popper` element. */\n  @Method()\n  async getTooltip() {\n    return this.tooltipRef\n  }\n\n  /** Hide tooltip */\n  @Method()\n  async hideTooltip() {\n    clearTimeout(this.delayTimeout)\n    this.popper?.disable()\n    this.visible = false\n    this.ldtooltipclose.emit()\n  }\n\n  /** Show tooltip */\n  @Method()\n  async showTooltip() {\n    if (this.disabled) return\n\n    if (!this.popper) {\n      await this.initTooltip()\n      return\n    }\n\n    clearTimeout(this.delayTimeout)\n    this.popper.enable()\n    this.visible = true\n    this.ldtooltipopen.emit()\n  }\n\n  /** @internal */\n  @Method()\n  async handleContextMenu(ev) {\n    if (!this.rightClick || this.disabled) return\n\n    ev.preventDefault()\n    this.toggleTooltip()\n  }\n\n  private toggleTooltip = () => {\n    if (!this.popper) {\n      this.initTooltip()\n      return\n    }\n\n    if (this.visible) {\n      this.hideTooltip()\n    } else {\n      this.showTooltip()\n    }\n  }\n\n  private handleHideTrigger = () => {\n    if (this.triggerType === 'click' || this.disabled) {\n      return\n    }\n\n    clearTimeout(this.delayTimeout)\n\n    if (this.popper) {\n      this.delayTimeout = setTimeout(() => {\n        this.hideTooltip()\n      }, this.hideDelay)\n    }\n  }\n\n  private handleShowTrigger = () => {\n    if (this.triggerType === 'click' || this.disabled) {\n      return\n    }\n\n    clearTimeout(this.delayTimeout)\n\n    if (this.popper === undefined) {\n      this.delayTimeout = setTimeout(this.initTooltip, this.showDelay)\n    } else {\n      this.delayTimeout = setTimeout(\n        this.showTooltip.bind(this),\n        this.showDelay\n      )\n    }\n  }\n\n  private handleClick = () => {\n    if (this.rightClick || this.triggerType === 'hover' || this.disabled) {\n      return\n    }\n\n    this.toggleTooltip()\n  }\n\n  // TODO: maybe this should listen only, if the tooltip was opened by click.\n  @Listen('click', {\n    target: 'window',\n  })\n  handleClickOutside(ev: MouseEvent) {\n    if (\n      this.visible &&\n      this.triggerType === 'click' &&\n      ev.isTrusted &&\n      !ev.composedPath().includes(this.el) &&\n      !ev.composedPath().includes(this.tooltipRef)\n    ) {\n      this.hideTooltip()\n    }\n  }\n\n  // This listener is required for tooltips which open via right click.\n  // It makes sure that tooltips opened via right click get closed again\n  // if another tooltip gets open via right click. Since a right click\n  // is not a left click, the click outside handler, which otherwise would\n  // close the tooltip, is not sufficient.\n  @Listen('ldtooltipopen', {\n    target: 'window',\n  })\n  handleContextMenuOutside(ev: CustomEvent) {\n    if (\n      this.visible &&\n      !ev.composedPath().includes(this.el) &&\n      !ev.composedPath().includes(this.tooltipRef)\n    ) {\n      this.hideTooltip()\n    }\n  }\n\n  // Mobile Safari in some cases does not react to click events on elements\n  // which are not interactive. But it does to touch events.\n  // TODO: maybe this should listen only, if the tooltip was opened by click.\n  @Listen('touchend', {\n    target: 'window',\n    passive: true,\n  })\n  handleTouchOutside(ev) {\n    this.handleClickOutside(ev)\n  }\n\n  @Listen('ldclosetooltip', {\n    target: 'window',\n    passive: true,\n  })\n  handleCloseTooltip(ev) {\n    if (ev.composedPath().includes(this.tooltipRef)) {\n      this.hideTooltip()\n    }\n  }\n\n  private handleSlotChange = () => {\n    if (!this.isObserverEnabled) return\n\n    // Remove all content from the popper element except for the tether-element-marker.\n    this.tooltipRef.childNodes.forEach((node) => {\n      if (\n        isElement(node) &&\n        node.classList.contains('ld-tether-element-marker')\n      ) {\n        return\n      }\n\n      node.remove()\n    })\n\n    // Put all content from the slot in the popper element.\n    this.syncContent()\n  }\n\n  private initObserver = () => {\n    this.observer = new MutationObserver(this.handleSlotChange)\n    this.observer.observe(this.el, {\n      subtree: true,\n      childList: true,\n      attributes: false,\n    })\n  }\n\n  private findFirstSlottedTrigger = () => {\n    let triggerInSlot = this.el.querySelector('[slot=\"trigger\"]')\n\n    while (triggerInSlot && isSlot(triggerInSlot)) {\n      triggerInSlot = triggerInSlot.assignedElements()[0]\n    }\n\n    return triggerInSlot as HTMLElement\n  }\n\n  componentWillLoad() {\n    const triggerInSlot = this.findFirstSlottedTrigger()\n    this.hasDefaultTrigger = !triggerInSlot\n\n    if (\n      triggerInSlot &&\n      (triggerInSlot.matches(focusableSelector) ||\n        isInnerFocusable(triggerInSlot))\n    ) {\n      this.triggerTabIndex = -1\n    }\n\n    this.el.addEventListener('focus', this.handleShowTrigger, true)\n    this.el.addEventListener('blur', this.handleHideTrigger, true)\n  }\n\n  componentDidLoad() {\n    setTimeout(() => {\n      this.syncContent()\n      this.initObserver()\n    })\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.observer) this.observer.disconnect()\n    /* istanbul ignore if */\n    if (this.popper) this.popper.destroy()\n    /* istanbul ignore if */\n    if (this.tooltipRef) this.tooltipRef.remove()\n  }\n\n  render() {\n    const TriggerTag = this.tag\n\n    return (\n      <Host>\n        <TriggerTag\n          aria-describedby={\n            this.preventScreenreader ? undefined : this.idDescriber\n          }\n          class={getClassNames([\n            'ld-tooltip__trigger',\n            this.triggerType === 'click' && 'ld-tooltip__trigger--clickable',\n          ])}\n          onClick={this.handleClick}\n          onContextMenu={this.handleContextMenu.bind(this)}\n          onMouseEnter={this.handleShowTrigger}\n          onMouseLeave={this.handleHideTrigger}\n          part=\"trigger focusable\"\n          ref={(element) => {\n            this.triggerRef = element\n          }}\n          tabIndex={this.triggerTabIndex}\n          type=\"button\"\n        >\n          <ld-sr-only>Info</ld-sr-only>\n          <slot name=\"trigger\">\n            <svg\n              class=\"ld-tooltip__icon\"\n              fill=\"none\"\n              part=\"icon\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                clip-rule=\"evenodd\"\n                d=\"M12 23C18.0751 23 23 18.0751 23 12C23 5.9249 18.0751 1 12 1C5.9249 1 1 5.9249 1 12C1 18.0751 5.9249 23 12 23Z\"\n                fill-rule=\"evenodd\"\n                fill=\"currentColor\"\n              />\n              <path\n                clip-rule=\"evenodd\"\n                d=\"M11.9996 8.6477C12.9254 8.6477 13.6758 7.8973 13.6758 6.9715C13.6758 6.0458 12.9254 5.2953 11.9996 5.2953C11.0739 5.2953 10.3235 6.0458 10.3235 6.9715C10.3235 7.8973 11.0739 8.6477 11.9996 8.6477ZM10.8453 17.8038C11.1932 18.1517 11.6736 18.3256 12.2865 18.3256H13.4545C13.6864 18.3256 13.8023 18.2263 13.8023 18.0275V12.2873C13.8023 11.6744 13.6284 11.1939 13.2805 10.8461C12.9326 10.4982 12.4522 10.3242 11.8393 10.3242H10.6713C10.4394 10.3242 10.3235 10.4236 10.3235 10.6224V16.3626C10.3235 16.9755 10.4974 17.456 10.8453 17.8038Z\"\n                fill-rule=\"evenodd\"\n                // TODO: replace color with icon-specific custom property and use ld-icon\n                fill=\"var(--ld-col-wht)\"\n              />\n            </svg>\n          </slot>\n        </TriggerTag>\n        <span\n          class=\"ld-tooltip__content\"\n          part=\"content\"\n          ref={(element: HTMLSpanElement) => (this.contentRef = element)}\n        >\n          <slot />\n        </span>\n        <ld-tooltip-popper\n          aria-hidden={this.visible ? undefined : 'true'}\n          arrow={this.arrow}\n          hasDefaultTrigger={this.hasDefaultTrigger}\n          id={this.preventScreenreader ? undefined : this.idDescriber}\n          unstyled={this.unstyled}\n          part=\"popper\"\n          ref={(element: HTMLElement) => {\n            this.tooltipRef = element\n          }}\n          rightClick={this.rightClick}\n          size={this.size}\n          triggerType={this.triggerType}\n        />\n      </Host>\n    )\n  }\n}\n","@keyframes ld-tooltip-show {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes ld-tooltip-hide {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ld-tooltip {\n  :host(&) {\n    /* TODO: move to global vars? */\n    --ld-zi-max: 2147483647; /* max z-index */\n\n    --ld-tooltip-animation-duration: 0s;\n    --ld-tooltip-distance-from-trigger: var(--ld-sp-8);\n    --ld-tooltip-max-width: 20rem;\n    /* calculation does not work, if 0 is used instead of 0px */\n    --ld-tooltip-offset-x: 0px;\n    --ld-tooltip-offset-y: 0px;\n\n    --ld-tooltip-padding: var(--ld-sp-16);\n    --ld-tooltip-sm-padding: var(--ld-sp-6) var(--ld-sp-8);\n\n    /* colors */\n    --tooltip-col: var(--ld-col-neutral-900);\n    --tooltip-bg-col: var(--ld-col-wht);\n\n    animation: ld-tooltip-hide 0s ease var(--ld-tooltip-animation-duration);\n    animation-fill-mode: forwards;\n    margin-left: var(--ld-tooltip-offset-x);\n    margin-top: var(--ld-tooltip-offset-y);\n    max-width: var(--ld-tooltip-max-width);\n    opacity: 0;\n    pointer-events: none;\n    position: relative;\n    transition: opacity var(--ld-tooltip-animation-duration) ease-in;\n    z-index: var(--ld-zi-max);\n  }\n\n  &:not(.ld-tooltip--unstyled) {\n    :host(&) {\n      background-color: var(--tooltip-bg-col);\n      border-radius: var(--ld-br-m);\n      color: var(--tooltip-col);\n      filter: var(--ld-drop-shadow-hover);\n      padding: var(--ld-tooltip-padding);\n    }\n  }\n\n  &--initialized {\n    :host(&) {\n      @media (prefers-reduced-motion: no-preference) {\n        --ld-tooltip-animation-duration: var(--ld-transition-duration-normal);\n      }\n    }\n  }\n\n  &--sm {\n    :host(&) {\n      --ld-tooltip-padding: var(--ld-tooltip-sm-padding);\n    }\n  }\n\n  &--with-arrow {\n    :host(&) {\n      --ld-tooltip-arrow-size: 0.5rem;\n      --ld-tooltip-arrow-offset: var(--ld-sp-16);\n      --ld-tooltip-distance-from-trigger: calc(\n        var(--ld-tooltip-arrow-size) + var(--ld-sp-8)\n      );\n    }\n  }\n\n  &--interactive {\n    :host(&) {\n      pointer-events: auto;\n    }\n  }\n\n  &.ld-tether-enabled {\n    :host(&) {\n      animation: ld-tooltip-show var(--ld-tooltip-animation-duration) ease-out;\n      opacity: 1;\n    }\n  }\n\n  &.ld-tether-element-attached-bottom {\n    :host(&) {\n      .ld-tooltip__arrow {\n        bottom: var(--ld-tooltip-arrow-offset);\n      }\n    }\n\n    &.ld-tether-target-attached-top {\n      :host(&) {\n        margin-top: calc(\n          var(--ld-tooltip-distance-from-trigger) * -1 -\n            var(--ld-tooltip-offset-y)\n        );\n\n        .ld-tooltip__arrow {\n          border-top-color: var(--tooltip-bg-col);\n          top: 100%;\n        }\n      }\n    }\n  }\n\n  &.ld-tether-element-attached-center {\n    :host(&) {\n      .ld-tooltip__arrow {\n        left: calc(50% - var(--ld-tooltip-arrow-size));\n      }\n    }\n  }\n\n  &.ld-tether-element-attached-left.ld-tether-target-attached-right {\n    :host(&) {\n      margin-left: calc(\n        var(--ld-tooltip-offset-x) + var(--ld-tooltip-distance-from-trigger)\n      );\n\n      .ld-tooltip__arrow {\n        border-right-color: var(--tooltip-bg-col);\n        right: 100%;\n      }\n    }\n  }\n\n  &.ld-tether-element-attached-middle {\n    :host(&) {\n      .ld-tooltip__arrow {\n        top: calc(50% - var(--ld-tooltip-arrow-size));\n      }\n    }\n  }\n\n  &.ld-tether-element-attached-right {\n    :host(&) {\n      .ld-tooltip__arrow {\n        right: var(--ld-tooltip-arrow-offset);\n      }\n    }\n\n    &.ld-tether-target-attached-left {\n      :host(&) {\n        margin-left: calc(\n          var(--ld-tooltip-distance-from-trigger) * -1 -\n            var(--ld-tooltip-offset-x)\n        );\n\n        .ld-tooltip__arrow {\n          border-left-color: var(--tooltip-bg-col);\n          left: 100%;\n        }\n      }\n    }\n  }\n\n  &.ld-tether-element-attached-top.ld-tether-target-attached-bottom {\n    :host(&) {\n      margin-top: calc(\n        var(--ld-tooltip-distance-from-trigger) + var(--ld-tooltip-offset-y)\n      );\n      .ld-tooltip__arrow {\n        border-bottom-color: var(--tooltip-bg-col);\n        bottom: 100%;\n      }\n    }\n  }\n}\n\n.ld-tooltip--with-default-trigger:where(.ld-tooltip--with-arrow) {\n  &:where(.ld-tether-element-attached-top.ld-tether-target-attached-bottom),\n  &:where(.ld-tether-element-attached-bottom.ld-tether-target-attached-top) {\n    &:where(.ld-tether-element-attached-right) {\n      :host(&) {\n        --ld-tooltip-offset-x: 1rem;\n      }\n    }\n\n    &:where(.ld-tether-element-attached-left) {\n      :host(&) {\n        --ld-tooltip-offset-x: -1rem;\n      }\n    }\n  }\n\n  &:where(.ld-tether-element-attached-right.ld-tether-target-attached-left),\n  &:where(.ld-tether-element-attached-left.ld-tether-target-attached-right) {\n    &:where(.ld-tether-element-attached-bottom) {\n      :host(&) {\n        --ld-tooltip-offset-y: 1rem;\n      }\n    }\n\n    &:where(.ld-tether-element-attached-top) {\n      :host(&) {\n        --ld-tooltip-offset-y: -1rem;\n      }\n    }\n  }\n}\n\n.ld-tooltip__arrow {\n  border: var(--ld-tooltip-arrow-size) solid transparent;\n  position: absolute;\n}\n","import { Component, Element, h, Host, Prop, State } from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\n\n/** @internal **/\n@Component({\n  tag: 'ld-tooltip-popper',\n  styleUrl: 'ld-tooltip-popper.shadow.css',\n  shadow: true,\n})\nexport class LdTooltipPopper {\n  @Element() element: HTMLElement\n\n  @State() initialized = false\n\n  /** Show arrow */\n  @Prop() arrow?: boolean\n\n  /**\n   * Use to right-click.\n   * @internal\n   */\n  @Prop() rightClick? = false\n\n  /** The tooltip size (effects tooltip padding only) */\n  @Prop() size?: 'sm'\n\n  /** Event type that triggers the tooltip */\n  @Prop() triggerType?: 'click' | 'hover' = 'hover'\n\n  /** Render the tooltip without visual styling. */\n  @Prop() unstyled? = false\n\n  /** Whether the tooltip has a custom trigger or not */\n  @Prop() hasDefaultTrigger?: boolean\n\n  componentDidLoad() {\n    setTimeout(() => {\n      this.initialized = true\n    })\n  }\n\n  render() {\n    return (\n      <Host\n        class={getClassNames([\n          'ld-tooltip',\n          this.arrow && 'ld-tooltip--with-arrow',\n          this.hasDefaultTrigger && 'ld-tooltip--with-default-trigger',\n          this.initialized && 'ld-tooltip--initialized',\n          this.size && `ld-tooltip--${this.size}`,\n          (this.rightClick || this.triggerType === 'click') &&\n            'ld-tooltip--interactive',\n          this.unstyled && 'ld-tooltip--unstyled',\n        ])}\n        role=\"tooltip\"\n      >\n        {this.arrow && <span class=\"ld-tooltip__arrow\" />}\n        <slot />\n      </Host>\n    )\n  }\n}\n"],"mappings":"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"}