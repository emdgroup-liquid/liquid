{"version":3,"names":["ldStepperCss","LdStepper","this","updateCurrent","event","currentIndex","detail","index","currentLabel","label","getLabel","summary","labelSummaryTemplate","replace","String","steps","length","labelTemplate","propagateProps","forEach","ldStep","brandColor","size","vertical","componentWillLoad","el","querySelectorAll","render","h","Host","class","getClassNames","fitContent","role","onLdstepselected","part"],"sources":["../src/liquid/components/ld-stepper/ld-stepper.css?tag=ld-stepper&encapsulation=shadow","../src/liquid/components/ld-stepper/ld-stepper.tsx"],"sourcesContent":[":host,\n.ld-stepper {\n  --ld-stepper-gap: var(--ld-stepper-gap-md);\n  --ld-stepper-gap-sm: var(--ld-sp-16);\n  --ld-stepper-gap-md: 1.25rem;\n  --ld-stepper-gap-lg: var(--ld-sp-24);\n\n  display: block;\n\n  ol {\n    display: grid;\n    grid-auto-columns: minmax(0, 1fr);\n    grid-auto-flow: column;\n    gap: var(--ld-stepper-gap);\n    height: 100%;\n    padding: 0;\n  }\n}\n\n.ld-stepper--vertical {\n  :host(&),\n  & {\n    ol {\n      flex-direction: column;\n      grid-auto-flow: row;\n      grid-auto-rows: 1fr;\n    }\n  }\n}\n\n.ld-stepper--fit-content {\n  :host(&),\n  & {\n    ol {\n      display: flex;\n    }\n  }\n}\n\n.ld-stepper--sm {\n  :host(&),\n  & {\n    --ld-stepper-gap: var(--ld-stepper-gap-sm);\n  }\n}\n\n.ld-stepper--lg {\n  :host(&),\n  & {\n    --ld-stepper-gap: var(--ld-stepper-gap-lg);\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { SelectedDetail } from './ld-step/ld-step'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part list - `ol` element wrapping the slot\n * @part label - `ld-sr-only` element containing the label\n */\n@Component({\n  tag: 'ld-stepper',\n  styleUrl: 'ld-stepper.css',\n  shadow: true,\n})\nexport class LdStepper {\n  @Element() el: HTMLLdStepperElement\n\n  /** Switch colors for brand background. */\n  @Prop() brandColor? = false\n  /** Indicates whether the steps should be evenly distributed or fit to their content */\n  @Prop() fitContent? = false\n  /** Template for the screen-reader label, containing the label of the current step and the steps summary */\n  @Prop() labelTemplate? = '$1, $2'\n  /** Step summary template for the screen-reader label, containing the index of the current step and the overall number of steps */\n  @Prop() labelSummaryTemplate? = 'step $1 of $2'\n  /** Step size */\n  @Prop() size?: HTMLLdStepElement['size']\n  /** Vertical layout */\n  @Prop() vertical? = false\n\n  // The following event is not used within the ld-stepper component itself.\n  // Its only purpose is to create a type definition on the ld-stepper component,\n  // in order to be able to add an inline listener in TSX, for listening\n  // on the event bubling up from ld-step components.\n  /**\n   * Emitted when the focusable element of a step is\n   * clicked and step is neither current nor disabled.\n   */\n  @Event() ldstepselected: EventEmitter<SelectedDetail>\n\n  @State() currentLabel: string\n  @State() currentIndex: number\n  @State() steps: NodeListOf<HTMLLdStepElement>\n\n  private getLabel() {\n    const summary = this.labelSummaryTemplate\n      .replace('$1', String(this.currentIndex + 1))\n      .replace('$2', String(this.steps.length))\n\n    return this.currentLabel\n      ? this.labelTemplate\n          .replace('$1', this.currentLabel)\n          .replace('$2', summary)\n      : summary\n  }\n\n  updateCurrent = (event: CustomEvent<SelectedDetail>) => {\n    this.currentIndex = event.detail.index\n    this.currentLabel = event.detail.label\n  }\n\n  @Watch('brandColor')\n  @Watch('size')\n  @Watch('vertical')\n  private propagateProps() {\n    this.steps.forEach((ldStep) => {\n      ldStep.brandColor = this.brandColor\n      ldStep.size = this.size\n      ldStep.vertical = this.vertical\n    })\n  }\n\n  componentWillLoad() {\n    this.steps = this.el.querySelectorAll('ld-step')\n\n    this.propagateProps()\n  }\n\n  render() {\n    return (\n      <Host\n        class={getClassNames([\n          'ld-stepper',\n          this.fitContent && 'ld-stepper--fit-content',\n          this.size && `ld-stepper--${this.size}`,\n          this.vertical && 'ld-stepper--vertical',\n        ])}\n        role=\"navigation\"\n        onLdstepselected={this.updateCurrent}\n      >\n        <ld-sr-only>{this.getLabel()}</ld-sr-only>\n        <ol part=\"list\">\n          <slot></slot>\n        </ol>\n      </Host>\n    )\n  }\n}\n"],"mappings":"oGAAA,MAAMA,EAAe,8rB,MCyBRC,EAAS,M,wEA0CpBC,KAAAC,cAAiBC,IACfF,KAAKG,aAAeD,EAAME,OAAOC,MACjCL,KAAKM,aAAeJ,EAAME,OAAOG,KAAK,E,gBAxClB,M,gBAEA,M,mBAEG,S,0BAEO,gB,kCAIZ,M,6EAgBZC,WACN,MAAMC,EAAUT,KAAKU,qBAClBC,QAAQ,KAAMC,OAAOZ,KAAKG,aAAe,IACzCQ,QAAQ,KAAMC,OAAOZ,KAAKa,MAAMC,SAEnC,OAAOd,KAAKM,aACRN,KAAKe,cACFJ,QAAQ,KAAMX,KAAKM,cACnBK,QAAQ,KAAMF,GACjBA,C,CAWEO,iBACNhB,KAAKa,MAAMI,SAASC,IAClBA,EAAOC,WAAanB,KAAKmB,WACzBD,EAAOE,KAAOpB,KAAKoB,KACnBF,EAAOG,SAAWrB,KAAKqB,QAAQ,G,CAInCC,oBACEtB,KAAKa,MAAQb,KAAKuB,GAAGC,iBAAiB,WAEtCxB,KAAKgB,gB,CAGPS,SACE,OACEC,EAACC,EAAI,CACHC,MAAOC,EAAc,CACnB,aACA7B,KAAK8B,YAAc,0BACnB9B,KAAKoB,MAAQ,eAAepB,KAAKoB,OACjCpB,KAAKqB,UAAY,yBAEnBU,KAAK,aACLC,iBAAkBhC,KAAKC,eAEvByB,EAAA,kBAAa1B,KAAKQ,YAClBkB,EAAA,MAAIO,KAAK,QACPP,EAAA,c"}