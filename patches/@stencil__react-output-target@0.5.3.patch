diff --git a/dist/index.cjs.js b/dist/index.cjs.js
index fd6fd4cb7f08dab32453d0f78e0c59e683ebb267..3ec06e61885a9c7e76068abd6c5c8c10d29921bf 100644
--- a/dist/index.cjs.js
+++ b/dist/index.cjs.js
@@ -161,7 +161,7 @@ function generateProxies(config, components, pkgData, outputTarget, rootDir) {
     const imports = `/* eslint-disable */
 /* tslint:disable */
 /* auto-generated react proxies */
-import { createReactComponent } from './react-component-lib';\n`;
+import { createReactComponent } from './react-component-lib/index.js';\n`;
     /**
      * Generate JSX import type from correct location.
      * When using custom elements build, we need to import from
@@ -193,11 +193,11 @@ import { createReactComponent } from './react-component-lib';\n`;
         sourceImports = cmpImports.join('\n');
     }
     else if (outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${APPLY_POLYFILLS}().then(() => ${REGISTER_CUSTOM_ELEMENTS}());`;
     }
     else if (!outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${REGISTER_CUSTOM_ELEMENTS}();`;
     }
     const final = [
diff --git a/dist/index.d.ts b/dist/index.d.ts
index f4fce6b403df1f833bf216c50e19fd52568e6f02..9a76ec911ab4b6400a282abb21555d12e7758af6 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,2 +1,2 @@
-export { reactOutputTarget } from './plugin';
+export { reactOutputTarget } from './plugin.js';
 export type { OutputTargetReact } from './types';
diff --git a/dist/index.js b/dist/index.js
index d54a546e573f364e69ce1416e126d661b902ae58..e540feb50efe72f6d18c520447d999650910320e 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -152,7 +152,7 @@ function generateProxies(config, components, pkgData, outputTarget, rootDir) {
     const imports = `/* eslint-disable */
 /* tslint:disable */
 /* auto-generated react proxies */
-import { createReactComponent } from './react-component-lib';\n`;
+import { createReactComponent } from './react-component-lib/index.js';\n`;
     /**
      * Generate JSX import type from correct location.
      * When using custom elements build, we need to import from
@@ -184,11 +184,11 @@ import { createReactComponent } from './react-component-lib';\n`;
         sourceImports = cmpImports.join('\n');
     }
     else if (outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${APPLY_POLYFILLS}().then(() => ${REGISTER_CUSTOM_ELEMENTS}());`;
     }
     else if (!outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${REGISTER_CUSTOM_ELEMENTS}();`;
     }
     const final = [
diff --git a/dist/output-react.js b/dist/output-react.js
index 6c53e30b38a717e56f31a30aef30e0f2d2a2a008..502848a0d0f0c56a335fb31b00eb86b7f0b356d5 100644
--- a/dist/output-react.js
+++ b/dist/output-react.js
@@ -1,5 +1,5 @@
 import path from 'path';
-import { dashToPascalCase, normalizePath, readPackageJson, relativeImport, sortBy } from './utils';
+import { dashToPascalCase, normalizePath, readPackageJson, relativeImport, sortBy } from './utils.js';
 /**
  * Generate and write the Stencil-React bindings to disc
  * @param config the Stencil configuration associated with the project
@@ -41,7 +41,7 @@ export function generateProxies(config, components, pkgData, outputTarget, rootD
     const imports = `/* eslint-disable */
 /* tslint:disable */
 /* auto-generated react proxies */
-import { createReactComponent } from './react-component-lib';\n`;
+import { createReactComponent } from './react-component-lib/index.js';\n`;
     /**
      * Generate JSX import type from correct location.
      * When using custom elements build, we need to import from
@@ -73,11 +73,11 @@ import { createReactComponent } from './react-component-lib';\n`;
         sourceImports = cmpImports.join('\n');
     }
     else if (outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${APPLY_POLYFILLS}().then(() => ${REGISTER_CUSTOM_ELEMENTS}());`;
     }
     else if (!outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${REGISTER_CUSTOM_ELEMENTS}();`;
     }
     const final = [
diff --git a/dist/plugin.js b/dist/plugin.js
index dea591d26435b314e486b298069bb6bded38e235..50c1bae5c1317fdbed359fc4798975b64d91e708 100644
--- a/dist/plugin.js
+++ b/dist/plugin.js
@@ -1,5 +1,5 @@
-import { normalizePath } from './utils';
-import { reactProxyOutput } from './output-react';
+import { normalizePath } from './utils.js';
+import { reactProxyOutput } from './output-react.js';
 import path from 'path';
 /**
  * Creates an output target for binding Stencil components to be used in a React context
diff --git a/react-component-lib/createComponent.tsx b/react-component-lib/createComponent.tsx
index 7c7415a29d8d0a49ae63a85b1bbe4d65ec197e86..7e1d1ef7dbbe2d2ffdc4be351053998b7bbd8252 100644
--- a/react-component-lib/createComponent.tsx
+++ b/react-component-lib/createComponent.tsx
@@ -1,6 +1,6 @@
 import React, { createElement } from 'react';
 
-import { attachProps, camelToDashCase, createForwardRef, dashToPascalCase, isCoveredByReact, mergeRefs } from './utils';
+import { attachProps, camelToDashCase, createForwardRef, dashToPascalCase, isCoveredByReact, mergeRefs } from './utils/index.js';
 
 export interface HTMLStencilElement extends HTMLElement {
   componentOnReady(): Promise<this>;
diff --git a/react-component-lib/createOverlayComponent.tsx b/react-component-lib/createOverlayComponent.tsx
index 288c38dd54c138fea45127e45acf9d0b96dbf99a..f491c5927c9a077373fc5efa4262a8d17eb1ba9a 100644
--- a/react-component-lib/createOverlayComponent.tsx
+++ b/react-component-lib/createOverlayComponent.tsx
@@ -1,8 +1,8 @@
 import React from 'react';
 import ReactDOM from 'react-dom';
 
-import { OverlayEventDetail } from './interfaces';
-import { StencilReactForwardedRef, attachProps, dashToPascalCase, defineCustomElement, setRef } from './utils';
+import { OverlayEventDetail } from './interfaces.js';
+import { StencilReactForwardedRef, attachProps, dashToPascalCase, defineCustomElement, setRef } from './utils/index.js';
 
 interface OverlayElement extends HTMLElement {
   present: () => Promise<void>;
diff --git a/react-component-lib/index.ts b/react-component-lib/index.ts
index 85e81ad196c6d8c5dd7076a3b57bc3afbb434b0d..611f53c9483eedc6672f03d6ee43d4b705bff381 100644
--- a/react-component-lib/index.ts
+++ b/react-component-lib/index.ts
@@ -1,2 +1,2 @@
-export { createReactComponent } from './createComponent';
-export { createOverlayComponent } from './createOverlayComponent';
+export { createReactComponent } from './createComponent.js';
+export { createOverlayComponent } from './createOverlayComponent.js';
diff --git a/react-component-lib/utils/attachProps.ts b/react-component-lib/utils/attachProps.ts
index 9a1825f54f37b60fc815975d54b543bba3fdf201..b67b5f36f08381db00d16a706f9faefb65d09023 100644
--- a/react-component-lib/utils/attachProps.ts
+++ b/react-component-lib/utils/attachProps.ts
@@ -1,4 +1,4 @@
-import { camelToDashCase } from './case';
+import { camelToDashCase } from './case.js';
 
 export const attachProps = (node: HTMLElement, newProps: any, oldProps: any = {}) => {
   // some test frameworks don't render DOM elements, so we test here to make sure we are dealing with DOM first
diff --git a/react-component-lib/utils/index.tsx b/react-component-lib/utils/index.tsx
index a66bd02de766a2eaf05a913d6bc9b1984279265c..9ed0c12fd49b359c5223a16349ccf469a1c6363c 100644
--- a/react-component-lib/utils/index.tsx
+++ b/react-component-lib/utils/index.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import type { StyleReactProps } from '../interfaces';
+import type { StyleReactProps } from '../interfaces.js';
 
 export type StencilReactExternalProps<PropType, ElementType> = PropType &
   Omit<React.HTMLAttributes<ElementType>, 'style'> &
@@ -46,5 +46,5 @@ export const defineCustomElement = (tagName: string, customElement: any) => {
   }
 };
 
-export * from './attachProps';
-export * from './case';
+export * from './attachProps.js';
+export * from './case.js';
