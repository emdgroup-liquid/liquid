{"version":3,"names":["ldTypoCss","LdTypo","this","getDefaultTag","_a","h1","h2","h3","h4","h5","h6","b1","b2","b3","b4","b5","b6","xb1","xb2","xb3","xh1","xh2","xh3","xh4","xh5","xh6","variant","applyAriaLabel","isUppercase","includes","root","setAttribute","ariaLabel","el","innerHTML","trim","componentWillLoad","attributesObserver","cloneAttributes","call","componentDidRender","disconnectedCallback","disconnect","render","HTag","tag","h","Object","assign","clonedAttributes","class","part","ref"],"sources":["../src/liquid/components/ld-typo/ld-typo.css?tag=ld-typo&encapsulation=shadow","../src/liquid/components/ld-typo/ld-typo.tsx"],"sourcesContent":[":host {\n  display: block;\n  line-height: 0;\n\n  &([variant^='xb']),\n  &([variant='b1']),\n  &([variant='b2']),\n  &([variant='b3']),\n  &([variant='b4']),\n  &([variant='b5']),\n  &([variant='b6']) {\n    color: var(--ld-typo-text-brand-color);\n  }\n\n  /* Reset within the shadow DOM */\n  .ld-typo {\n    color: inherit;\n    margin: 0;\n  }\n}\n\n:host,\n.ld-typo {\n  --ld-typo-text-brand-color: var(--ld-thm-primary);\n}\n\n/* Reset for CSS component */\n:where(.ld-typo) {\n  margin: 0;\n}\n\n.ld-typo,\n.ld-typo--body-m {\n  font: var(--ld-typo-body-m);\n}\n.ld-typo--body-l {\n  font: var(--ld-typo-body-l);\n}\n.ld-typo--body-s {\n  font: var(--ld-typo-body-s);\n}\n.ld-typo--body-xl {\n  font: var(--ld-typo-body-xl);\n}\n.ld-typo--body-xs {\n  font: var(--ld-typo-body-xs);\n}\n\n.ld-typo--cap-l {\n  font: var(--ld-typo-cap-l);\n  letter-spacing: 0.15em;\n  text-transform: uppercase;\n}\n.ld-typo--cap-m {\n  font: var(--ld-typo-cap-m);\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n}\n\n.ld-typo--label-m {\n  font: var(--ld-typo-label-m);\n}\n.ld-typo--label-s {\n  font: var(--ld-typo-label-s);\n}\n\n.ld-typo--h1 {\n  font: var(--ld-typo-h1);\n}\n.ld-typo--h2 {\n  font: var(--ld-typo-h2);\n}\n.ld-typo--h3 {\n  font: var(--ld-typo-h3);\n}\n.ld-typo--h4 {\n  font: var(--ld-typo-h4);\n}\n.ld-typo--h5 {\n  font: var(--ld-typo-h5);\n}\n.ld-typo--h6 {\n  font: var(--ld-typo-h6);\n}\n\n.ld-typo--b1 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b1);\n  text-transform: uppercase;\n}\n.ld-typo--b2 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b2);\n  text-transform: uppercase;\n}\n.ld-typo--b3 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b3);\n  text-transform: uppercase;\n}\n.ld-typo--b4 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b4);\n  text-transform: uppercase;\n}\n.ld-typo--b5 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b5);\n  text-transform: uppercase;\n}\n.ld-typo--b6 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b6);\n  text-transform: uppercase;\n}\n\n.ld-typo--xb1 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-xb1);\n  text-transform: uppercase;\n}\n.ld-typo--xb2 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-xb2);\n  text-transform: uppercase;\n}\n.ld-typo--xb3 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-xb3);\n  text-transform: uppercase;\n}\n\n.ld-typo--xh1 {\n  font: var(--ld-typo-xh1);\n}\n.ld-typo--xh2 {\n  font: var(--ld-typo-xh2);\n}\n.ld-typo--xh3 {\n  font: var(--ld-typo-xh3);\n}\n.ld-typo--xh4 {\n  font: var(--ld-typo-xh4);\n}\n.ld-typo--xh5 {\n  font: var(--ld-typo-xh5);\n}\n.ld-typo--xh6 {\n  font: var(--ld-typo-xh6);\n}\n","import { Component, Element, h, Prop, State } from '@stencil/core'\nimport { cloneAttributes } from '../../utils/cloneAttributes'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part tag - Actual tag\n */\n@Component({\n  tag: 'ld-typo',\n  styleUrl: 'ld-typo.css',\n  shadow: true,\n})\nexport class LdTypo implements ClonesAttributes {\n  @Element() el: HTMLElement\n\n  private attributesObserver: MutationObserver\n\n  private root: HTMLElement\n\n  /** The rendered HTML tag. Overrides tag inferred from the variant. */\n  @Prop() tag?: string\n\n  /** The font style. Every variant has a default tag that it renders with. */\n  @Prop({ mutable: true }) variant?:\n    | 'body-xs'\n    | 'body-s'\n    | 'body-m'\n    | 'body-l'\n    | 'body-xl'\n    | 'cap-m'\n    | 'cap-l'\n    | 'label-s'\n    | 'label-m'\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6'\n    | 'b1'\n    | 'b2'\n    | 'b3'\n    | 'b4'\n    | 'b5'\n    | 'b6'\n    | 'xb1'\n    | 'xb2'\n    | 'xb3'\n    | 'xh1'\n    | 'xh2'\n    | 'xh3'\n    | 'xh4'\n    | 'xh5'\n    | 'xh6' = 'body-m'\n\n  /**\n   * Since b* and xb* variants are uppercase, screen readers need to be served a\n   * (non-uppercase) aria-label (otherwise they will read out the heading letter by letter).\n   * If you're using a b* or xb* variant, an aria-label will be\n   * set automatically on the element. The component will use the inner HTML for the\n   * label implicitly. If you want to set an aria-label explicitly (such as when you have\n   * inner HTML that should not be part of the label), you can use this property.\n   */\n  @Prop() ariaLabel: string\n\n  @State() clonedAttributes\n\n  private applyAriaLabel() {\n    const isUppercase = [\n      'cap-m',\n      'cap-l',\n      'b1',\n      'b2',\n      'b3',\n      'b4',\n      'b5',\n      'b6',\n      'xb1',\n      'xb2',\n      'xb3',\n    ].includes(this.variant)\n\n    if (isUppercase) {\n      this.root.setAttribute(\n        'aria-label',\n        this.ariaLabel || this.el.innerHTML.trim()\n      )\n    }\n  }\n\n  private getDefaultTag = () =>\n    ({\n      'cap-m': 'span',\n      'cap-l': 'span',\n      'label-s': 'span',\n      'label-m': 'span',\n      h1: 'h1',\n      h2: 'h2',\n      h3: 'h3',\n      h4: 'h4',\n      h5: 'h5',\n      h6: 'h6',\n      b1: 'h1',\n      b2: 'h2',\n      b3: 'h3',\n      b4: 'h4',\n      b5: 'h5',\n      b6: 'h6',\n      xb1: 'h1',\n      xb2: 'h2',\n      xb3: 'h3',\n      xh1: 'h1',\n      xh2: 'h2',\n      xh3: 'h3',\n      xh4: 'h4',\n      xh5: 'h5',\n      xh6: 'h6',\n    }[this.variant] ?? 'p')\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, ['tag', 'variant'])\n  }\n\n  componentDidRender() {\n    this.applyAriaLabel()\n  }\n\n  disconnectedCallback() {\n    this.attributesObserver?.disconnect()\n  }\n\n  render() {\n    const HTag = this.tag || this.getDefaultTag()\n\n    return (\n      <HTag\n        {...this.clonedAttributes}\n        class={`ld-typo ld-typo--${this.variant}`}\n        part=\"tag\"\n        ref={(ref: HTMLElement) => (this.root = ref)}\n      >\n        <slot></slot>\n      </HTag>\n    )\n  }\n}\n"],"mappings":"sFAAA,MAAMA,EAAY,u/D,MCaLC,EAAM,M,yBA8ETC,KAAAC,cAAgB,K,MACtB,OAACC,EAAA,CACC,QAAS,OACT,QAAS,OACT,UAAW,OACX,UAAW,OACXC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,MACLvB,KAAKwB,YAAQ,MAAAtB,SAAA,EAAAA,EAAI,GAAG,E,gCAhEZ,S,yDAcJuB,iBACN,MAAMC,EAAc,CAClB,QACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,OACAC,SAAS3B,KAAKwB,SAEhB,GAAIE,EAAa,CACf1B,KAAK4B,KAAKC,aACR,aACA7B,KAAK8B,WAAa9B,KAAK+B,GAAGC,UAAUC,O,EAkC1CC,oBACElC,KAAKmC,mBAAqBC,EAAgBC,KAAKrC,KAAM,CAAC,MAAO,W,CAG/DsC,qBACEtC,KAAKyB,gB,CAGPc,uB,OACErC,EAAAF,KAAKmC,sBAAkB,MAAAjC,SAAA,SAAAA,EAAEsC,Y,CAG3BC,SACE,MAAMC,EAAO1C,KAAK2C,KAAO3C,KAAKC,gBAE9B,OACE2C,EAACF,EAAIG,OAAAC,OAAA,GACC9C,KAAK+C,iBAAgB,CACzBC,MAAO,oBAAoBhD,KAAKwB,UAChCyB,KAAK,MACLC,IAAMA,GAAsBlD,KAAK4B,KAAOsB,IAExCN,EAAA,a"}