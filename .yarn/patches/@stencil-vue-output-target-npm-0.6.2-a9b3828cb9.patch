diff --git a/dist/generate-vue-component.js b/dist/generate-vue-component.js
index f92d53a2caa5d462194440120a551bd3d6f24f22..370c840d054f66d1c56f3303efe10ac8bf3c4f77 100644
--- a/dist/generate-vue-component.js
+++ b/dist/generate-vue-component.js
@@ -1,20 +1,17 @@
-import { dashToPascalCase } from './utils';
+import { dashToPascalCase } from './utils.js';
 export const createComponentDefinition = (importTypes, componentModelConfig, includeCustomElement = false) => (cmpMeta) => {
     const tagNameAsPascal = dashToPascalCase(cmpMeta.tagName);
-    const importAs = (includeCustomElement) ? 'define' + tagNameAsPascal : 'undefined';
+    const importAs = includeCustomElement ? 'define' + tagNameAsPascal : 'undefined';
     let props = [];
     if (Array.isArray(cmpMeta.properties) && cmpMeta.properties.length > 0) {
         props = cmpMeta.properties.map((prop) => `'${prop.name}'`);
     }
     if (Array.isArray(cmpMeta.events) && cmpMeta.events.length > 0) {
-        props = [
-            ...props,
-            ...cmpMeta.events.map((event) => `'${event.name}'`)
-        ];
+        props = [...props, ...cmpMeta.events.map((event) => `'${event.name}'`)];
     }
     let templateString = `
 export const ${tagNameAsPascal} = /*@__PURE__*/ defineContainer<${importTypes}.${tagNameAsPascal}>('${cmpMeta.tagName}', ${importAs}`;
-    const findModel = componentModelConfig && componentModelConfig.find(config => config.elements.includes(cmpMeta.tagName));
+    const findModel = componentModelConfig && componentModelConfig.find((config) => config.elements.includes(cmpMeta.tagName));
     if (props.length > 0) {
         templateString += `, [
   ${props.length > 0 ? props.join(',\n  ') : ''}
diff --git a/dist/index.cjs.js b/dist/index.cjs.js
index ce0fad05e3bfe0e6bec389a96060e00617daf410..7a7cfaaa65070251d9c26de47d918c7818152e21 100644
--- a/dist/index.cjs.js
+++ b/dist/index.cjs.js
@@ -89,20 +89,17 @@ const SLASH_REGEX = /\\/g;
 
 const createComponentDefinition = (importTypes, componentModelConfig, includeCustomElement = false) => (cmpMeta) => {
     const tagNameAsPascal = dashToPascalCase(cmpMeta.tagName);
-    const importAs = (includeCustomElement) ? 'define' + tagNameAsPascal : 'undefined';
+    const importAs = includeCustomElement ? 'define' + tagNameAsPascal : 'undefined';
     let props = [];
     if (Array.isArray(cmpMeta.properties) && cmpMeta.properties.length > 0) {
         props = cmpMeta.properties.map((prop) => `'${prop.name}'`);
     }
     if (Array.isArray(cmpMeta.events) && cmpMeta.events.length > 0) {
-        props = [
-            ...props,
-            ...cmpMeta.events.map((event) => `'${event.name}'`)
-        ];
+        props = [...props, ...cmpMeta.events.map((event) => `'${event.name}'`)];
     }
     let templateString = `
 export const ${tagNameAsPascal} = /*@__PURE__*/ defineContainer<${importTypes}.${tagNameAsPascal}>('${cmpMeta.tagName}', ${importAs}`;
-    const findModel = componentModelConfig && componentModelConfig.find(config => config.elements.includes(cmpMeta.tagName));
+    const findModel = componentModelConfig && componentModelConfig.find((config) => config.elements.includes(cmpMeta.tagName));
     if (props.length > 0) {
         templateString += `, [
   ${props.length > 0 ? props.join(',\n  ') : ''}
@@ -161,22 +158,23 @@ function generateProxies(config, components, pkgData, outputTarget, rootDir) {
     const imports = `/* eslint-disable */
 /* tslint:disable */
 /* auto-generated vue proxies */
-import { defineContainer } from './vue-component-lib/utils';\n`;
+import { defineContainer } from './vue-component-lib/utils.js';\n`;
     const generateTypeImports = () => {
         if (outputTarget.componentCorePackage !== undefined) {
-            const dirPath = outputTarget.includeImportCustomElements ? `/${outputTarget.customElementsDir || 'components'}` : '';
+            const dirPath = outputTarget.includeImportCustomElements
+                ? `/${outputTarget.customElementsDir || 'components'}`
+                : '';
             return `import type { ${IMPORT_TYPES} } from '${normalizePath(outputTarget.componentCorePackage)}${dirPath}';\n`;
         }
-        return `import type { ${IMPORT_TYPES} } from '${normalizePath(componentsTypeFile)}';\n`;
+        return `import type { ${IMPORT_TYPES} } from '${normalizePath(componentsTypeFile)}.js';\n`;
     };
     const typeImports = generateTypeImports();
     let sourceImports = '';
     let registerCustomElements = '';
     if (outputTarget.includeImportCustomElements && outputTarget.componentCorePackage !== undefined) {
-        const cmpImports = components.map(component => {
+        const cmpImports = components.map((component) => {
             const pascalImport = dashToPascalCase(component.tagName);
-            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir ||
-                'components'}/${component.tagName}.js';`;
+            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir || 'components'}/${component.tagName}.js';`;
         });
         sourceImports = cmpImports.join('\n');
     }
@@ -221,9 +219,7 @@ function getPathToCorePackageLoader(config, outputTarget) {
     const distAbsEsmLoaderPath = (distOutputTarget === null || distOutputTarget === void 0 ? void 0 : distOutputTarget.esmLoaderPath) && path__default['default'].isAbsolute(distOutputTarget.esmLoaderPath)
         ? distOutputTarget.esmLoaderPath
         : null;
-    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath
-        ? path__default['default'].relative(config.rootDir, distAbsEsmLoaderPath)
-        : null;
+    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath ? path__default['default'].relative(config.rootDir, distAbsEsmLoaderPath) : null;
     const loaderDir = outputTarget.loaderDir || distRelEsmLoaderPath || DEFAULT_LOADER_DIR;
     return normalizePath(path__default['default'].join(basePkg, loaderDir));
 }
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 26cb893e90a3fc9a0a2ea3ce598196d7f99ffc59..535829157b12216bd0f2651ab209549ad923c1c8 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,2 +1,2 @@
-export { vueOutputTarget } from './plugin';
+export { vueOutputTarget } from './plugin.js';
 export type { OutputTargetVue, ComponentModelConfig } from './types';
diff --git a/dist/index.js b/dist/index.js
index aa686db09e35a595b65bee010034c3f4f7517001..bec938e6e85923f00c83d24d02260012cc294cd4 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -80,20 +80,17 @@ const SLASH_REGEX = /\\/g;
 
 const createComponentDefinition = (importTypes, componentModelConfig, includeCustomElement = false) => (cmpMeta) => {
     const tagNameAsPascal = dashToPascalCase(cmpMeta.tagName);
-    const importAs = (includeCustomElement) ? 'define' + tagNameAsPascal : 'undefined';
+    const importAs = includeCustomElement ? 'define' + tagNameAsPascal : 'undefined';
     let props = [];
     if (Array.isArray(cmpMeta.properties) && cmpMeta.properties.length > 0) {
         props = cmpMeta.properties.map((prop) => `'${prop.name}'`);
     }
     if (Array.isArray(cmpMeta.events) && cmpMeta.events.length > 0) {
-        props = [
-            ...props,
-            ...cmpMeta.events.map((event) => `'${event.name}'`)
-        ];
+        props = [...props, ...cmpMeta.events.map((event) => `'${event.name}'`)];
     }
     let templateString = `
 export const ${tagNameAsPascal} = /*@__PURE__*/ defineContainer<${importTypes}.${tagNameAsPascal}>('${cmpMeta.tagName}', ${importAs}`;
-    const findModel = componentModelConfig && componentModelConfig.find(config => config.elements.includes(cmpMeta.tagName));
+    const findModel = componentModelConfig && componentModelConfig.find((config) => config.elements.includes(cmpMeta.tagName));
     if (props.length > 0) {
         templateString += `, [
   ${props.length > 0 ? props.join(',\n  ') : ''}
@@ -152,22 +149,23 @@ function generateProxies(config, components, pkgData, outputTarget, rootDir) {
     const imports = `/* eslint-disable */
 /* tslint:disable */
 /* auto-generated vue proxies */
-import { defineContainer } from './vue-component-lib/utils';\n`;
+import { defineContainer } from './vue-component-lib/utils.js';\n`;
     const generateTypeImports = () => {
         if (outputTarget.componentCorePackage !== undefined) {
-            const dirPath = outputTarget.includeImportCustomElements ? `/${outputTarget.customElementsDir || 'components'}` : '';
+            const dirPath = outputTarget.includeImportCustomElements
+                ? `/${outputTarget.customElementsDir || 'components'}`
+                : '';
             return `import type { ${IMPORT_TYPES} } from '${normalizePath(outputTarget.componentCorePackage)}${dirPath}';\n`;
         }
-        return `import type { ${IMPORT_TYPES} } from '${normalizePath(componentsTypeFile)}';\n`;
+        return `import type { ${IMPORT_TYPES} } from '${normalizePath(componentsTypeFile)}.js';\n`;
     };
     const typeImports = generateTypeImports();
     let sourceImports = '';
     let registerCustomElements = '';
     if (outputTarget.includeImportCustomElements && outputTarget.componentCorePackage !== undefined) {
-        const cmpImports = components.map(component => {
+        const cmpImports = components.map((component) => {
             const pascalImport = dashToPascalCase(component.tagName);
-            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir ||
-                'components'}/${component.tagName}.js';`;
+            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir || 'components'}/${component.tagName}.js';`;
         });
         sourceImports = cmpImports.join('\n');
     }
@@ -212,9 +210,7 @@ function getPathToCorePackageLoader(config, outputTarget) {
     const distAbsEsmLoaderPath = (distOutputTarget === null || distOutputTarget === void 0 ? void 0 : distOutputTarget.esmLoaderPath) && path.isAbsolute(distOutputTarget.esmLoaderPath)
         ? distOutputTarget.esmLoaderPath
         : null;
-    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath
-        ? path.relative(config.rootDir, distAbsEsmLoaderPath)
-        : null;
+    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath ? path.relative(config.rootDir, distAbsEsmLoaderPath) : null;
     const loaderDir = outputTarget.loaderDir || distRelEsmLoaderPath || DEFAULT_LOADER_DIR;
     return normalizePath(path.join(basePkg, loaderDir));
 }
diff --git a/dist/output-vue.js b/dist/output-vue.js
index 63aff6cc9e8364ef0b64af2601590813a40583b9..50b5901fe2dd1ed29b0c8d248e97ad7050ed6fa4 100644
--- a/dist/output-vue.js
+++ b/dist/output-vue.js
@@ -1,6 +1,6 @@
 import path from 'path';
-import { createComponentDefinition } from './generate-vue-component';
-import { normalizePath, readPackageJson, relativeImport, sortBy, dashToPascalCase } from './utils';
+import { createComponentDefinition } from './generate-vue-component.js';
+import { normalizePath, readPackageJson, relativeImport, sortBy, dashToPascalCase } from './utils.js';
 export async function vueProxyOutput(config, compilerCtx, outputTarget, components) {
     const filteredComponents = getFilteredComponents(outputTarget.excludeComponents, components);
     const rootDir = config.rootDir;
@@ -20,22 +20,23 @@ export function generateProxies(config, components, pkgData, outputTarget, rootD
     const imports = `/* eslint-disable */
 /* tslint:disable */
 /* auto-generated vue proxies */
-import { defineContainer } from './vue-component-lib/utils';\n`;
+import { defineContainer } from './vue-component-lib/utils.js';\n`;
     const generateTypeImports = () => {
         if (outputTarget.componentCorePackage !== undefined) {
-            const dirPath = outputTarget.includeImportCustomElements ? `/${outputTarget.customElementsDir || 'components'}` : '';
+            const dirPath = outputTarget.includeImportCustomElements
+                ? `/${outputTarget.customElementsDir || 'components'}`
+                : '';
             return `import type { ${IMPORT_TYPES} } from '${normalizePath(outputTarget.componentCorePackage)}${dirPath}';\n`;
         }
-        return `import type { ${IMPORT_TYPES} } from '${normalizePath(componentsTypeFile)}';\n`;
+        return `import type { ${IMPORT_TYPES} } from '${normalizePath(componentsTypeFile)}.js';\n`;
     };
     const typeImports = generateTypeImports();
     let sourceImports = '';
     let registerCustomElements = '';
     if (outputTarget.includeImportCustomElements && outputTarget.componentCorePackage !== undefined) {
-        const cmpImports = components.map(component => {
+        const cmpImports = components.map((component) => {
             const pascalImport = dashToPascalCase(component.tagName);
-            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir ||
-                'components'}/${component.tagName}.js';`;
+            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir || 'components'}/${component.tagName}.js';`;
         });
         sourceImports = cmpImports.join('\n');
     }
@@ -80,9 +81,7 @@ export function getPathToCorePackageLoader(config, outputTarget) {
     const distAbsEsmLoaderPath = (distOutputTarget === null || distOutputTarget === void 0 ? void 0 : distOutputTarget.esmLoaderPath) && path.isAbsolute(distOutputTarget.esmLoaderPath)
         ? distOutputTarget.esmLoaderPath
         : null;
-    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath
-        ? path.relative(config.rootDir, distAbsEsmLoaderPath)
-        : null;
+    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath ? path.relative(config.rootDir, distAbsEsmLoaderPath) : null;
     const loaderDir = outputTarget.loaderDir || distRelEsmLoaderPath || DEFAULT_LOADER_DIR;
     return normalizePath(path.join(basePkg, loaderDir));
 }
diff --git a/dist/plugin.js b/dist/plugin.js
index 042d0deb6faf247351aa240180050e418b56f985..a4713018139ce26104ec306b77e3292f8c7df041 100644
--- a/dist/plugin.js
+++ b/dist/plugin.js
@@ -1,5 +1,5 @@
-import { normalizePath } from './utils';
-import { vueProxyOutput } from './output-vue';
+import { normalizePath } from './utils.js';
+import { vueProxyOutput } from './output-vue.js';
 import path from 'path';
 export const vueOutputTarget = (outputTarget) => ({
     type: 'custom',
diff --git a/dist/utils.d.ts b/dist/utils.d.ts
index 44733fee64db3d4d1ad26ef4834224aec4d9c26b..14dbcffcd2ab77ad9781b32cb15ad98a8023dd2e 100644
--- a/dist/utils.d.ts
+++ b/dist/utils.d.ts
@@ -1,7 +1,6 @@
 import type { PackageJSON } from './types';
 export declare const toLowerCase: (str: string) => string;
 export declare const dashToPascalCase: (str: string) => string;
-export declare function flatOne<T>(array: T[][]): T[];
 export declare function sortBy<T>(array: T[], prop: (item: T) => string): T[];
 export declare function normalizePath(str: string): string;
 export declare function relativeImport(pathFrom: string, pathTo: string, ext?: string): string;
diff --git a/dist/utils.js b/dist/utils.js
index 3978075c26eb354fd06565ee43d423c93f3b31f0..185d4bbf29228473dbcc1590b1a3dbb8fcab5c92 100644
--- a/dist/utils.js
+++ b/dist/utils.js
@@ -7,15 +7,6 @@ export const dashToPascalCase = (str) => toLowerCase(str)
     .split('-')
     .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))
     .join('');
-export function flatOne(array) {
-    if (array.flat) {
-        return array.flat(1);
-    }
-    return array.reduce((result, item) => {
-        result.push(...item);
-        return result;
-    }, []);
-}
 export function sortBy(array, prop) {
     return array.slice().sort((a, b) => {
         const nameA = prop(a);
