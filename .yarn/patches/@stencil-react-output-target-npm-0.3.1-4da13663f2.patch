diff --git a/dist/index.cjs.js b/dist/index.cjs.js
index ed803c547b18555f83d05c0f6b8880207ed34bb5..3ec06e61885a9c7e76068abd6c5c8c10d29921bf 100644
--- a/dist/index.cjs.js
+++ b/dist/index.cjs.js
@@ -161,7 +161,7 @@ function generateProxies(config, components, pkgData, outputTarget, rootDir) {
     const imports = `/* eslint-disable */
 /* tslint:disable */
 /* auto-generated react proxies */
-import { createReactComponent } from './react-component-lib';\n`;
+import { createReactComponent } from './react-component-lib/index.js';\n`;
     /**
      * Generate JSX import type from correct location.
      * When using custom elements build, we need to import from
@@ -170,7 +170,9 @@ import { createReactComponent } from './react-component-lib';\n`;
      */
     const generateTypeImports = () => {
         if (outputTarget.componentCorePackage !== undefined) {
-            const dirPath = outputTarget.includeImportCustomElements ? `/${outputTarget.customElementsDir || 'components'}` : '';
+            const dirPath = outputTarget.includeImportCustomElements
+                ? `/${outputTarget.customElementsDir || 'components'}`
+                : '';
             return `import type { ${IMPORT_TYPES} } from '${normalizePath(outputTarget.componentCorePackage)}${dirPath}';\n`;
         }
         return `import type { ${IMPORT_TYPES} } from '${normalizePath(componentsTypeFile)}';\n`;
@@ -184,19 +186,18 @@ import { createReactComponent } from './react-component-lib';\n`;
      * Component that takes in the Web Component as a parameter.
      */
     if (outputTarget.includeImportCustomElements && outputTarget.componentCorePackage !== undefined) {
-        const cmpImports = components.map(component => {
+        const cmpImports = components.map((component) => {
             const pascalImport = dashToPascalCase(component.tagName);
-            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir ||
-                'components'}/${component.tagName}.js';`;
+            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir || 'components'}/${component.tagName}.js';`;
         });
         sourceImports = cmpImports.join('\n');
     }
     else if (outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${APPLY_POLYFILLS}().then(() => ${REGISTER_CUSTOM_ELEMENTS}());`;
     }
     else if (!outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${REGISTER_CUSTOM_ELEMENTS}();`;
     }
     const final = [
@@ -204,7 +205,9 @@ import { createReactComponent } from './react-component-lib';\n`;
         typeImports,
         sourceImports,
         registerCustomElements,
-        components.map(cmpMeta => createComponentDefinition(cmpMeta, outputTarget.includeImportCustomElements)).join('\n'),
+        components
+            .map((cmpMeta) => createComponentDefinition(cmpMeta, outputTarget.includeImportCustomElements))
+            .join('\n'),
     ];
     return final.join('\n') + '\n';
 }
@@ -222,9 +225,7 @@ function createComponentDefinition(cmpMeta, includeCustomElement = false) {
         template += `, undefined, undefined, define${tagNameAsPascal}`;
     }
     template += `);`;
-    return [
-        template
-    ];
+    return [template];
 }
 /**
  * Copy resources used to generate the Stencil-React bindings. The resources copied here are not specific a project's
@@ -261,9 +262,7 @@ function getPathToCorePackageLoader(config, outputTarget) {
     const distAbsEsmLoaderPath = (distOutputTarget === null || distOutputTarget === void 0 ? void 0 : distOutputTarget.esmLoaderPath) && path__default['default'].isAbsolute(distOutputTarget.esmLoaderPath)
         ? distOutputTarget.esmLoaderPath
         : null;
-    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath
-        ? path__default['default'].relative(config.rootDir, distAbsEsmLoaderPath)
-        : null;
+    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath ? path__default['default'].relative(config.rootDir, distAbsEsmLoaderPath) : null;
     const loaderDir = outputTarget.loaderDir || distRelEsmLoaderPath || DEFAULT_LOADER_DIR;
     return normalizePath(path__default['default'].join(basePkg, loaderDir));
 }
diff --git a/dist/index.d.ts b/dist/index.d.ts
index f4fce6b403df1f833bf216c50e19fd52568e6f02..9a76ec911ab4b6400a282abb21555d12e7758af6 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,2 +1,2 @@
-export { reactOutputTarget } from './plugin';
+export { reactOutputTarget } from './plugin.js';
 export type { OutputTargetReact } from './types';
diff --git a/dist/index.js b/dist/index.js
index 280cba2bee732cbc879a9001e4cb376d1d6bc2a7..e540feb50efe72f6d18c520447d999650910320e 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -152,7 +152,7 @@ function generateProxies(config, components, pkgData, outputTarget, rootDir) {
     const imports = `/* eslint-disable */
 /* tslint:disable */
 /* auto-generated react proxies */
-import { createReactComponent } from './react-component-lib';\n`;
+import { createReactComponent } from './react-component-lib/index.js';\n`;
     /**
      * Generate JSX import type from correct location.
      * When using custom elements build, we need to import from
@@ -161,7 +161,9 @@ import { createReactComponent } from './react-component-lib';\n`;
      */
     const generateTypeImports = () => {
         if (outputTarget.componentCorePackage !== undefined) {
-            const dirPath = outputTarget.includeImportCustomElements ? `/${outputTarget.customElementsDir || 'components'}` : '';
+            const dirPath = outputTarget.includeImportCustomElements
+                ? `/${outputTarget.customElementsDir || 'components'}`
+                : '';
             return `import type { ${IMPORT_TYPES} } from '${normalizePath(outputTarget.componentCorePackage)}${dirPath}';\n`;
         }
         return `import type { ${IMPORT_TYPES} } from '${normalizePath(componentsTypeFile)}';\n`;
@@ -175,19 +177,18 @@ import { createReactComponent } from './react-component-lib';\n`;
      * Component that takes in the Web Component as a parameter.
      */
     if (outputTarget.includeImportCustomElements && outputTarget.componentCorePackage !== undefined) {
-        const cmpImports = components.map(component => {
+        const cmpImports = components.map((component) => {
             const pascalImport = dashToPascalCase(component.tagName);
-            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir ||
-                'components'}/${component.tagName}.js';`;
+            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir || 'components'}/${component.tagName}.js';`;
         });
         sourceImports = cmpImports.join('\n');
     }
     else if (outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${APPLY_POLYFILLS}().then(() => ${REGISTER_CUSTOM_ELEMENTS}());`;
     }
     else if (!outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${REGISTER_CUSTOM_ELEMENTS}();`;
     }
     const final = [
@@ -195,7 +196,9 @@ import { createReactComponent } from './react-component-lib';\n`;
         typeImports,
         sourceImports,
         registerCustomElements,
-        components.map(cmpMeta => createComponentDefinition(cmpMeta, outputTarget.includeImportCustomElements)).join('\n'),
+        components
+            .map((cmpMeta) => createComponentDefinition(cmpMeta, outputTarget.includeImportCustomElements))
+            .join('\n'),
     ];
     return final.join('\n') + '\n';
 }
@@ -213,9 +216,7 @@ function createComponentDefinition(cmpMeta, includeCustomElement = false) {
         template += `, undefined, undefined, define${tagNameAsPascal}`;
     }
     template += `);`;
-    return [
-        template
-    ];
+    return [template];
 }
 /**
  * Copy resources used to generate the Stencil-React bindings. The resources copied here are not specific a project's
@@ -252,9 +253,7 @@ function getPathToCorePackageLoader(config, outputTarget) {
     const distAbsEsmLoaderPath = (distOutputTarget === null || distOutputTarget === void 0 ? void 0 : distOutputTarget.esmLoaderPath) && path.isAbsolute(distOutputTarget.esmLoaderPath)
         ? distOutputTarget.esmLoaderPath
         : null;
-    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath
-        ? path.relative(config.rootDir, distAbsEsmLoaderPath)
-        : null;
+    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath ? path.relative(config.rootDir, distAbsEsmLoaderPath) : null;
     const loaderDir = outputTarget.loaderDir || distRelEsmLoaderPath || DEFAULT_LOADER_DIR;
     return normalizePath(path.join(basePkg, loaderDir));
 }
diff --git a/dist/output-react.js b/dist/output-react.js
index 43284218127e75e9dd599aabf313eed04a3bb46a..502848a0d0f0c56a335fb31b00eb86b7f0b356d5 100644
--- a/dist/output-react.js
+++ b/dist/output-react.js
@@ -1,5 +1,5 @@
 import path from 'path';
-import { dashToPascalCase, normalizePath, readPackageJson, relativeImport, sortBy } from './utils';
+import { dashToPascalCase, normalizePath, readPackageJson, relativeImport, sortBy } from './utils.js';
 /**
  * Generate and write the Stencil-React bindings to disc
  * @param config the Stencil configuration associated with the project
@@ -41,7 +41,7 @@ export function generateProxies(config, components, pkgData, outputTarget, rootD
     const imports = `/* eslint-disable */
 /* tslint:disable */
 /* auto-generated react proxies */
-import { createReactComponent } from './react-component-lib';\n`;
+import { createReactComponent } from './react-component-lib/index.js';\n`;
     /**
      * Generate JSX import type from correct location.
      * When using custom elements build, we need to import from
@@ -50,7 +50,9 @@ import { createReactComponent } from './react-component-lib';\n`;
      */
     const generateTypeImports = () => {
         if (outputTarget.componentCorePackage !== undefined) {
-            const dirPath = outputTarget.includeImportCustomElements ? `/${outputTarget.customElementsDir || 'components'}` : '';
+            const dirPath = outputTarget.includeImportCustomElements
+                ? `/${outputTarget.customElementsDir || 'components'}`
+                : '';
             return `import type { ${IMPORT_TYPES} } from '${normalizePath(outputTarget.componentCorePackage)}${dirPath}';\n`;
         }
         return `import type { ${IMPORT_TYPES} } from '${normalizePath(componentsTypeFile)}';\n`;
@@ -64,19 +66,18 @@ import { createReactComponent } from './react-component-lib';\n`;
      * Component that takes in the Web Component as a parameter.
      */
     if (outputTarget.includeImportCustomElements && outputTarget.componentCorePackage !== undefined) {
-        const cmpImports = components.map(component => {
+        const cmpImports = components.map((component) => {
             const pascalImport = dashToPascalCase(component.tagName);
-            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir ||
-                'components'}/${component.tagName}.js';`;
+            return `import { defineCustomElement as define${pascalImport} } from '${normalizePath(outputTarget.componentCorePackage)}/${outputTarget.customElementsDir || 'components'}/${component.tagName}.js';`;
         });
         sourceImports = cmpImports.join('\n');
     }
     else if (outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${APPLY_POLYFILLS}, ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${APPLY_POLYFILLS}().then(() => ${REGISTER_CUSTOM_ELEMENTS}());`;
     }
     else if (!outputTarget.includePolyfills && outputTarget.includeDefineCustomElements) {
-        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}';\n`;
+        sourceImports = `import { ${REGISTER_CUSTOM_ELEMENTS} } from '${pathToCorePackageLoader}/index.js';\n`;
         registerCustomElements = `${REGISTER_CUSTOM_ELEMENTS}();`;
     }
     const final = [
@@ -84,7 +85,9 @@ import { createReactComponent } from './react-component-lib';\n`;
         typeImports,
         sourceImports,
         registerCustomElements,
-        components.map(cmpMeta => createComponentDefinition(cmpMeta, outputTarget.includeImportCustomElements)).join('\n'),
+        components
+            .map((cmpMeta) => createComponentDefinition(cmpMeta, outputTarget.includeImportCustomElements))
+            .join('\n'),
     ];
     return final.join('\n') + '\n';
 }
@@ -102,9 +105,7 @@ export function createComponentDefinition(cmpMeta, includeCustomElement = false)
         template += `, undefined, undefined, define${tagNameAsPascal}`;
     }
     template += `);`;
-    return [
-        template
-    ];
+    return [template];
 }
 /**
  * Copy resources used to generate the Stencil-React bindings. The resources copied here are not specific a project's
@@ -141,9 +142,7 @@ export function getPathToCorePackageLoader(config, outputTarget) {
     const distAbsEsmLoaderPath = (distOutputTarget === null || distOutputTarget === void 0 ? void 0 : distOutputTarget.esmLoaderPath) && path.isAbsolute(distOutputTarget.esmLoaderPath)
         ? distOutputTarget.esmLoaderPath
         : null;
-    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath
-        ? path.relative(config.rootDir, distAbsEsmLoaderPath)
-        : null;
+    const distRelEsmLoaderPath = config.rootDir && distAbsEsmLoaderPath ? path.relative(config.rootDir, distAbsEsmLoaderPath) : null;
     const loaderDir = outputTarget.loaderDir || distRelEsmLoaderPath || DEFAULT_LOADER_DIR;
     return normalizePath(path.join(basePkg, loaderDir));
 }
diff --git a/dist/plugin.js b/dist/plugin.js
index dea591d26435b314e486b298069bb6bded38e235..50c1bae5c1317fdbed359fc4798975b64d91e708 100644
--- a/dist/plugin.js
+++ b/dist/plugin.js
@@ -1,5 +1,5 @@
-import { normalizePath } from './utils';
-import { reactProxyOutput } from './output-react';
+import { normalizePath } from './utils.js';
+import { reactProxyOutput } from './output-react.js';
 import path from 'path';
 /**
  * Creates an output target for binding Stencil components to be used in a React context
diff --git a/dist/utils.d.ts b/dist/utils.d.ts
index a6e82ac4ace09226744dc46284b3196fc748552d..67abef52069beda8794790dd23e2b660e535ec8b 100644
--- a/dist/utils.d.ts
+++ b/dist/utils.d.ts
@@ -11,12 +11,6 @@ export declare const toLowerCase: (str: string) => string;
  * @returns the PascalCased string
  */
 export declare const dashToPascalCase: (str: string) => string;
-/**
- * Flattens a two-dimensional array into a one dimensional array
- * @param array the array to flatten
- * @returns the flattened array
- */
-export declare function flatOne<T>(array: T[][]): T[];
 /**
  * Sorts a provided array by a property belonging to an item that exists on each item in the array
  * @param array the array to sort
diff --git a/dist/utils.js b/dist/utils.js
index 6ebe086777f44235e60a9e75aebcde515a7ef862..8460721dd7d391bb0cf1b5dcc0c9204154eaf314 100644
--- a/dist/utils.js
+++ b/dist/utils.js
@@ -17,21 +17,6 @@ export const dashToPascalCase = (str) => toLowerCase(str)
     .split('-')
     .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))
     .join('');
-// TODO(STENCIL-356): Investigate removing this unused function
-/**
- * Flattens a two-dimensional array into a one dimensional array
- * @param array the array to flatten
- * @returns the flattened array
- */
-export function flatOne(array) {
-    if (array.flat) {
-        return array.flat(1);
-    }
-    return array.reduce((result, item) => {
-        result.push(...item);
-        return result;
-    }, []);
-}
 /**
  * Sorts a provided array by a property belonging to an item that exists on each item in the array
  * @param array the array to sort
diff --git a/react-component-lib/createComponent.tsx b/react-component-lib/createComponent.tsx
index 723baa9f74247872379c35c0364cc78b6764aa05..7e1d1ef7dbbe2d2ffdc4be351053998b7bbd8252 100644
--- a/react-component-lib/createComponent.tsx
+++ b/react-component-lib/createComponent.tsx
@@ -1,13 +1,6 @@
 import React, { createElement } from 'react';
 
-import {
-  attachProps,
-  camelToDashCase,
-  createForwardRef,
-  dashToPascalCase,
-  isCoveredByReact,
-  mergeRefs,
-} from './utils';
+import { attachProps, camelToDashCase, createForwardRef, dashToPascalCase, isCoveredByReact, mergeRefs } from './utils/index.js';
 
 export interface HTMLStencilElement extends HTMLElement {
   componentOnReady(): Promise<this>;
@@ -28,9 +21,9 @@ export const createReactComponent = <
   ReactComponentContext?: React.Context<ContextStateType>,
   manipulatePropsFunction?: (
     originalProps: StencilReactInternalProps<ElementType>,
-    propsToPass: any,
+    propsToPass: any
   ) => ExpandedPropsTypes,
-  defineCustomElement?: () => void,
+  defineCustomElement?: () => void
 ) => {
   if (defineCustomElement !== undefined) {
     defineCustomElement();
@@ -77,7 +70,7 @@ export const createReactComponent = <
           }
         }
         return acc;
-      }, {});
+      }, {} as ExpandedPropsTypes);
 
       if (manipulatePropsFunction) {
         propsToPass = manipulatePropsFunction(this.props, propsToPass);
diff --git a/react-component-lib/createOverlayComponent.tsx b/react-component-lib/createOverlayComponent.tsx
index 3203c0deaf02cee90ff9c4616a8929fd144c547a..8a96c0303cbdb028bac149cc09cb3091ee5cd3a3 100644
--- a/react-component-lib/createOverlayComponent.tsx
+++ b/react-component-lib/createOverlayComponent.tsx
@@ -2,13 +2,7 @@ import React from 'react';
 import ReactDOM from 'react-dom';
 
 import { OverlayEventDetail } from './interfaces';
-import {
-  StencilReactForwardedRef,
-  attachProps,
-  dashToPascalCase,
-  defineCustomElement,
-  setRef,
-} from './utils';
+import { StencilReactForwardedRef, attachProps, dashToPascalCase, defineCustomElement, setRef } from './utils/index.js';
 
 interface OverlayElement extends HTMLElement {
   present: () => Promise<void>;
@@ -24,10 +18,7 @@ export interface ReactOverlayProps {
   onWillPresent?: (event: CustomEvent<OverlayEventDetail>) => void;
 }
 
-export const createOverlayComponent = <
-  OverlayComponent extends object,
-  OverlayType extends OverlayElement
->(
+export const createOverlayComponent = <OverlayComponent extends object, OverlayType extends OverlayElement>(
   tagName: string,
   controller: { create: (options: any) => Promise<OverlayType> },
   customElement?: any
@@ -79,7 +70,7 @@ export const createOverlayComponent = <
       if (this.props.onDidDismiss) {
         this.props.onDidDismiss(event);
       }
-      setRef(this.props.forwardedRef, null)
+      setRef(this.props.forwardedRef, null);
     }
 
     shouldComponentUpdate(nextProps: Props) {
@@ -113,25 +104,14 @@ export const createOverlayComponent = <
     }
 
     async present(prevProps?: Props) {
-      const {
-        children,
-        isOpen,
-        onDidDismiss,
-        onDidPresent,
-        onWillDismiss,
-        onWillPresent,
-        ...cProps
-      } = this.props;
+      const { children, isOpen, onDidDismiss, onDidPresent, onWillDismiss, onWillPresent, ...cProps } = this.props;
       const elementProps = {
         ...cProps,
         ref: this.props.forwardedRef,
         [didDismissEventName]: this.handleDismiss,
-        [didPresentEventName]: (e: CustomEvent) =>
-          this.props.onDidPresent && this.props.onDidPresent(e),
-        [willDismissEventName]: (e: CustomEvent) =>
-          this.props.onWillDismiss && this.props.onWillDismiss(e),
-        [willPresentEventName]: (e: CustomEvent) =>
-          this.props.onWillPresent && this.props.onWillPresent(e),
+        [didPresentEventName]: (e: CustomEvent) => this.props.onDidPresent && this.props.onDidPresent(e),
+        [willDismissEventName]: (e: CustomEvent) => this.props.onWillDismiss && this.props.onWillDismiss(e),
+        [willPresentEventName]: (e: CustomEvent) => this.props.onWillPresent && this.props.onWillPresent(e),
       };
 
       this.overlay = await controller.create({
diff --git a/react-component-lib/index.ts b/react-component-lib/index.ts
index 85e81ad196c6d8c5dd7076a3b57bc3afbb434b0d..611f53c9483eedc6672f03d6ee43d4b705bff381 100644
--- a/react-component-lib/index.ts
+++ b/react-component-lib/index.ts
@@ -1,2 +1,2 @@
-export { createReactComponent } from './createComponent';
-export { createOverlayComponent } from './createOverlayComponent';
+export { createReactComponent } from './createComponent.js';
+export { createOverlayComponent } from './createOverlayComponent.js';
diff --git a/react-component-lib/utils/attachProps.ts b/react-component-lib/utils/attachProps.ts
index de2cc499b200f76ea3f4aef1474f5c567631e7c2..26edcbe308b3b3c81b387db9154af7b2940b2057 100644
--- a/react-component-lib/utils/attachProps.ts
+++ b/react-component-lib/utils/attachProps.ts
@@ -1,4 +1,4 @@
-import { camelToDashCase } from './case';
+import { camelToDashCase } from './case.js';
 
 export const attachProps = (node: HTMLElement, newProps: any, oldProps: any = {}) => {
   // some test frameworks don't render DOM elements, so we test here to make sure we are dealing with DOM first
diff --git a/react-component-lib/utils/case.ts b/react-component-lib/utils/case.ts
index 047704f13dff4a2d4a1f3674c84bfa7972950fcd..786689dc984f3ea0959fe3499ff795410b02b117 100644
--- a/react-component-lib/utils/case.ts
+++ b/react-component-lib/utils/case.ts
@@ -4,5 +4,4 @@ export const dashToPascalCase = (str: string) =>
     .split('-')
     .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))
     .join('');
-export const camelToDashCase = (str: string) =>
-  str.replace(/([A-Z])/g, (m: string) => `-${m[0].toLowerCase()}`);
+export const camelToDashCase = (str: string) => str.replace(/([A-Z])/g, (m: string) => `-${m[0].toLowerCase()}`);
diff --git a/react-component-lib/utils/index.tsx b/react-component-lib/utils/index.tsx
index 821d067433c36569bcb7dd057ef00f11ed49236f..428ca59138cac669043443e845136c945904ab3b 100644
--- a/react-component-lib/utils/index.tsx
+++ b/react-component-lib/utils/index.tsx
@@ -11,10 +11,10 @@ export type StencilReactForwardedRef<T> = ((instance: T | null) => void) | React
 
 export const setRef = (ref: StencilReactForwardedRef<any> | React.Ref<any> | undefined, value: any) => {
   if (typeof ref === 'function') {
-    ref(value)
+    ref(value);
   } else if (ref != null) {
     // Cast as a MutableRef so we can assign current
-    (ref as React.MutableRefObject<any>).current = value
+    (ref as React.MutableRefObject<any>).current = value;
   }
 };
 
@@ -22,19 +22,16 @@ export const mergeRefs = (
   ...refs: (StencilReactForwardedRef<any> | React.Ref<any> | undefined)[]
 ): React.RefCallback<any> => {
   return (value: any) => {
-    refs.forEach(ref => {
-      setRef(ref, value)
-    })
-  }
+    refs.forEach((ref) => {
+      setRef(ref, value);
+    });
+  };
 };
 
-export const createForwardRef = <PropType, ElementType>(
-  ReactComponent: any,
-  displayName: string,
-) => {
+export const createForwardRef = <PropType, ElementType>(ReactComponent: any, displayName: string) => {
   const forwardRef = (
     props: StencilReactExternalProps<PropType, ElementType>,
-    ref: StencilReactForwardedRef<ElementType>,
+    ref: StencilReactForwardedRef<ElementType>
   ) => {
     return <ReactComponent {...props} forwardedRef={ref} />;
   };
@@ -44,14 +41,10 @@ export const createForwardRef = <PropType, ElementType>(
 };
 
 export const defineCustomElement = (tagName: string, customElement: any) => {
-  if (
-    customElement !== undefined &&
-    typeof customElements !== 'undefined' &&
-    !customElements.get(tagName)
-  ) {
+  if (customElement !== undefined && typeof customElements !== 'undefined' && !customElements.get(tagName)) {
     customElements.define(tagName, customElement);
   }
-}
+};
 
-export * from './attachProps';
-export * from './case';
+export * from './attachProps.js';
+export * from './case.js';
